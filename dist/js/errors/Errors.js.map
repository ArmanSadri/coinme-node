{"version":3,"sources":["../../../src/js/errors/Errors.js"],"names":[],"mappings":"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","file":"Errors.js","sourcesContent":["import Utility from '../Utility';\nimport Preconditions from '../Preconditions';\nimport AbstractError from \"./AbstractError\";\nimport Lodash from \"lodash\";\nimport createError from \"http-errors\";\nimport HttpError from './HttpError';\n\nlet defaults = {\n    message: 'Unknown Error',\n    properties: {}\n};\n\nclass Errors {\n\n    /**\n     *\n     * @param {function} errorFactory\n     * @param {*} value\n     * @param {*|Function} predicateFn\n     * @param {Object} [options]\n     * @param {String} [options.message]\n     * @param {Number} [options.statusCode]\n     * @param {Object|undefined} [options.properties]\n     * @returns {*}\n     */\n    static errorIf(errorFactory, value, predicateFn, options) {\n        Preconditions.shouldBeFunction(errorFactory);\n        Preconditions.shouldBeFunction(predicateFn);\n\n        if (!Utility.isNullOrUndefined(options)) {\n            Preconditions.shouldBeObject(options);\n        }\n\n        let result = predicateFn(value);\n\n        if (false === result || Utility.isNullOrUndefined(result)) {\n            return value;\n        } else {\n            result = Lodash.defaultsDeep(result, options || {}, defaults);\n\n            throw errorFactory(result.message, result.properties);\n        }\n    }\n\n    /**\n     *\n     * @param {*} value\n     * @param {*|Function} predicateFn\n     * @param {Object} [options]\n     * @param {String} [options.message]\n     * @param {Number} [options.statusCode]\n     * @param {Object|undefined} [options.properties]\n     * @returns {*}\n     */\n    static notFoundIf(value, predicateFn, options) {\n        this.errorIf(this.notFound, value, predicateFn, options);\n    }\n\n    /**\n     *\n     * @param {*} value\n     * @param {*|Function} predicateFn\n     * @param {Object} [options]\n     * @param {String} [options.message]\n     * @param {Number} [options.statusCode]\n     * @param {Object|undefined} [options.properties]\n     * @returns {*}\n     */\n    static badRequestIf(value, predicateFn, options) {\n        this.errorIf(this.badRequest, value, predicateFn, options);\n    }\n\n    /**\n     * Determines if the given err object is an error class\n     *\n     * @param {*} clazz\n     * @returns {boolean}\n     */\n    static isErrorClass(clazz) {\n        if (AbstractError.isClass(clazz)) {\n            return true;\n        }\n\n        if ('function' !== typeof clazz) {\n            return false;\n        }\n\n        while (clazz) {\n            if (clazz === Error) {\n                return true;\n            }\n\n            clazz = Object.getPrototypeOf(clazz);\n        }\n\n        return false;\n    }\n\n    /**\n     * Determines if the given error is\n     *\n     * @param object\n     * @returns {boolean}\n     */\n    static isErrorInstance(object) {\n        return object instanceof Error || AbstractError.isInstance(object);\n    }\n\n    static isError(instanceOrClass) {\n        return this.isErrorInstance(instanceOrClass) || this.isErrorClass(instanceOrClass);\n    }\n\n    /**\n     * @param {Error|HttpError|*} instanceOrClass\n     * @return boolean\n     */\n    static isHttpError(instanceOrClass) {\n        return HttpError.isInstanceOrClass(instanceOrClass);\n    }\n\n    /**\n     *\n     * @param {{[cause]: Error, message: String, [properties]:Object}|String|Error} [messageOrSpecOrError]\n     * @param {Object} [properties]\n     * @return {Error}\n     */\n    static badRequest(messageOrSpecOrError, properties) {\n        return Errors.httpError(400, messageOrSpecOrError, properties);\n    }\n\n    /**\n     * @param {{[cause]: Error, message: String, [properties]:Object}|String|Error} messageOrSpecOrError\n     * @param {Object} [properties]\n     * @return {Error}\n     */\n    static notFound(messageOrSpecOrError, properties) {\n        return Errors.httpError(404, messageOrSpecOrError, properties);\n    }\n\n    /**\n     *\n     * @param {{[cause]: Error, message: String, [properties]:Object}|String|Error} [messageOrSpecOrError]\n     * @param {Object} [properties]\n     * @returns {Error}\n     */\n    static serverError(messageOrSpecOrError, properties) {\n        return Errors.httpError(500, messageOrSpecOrError, properties);\n    }\n\n    /**\n     *\n     * @param {number} statusCode\n     * @param {{[cause]: Error, message: String, [properties]:Object}|String|Error} [messageOrSpecOrError]\n     * @param {Object} [properties]\n     * @param {Object} [properties]\n     * @return {Error}\n     */\n    static httpError(statusCode, messageOrSpecOrError, properties) {\n        let stack = null;\n        let message = null;\n        let cause = null;\n\n        if (Utility.isNullOrUndefined(messageOrSpecOrError)) {\n            // I guess this is ok..\n        } else if (this.isError(messageOrSpecOrError)) {\n            message = messageOrSpecOrError.message;\n            stack = messageOrSpecOrError.stack;\n        } else if (Utility.isString(messageOrSpecOrError)) {\n            message = messageOrSpecOrError;\n        } else if (Utility.isObject(messageOrSpecOrError)) {\n            statusCode = Lodash.result(messageOrSpecOrError, 'statusCode') || statusCode;\n            message = Lodash.result(messageOrSpecOrError, 'message');\n            cause = Lodash.result(messageOrSpecOrError, 'cause');\n            properties = Lodash.result(messageOrSpecOrError, 'properties');\n        }\n\n        if (statusCode) {\n            Preconditions.shouldBeNumber(statusCode);\n        }\n\n        if (message) {\n            Preconditions.shouldBeString(message);\n        }\n\n        if (properties) {\n            Preconditions.shouldBeObject(properties);\n        }\n\n        let template = createError(statusCode, message, properties);\n\n        let error = new HttpError({\n            cause: cause,\n            properties: template.properties,\n            message: template.message,\n            stack: template.stack,\n            statusCode: template.statusCode\n        });\n\n        // if (stack) {\n        //     error.stack = stack;\n        // }\n\n        if (!error.toJSON) {\n            error.toJSON = function () {\n                return {\n                    statusCode: error.statusCode,\n                    message: error.message,\n                    properties: error.properties\n                };\n            };\n        }\n\n        return error;\n    }\n\n    /**\n     *\n     * @param {String} [message]\n     * @param {Object} [properties]\n     * @returns {Error}\n     */\n    static forbidden(message, properties) {\n        return Errors.httpError(403, message, properties);\n    }\n\n    /**\n     * @param {Error|AbstractError|null|undefined} error\n     * @returns {Object|null}\n     */\n    static optJSON(error) {\n        if (Utility.isNullOrUndefined(error)) {\n            return null;\n        } else if (Utility.isError(error)) {\n            return Errors.toJSON(error);\n        } else if (Utility.isPrimitive(error)) {\n            return {\n                message: '' + error\n            };\n        } else {\n            // 'opt' means optional.\n            return null;\n        }\n    }\n    \n    /**\n     * @param {AbstractError|Error} error\n     */\n    static toJSON(error) {\n        Preconditions.shouldBeError(error);\n\n        if (!Utility.isFunction(error.toJSON)) {\n            return {\n                name: error.name,\n                message: error.message\n            };\n        } else {\n            return error.toJSON();\n        }\n    }\n}\n\nexport default Errors;"]}