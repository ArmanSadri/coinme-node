{"version":3,"sources":["../../../src/js/errors/Errors.js"],"names":["defaults","message","properties","Errors","clazz","isClass","Error","Object","getPrototypeOf","object","isInstance","instanceOrClass","isErrorInstance","isErrorClass","isInstanceOrClass","messageOrSpecOrError","createHttpErrorInstance","statusCode","stack","cause","isNullOrUndefined","isError","isString","isObject","result","shouldBeNumber","shouldBeString","shouldBeObject","template","error","toJSON","isPrimitive","shouldBeError","isFunction","name","errorFactory","value","predicateFn","options","shouldBeFunction","defaultsDeep","throwErrorIf","createNotFoundInstance","createBadRequestInstance","optClassName","TypeError","thingy"],"mappings":"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","file":"Errors.js","sourcesContent":["import Utility from '../Utility';\nimport Preconditions from '../Preconditions';\nimport AbstractError from \"./AbstractError\";\nimport Lodash from \"lodash\";\nimport createError from \"http-errors\";\nimport HttpError from './HttpError';\n\nlet defaults = {\n    message: 'Unknown Error',\n    properties: {}\n};\n\nclass Errors {\n\n    //region detection\n    /**\n     * Determines if the given err object is an error class\n     *\n     * @param {*} clazz\n     * @returns {boolean}\n     */\n    static isErrorClass(clazz) {\n        if (AbstractError.isClass(clazz)) {\n            return true;\n        }\n\n        if ('function' !== typeof clazz) {\n            return false;\n        }\n\n        while (clazz) {\n            if (clazz === Error) {\n                return true;\n            }\n\n            clazz = Object.getPrototypeOf(clazz);\n        }\n\n        return false;\n    }\n\n    /**\n     * Determines if the given error is\n     *\n     * @param object\n     * @returns {boolean}\n     */\n    static isErrorInstance(object) {\n        return object instanceof Error || AbstractError.isInstance(object);\n    }\n\n    static isError(instanceOrClass) {\n        return this.isErrorInstance(instanceOrClass) || this.isErrorClass(instanceOrClass);\n    }\n\n    /**\n     * @param {Error|HttpError|*} instanceOrClass\n     * @return boolean\n     */\n    static isHttpError(instanceOrClass) {\n        return HttpError.isInstanceOrClass(instanceOrClass);\n    }\n    //endregion\n\n    //region createInstance\n    /**\n     *\n     * @param {{[cause]: Error, message: String, [properties]:Object}|String|Error} [messageOrSpecOrError]\n     * @param {Object} [properties]\n     * @return {Error}\n     */\n    static createBadRequestInstance(messageOrSpecOrError, properties) {\n        return Errors.createHttpErrorInstance(400, messageOrSpecOrError, properties);\n    }\n\n    /**\n     * @param {{[cause]: Error, message: String, [properties]:Object}|String|Error} messageOrSpecOrError\n     * @param {Object} [properties]\n     * @return {Error}\n     */\n    static createNotFoundInstance(messageOrSpecOrError, properties) {\n        return Errors.createHttpErrorInstance(404, messageOrSpecOrError, properties);\n    }\n\n    /**\n     *\n     * @param {{[cause]: Error, message: String, [properties]:Object}|String|Error} [messageOrSpecOrError]\n     * @param {Object} [properties]\n     * @returns {Error}\n     */\n    static createServerErrorInstance(messageOrSpecOrError, properties) {\n        return Errors.createHttpErrorInstance(500, messageOrSpecOrError, properties);\n    }\n    /**\n     *\n     * @param {String} [message]\n     * @param {Object} [properties]\n     * @returns {Error}\n     */\n    static createForbiddenErrorInstance(message, properties) {\n        return Errors.createHttpErrorInstance(403, message, properties);\n    }\n\n    /**\n     *\n     * @param {number} statusCode\n     * @param {{[cause]: Error, message: String, [properties]:Object}|String|Error} [messageOrSpecOrError]\n     * @param {Object} [properties]\n     * @return {Error}\n     */\n    static createHttpErrorInstance(statusCode, messageOrSpecOrError, properties) {\n        let stack = null;\n        let message = null;\n        let cause = null;\n\n        if (Utility.isNullOrUndefined(messageOrSpecOrError)) {\n            // I guess this is ok..\n        } else if (this.isError(messageOrSpecOrError)) {\n            message = messageOrSpecOrError.message;\n            stack = messageOrSpecOrError.stack;\n        } else if (Utility.isString(messageOrSpecOrError)) {\n            message = messageOrSpecOrError;\n        } else if (Utility.isObject(messageOrSpecOrError)) {\n            statusCode = Lodash.result(messageOrSpecOrError, 'statusCode') || statusCode;\n            message = Lodash.result(messageOrSpecOrError, 'message');\n            cause = Lodash.result(messageOrSpecOrError, 'cause');\n            properties = Lodash.result(messageOrSpecOrError, 'properties');\n        }\n\n        if (statusCode) {\n            Preconditions.shouldBeNumber(statusCode);\n        }\n\n        if (message) {\n            Preconditions.shouldBeString(message);\n        }\n\n        if (properties) {\n            Preconditions.shouldBeObject(properties);\n        }\n\n        let template = createError(statusCode, message, properties);\n\n        let error = new HttpError({\n            cause: cause,\n            properties: template.properties,\n            message: template.message,\n            stack: template.stack,\n            statusCode: template.statusCode\n        });\n\n        // if (stack) {\n        //     error.stack = stack;\n        // }\n\n        if (!error.toJSON) {\n            error.toJSON = function () {\n                return {\n                    statusCode: error.statusCode,\n                    message: error.message,\n                    properties: error.properties\n                };\n            };\n        }\n\n        return error;\n    }\n    //endregion\n\n    /**\n     * @param {Error|AbstractError|null|undefined} error\n     * @returns {Object|null}\n     */\n    static optJSON(error) {\n        if (Utility.isNullOrUndefined(error)) {\n            return null;\n        } else if (Utility.isError(error)) {\n            return Errors.toJSON(error);\n        } else if (Utility.isPrimitive(error)) {\n            return {\n                message: '' + error\n            };\n        } else {\n            // 'opt' means optional.\n            return null;\n        }\n    }\n    \n    /**\n     * @param {AbstractError|Error} error\n     */\n    static toJSON(error) {\n        Preconditions.shouldBeError(error);\n\n        if (!Utility.isFunction(error.toJSON)) {\n            return {\n                name: error.name,\n                message: error.message\n            };\n        } else {\n            return error.toJSON();\n        }\n    }\n\n    /**\n     *\n     * @param {function} errorFactory\n     * @param {*} value\n     * @param {*|Function} predicateFn\n     * @param {Object} [options]\n     * @param {String} [options.message]\n     * @param {Number} [options.statusCode]\n     * @param {Object|undefined} [options.properties]\n     * @returns {*}\n     */\n    static throwErrorIf(errorFactory, value, predicateFn, options) {\n        Preconditions.shouldBeFunction(errorFactory);\n        Preconditions.shouldBeFunction(predicateFn);\n\n        if (!Utility.isNullOrUndefined(options)) {\n            Preconditions.shouldBeObject(options);\n        }\n\n        let result = predicateFn(value);\n\n        if (false === result || Utility.isNullOrUndefined(result)) {\n            return value;\n        } else {\n            result = Lodash.defaultsDeep(result, options || {}, defaults);\n\n            throw errorFactory(result.message, result.properties);\n        }\n    }\n\n    /**\n     *\n     * @param {*} value\n     * @param {*|Function} predicateFn\n     * @param {Object} [options]\n     * @param {String} [options.message]\n     * @param {Number} [options.statusCode]\n     * @param {Object|undefined} [options.properties]\n     * @returns {*}\n     */\n    static throwNotFoundIf(value, predicateFn, options) {\n        this.throwErrorIf(this.createNotFoundInstance, value, predicateFn, options);\n    }\n\n    /**\n     *\n     * @param {*} value\n     * @param {*|Function} predicateFn\n     * @param {Object} [options]\n     * @param {String} [options.message]\n     * @param {Number} [options.statusCode]\n     * @param {Object|undefined} [options.properties]\n     * @returns {*}\n     */\n    static throwBadRequestIf(value, predicateFn, options) {\n        this.throwErrorIf(this.createBadRequestInstance, value, predicateFn, options);\n    }\n\n    /**\n     * @param {{[cause]: Error, message: String, [properties]:Object}|String|Error} [messageOrSpecOrError]\n     * @param {Object} [properties]\n     * @return {Error}\n     */\n    static throwBadRequest(messageOrSpecOrError, properties) {\n        throw Errors.createBadRequestInstance(messageOrSpecOrError, properties);\n    }\n\n    /**\n     *\n     * @param {Class} clazz\n     */\n    static throwMustBeAbstract(clazz) {\n        let name = Utility.optClassName(clazz);\n\n        throw new TypeError(`${name} is abstract and cannot be created`);\n    }\n\n    /**\n     * @throws Error\n     */\n    static throwNotImplemented() {\n        throw new Error('This method is not implemented');\n    }\n\n    /**\n     * Throw a TypeError that says you have no idea what the fuck is going on.\n     *\n     * @param {*} thingy\n     * @throws TypeError\n     */\n    static throwNotSure(thingy) {\n        throw new TypeError(`Not sure what to do with ${thingy}`);\n    }\n}\n\nexport {Errors};\nexport default Errors;"]}