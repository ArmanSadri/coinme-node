{"version":3,"sources":["../../../src/js/errors/NotImplementedError.js"],"names":["NotImplementedError","options","isString","message"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEMA,mB;;;AAEF;;;;;;;AAOA,iCAAYC,OAAZ,EAAqB;AAAA;;AACjB,YAAI,kBAAQC,QAAR,CAAiBD,OAAjB,CAAJ,EAA+B;AAC3BA,sBAAU,EAACE,SAASF,OAAV,EAAV;AACH;;AAEDA,kBAAUA,WAAW,EAArB;AACAA,gBAAQE,OAAR,GAAkBF,QAAQE,OAAR,IAAmB,gCAArC;;AANiB,yIAQXF,OARW;AASpB;;AAED;;;;;;;mCAGkB;AACd,mBAAO,oBAAP;AACH;;;;;;QAGGD,mB,GAAAA,mB;kBACOA,mB","file":"NotImplementedError.js","sourcesContent":["import Utility from '../Utility';\nimport AbstractError from './AbstractError';\n\nclass NotImplementedError extends AbstractError {\n\n    /**\n     *\n     * @param {String|Object} [options]\n     * @param {String} [options.message]\n     * @param {Error} [options.cause]\n     * @constructor\n     */\n    constructor(options) {\n        if (Utility.isString(options)) {\n            options = {message: options};\n        }\n\n        options = options || {};\n        options.message = options.message || 'This method is not implemented';\n\n        super(options);\n    }\n\n    /**\n     * @return {String}\n     */\n    static toString() {\n        return 'PreconditionsError';\n    }\n}\n\nexport {NotImplementedError};\nexport default NotImplementedError;\n\n"]}