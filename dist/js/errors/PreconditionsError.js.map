{"version":3,"sources":["../../../src/js/errors/PreconditionsError.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEM,kB;;;AAEF;;;;;;;;;;AASA,gCAAY,OAAZ,EAAqB;AAAA;;AACjB,kBAAU,WAAW,EAArB;;AAEA,YAAI,QAAQ,QAAQ,aAAR,IAAyB,QAAQ,KAA7C;AACA,YAAI,gBAAgB,QAAQ,aAA5B;AACA,YAAI,cAAc,QAAQ,WAA1B;AACA,YAAI,UAAU,QAAQ,OAAtB;;AANiB,oIAQY,aARZ,YAQ+B,kBAAQ,MAAR,CAAe,aAAf,CAR/B,sBAQ4E,WAR5E,YAQ6F,kBAAQ,MAAR,CAAe,WAAf,CAR7F,qBAQwI,OARxI;;AAUjB,cAAK,aAAL,GAAqB,OAArB;AACA,cAAK,MAAL,GAAc,KAAd;AACA,cAAK,cAAL,GAAsB,aAAtB;AACA,cAAK,YAAL,GAAoB,WAApB;AAbiB;AAcpB;;;;4BAEkB;AACf,mBAAO,KAAK,aAAZ;AACH;;;4BAEiB;AACd,mBAAO,KAAK,YAAZ;AACH;;;4BAEmB;AAChB,mBAAO,KAAK,cAAZ;AACH;;;4BAEW;AACR,mBAAO,KAAK,MAAZ;AACH;;;mCAEiB;AACd,mBAAO,oBAAP;AACH;;;;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;kBAEe,kB","file":"PreconditionsError.js","sourcesContent":["import Utility from '../Utility';\nimport AbstractError from './AbstractError';\n\nclass PreconditionsError extends AbstractError {\n\n    /**\n     *\n     * @param {*} options.expectedValue\n     * @param {*} options.actualValue\n     * @param {String} [options.message]\n     * @param {Error} [options.cause]\n     * @param {Error} [options.optionalCause]\n     * @constructor\n     */\n    constructor(options) {\n        options = options || {};\n\n        let cause = options.optionalCause || options.cause;\n        let expectedValue = options.expectedValue;\n        let actualValue = options.actualValue;\n        let message = options.message;\n\n        super(`failure (expected: '${expectedValue}' [${Utility.typeOf(expectedValue)}]) (actual: '${actualValue}' [${Utility.typeOf(actualValue)}]) (message: ${message})`);\n\n        this._innerMessage = message;\n        this._cause = cause;\n        this._expectedValue = expectedValue;\n        this._actualValue = actualValue;\n    }\n\n    get innerMessage() {\n        return this._innerMessage;\n    }\n\n    get actualValue() {\n        return this._actualValue;\n    }\n\n    get expectedValue() {\n        return this._expectedValue;\n    }\n\n    get cause() {\n        return this._cause;\n    }\n\n    static toString() {\n        return 'PreconditionsError';\n    }\n}\n\n// /**\n//  *\n//\n//  */\n// function PreconditionsError(expectedValue, actualValue, message, optionalCause) {\n//\n// }\n//\n// PreconditionsError.prototype = Object.create(Error.prototype);\n// PreconditionsError.prototype.constructor = PreconditionsError;\n\nexport default PreconditionsError;\n\n"]}