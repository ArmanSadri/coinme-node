{"version":3,"sources":["../../../src/js/errors/PreconditionsError.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEM,kB;;;;;;;;;;;;;AAWF,gCAAY,OAAZ,EAAqB;AAAA;;AACjB,kBAAU,WAAW,EAArB;;AAEA,YAAI,QAAQ,QAAQ,aAAR,IAAyB,QAAQ,KAA7C;AACA,YAAI,gBAAgB,QAAQ,aAA5B;AACA,YAAI,cAAc,QAAQ,WAA1B;AACA,YAAI,UAAU,QAAQ,OAAtB;;AAEA,YAAI,0CAAuC,aAAvC,YAA0D,kBAAQ,MAAR,CAAe,aAAf,CAA1D,sBAAuG,WAAvG,YAAwH,kBAAQ,MAAR,CAAe,WAAf,CAAxH,qBAAmK,OAAnK,MAAJ;;AARiB,0GAUX,aAVW;;AAYjB,cAAK,MAAL,GAAc,KAAd;AACA,cAAK,cAAL,GAAsB,aAAtB;AACA,cAAK,YAAL,GAAoB,WAApB;AAdiB;AAepB;;;;4BAEiB;AACd,mBAAO,KAAK,YAAZ;AACH;;;4BAEmB;AAChB,mBAAO,KAAK,cAAZ;AACH;;;4BAEW;AACR,mBAAO,KAAK,MAAZ;AACH;;;mCAEiB;AACd,mBAAO,oBAAP;AACH;;;;;;;;;;;;;;;;;kBAcU,kB","file":"PreconditionsError.js","sourcesContent":["import Utility from '../Utility';\r\nimport AbstractError from './AbstractError';\r\n\r\nclass PreconditionsError extends AbstractError {\r\n\r\n    /**\r\n     *\r\n     * @param {*} options.expectedValue\r\n     * @param {*} options.actualValue\r\n     * @param {String} [options.message]\r\n     * @param {Error} [options.cause]\r\n     * @param {Error} [options.optionalCause]\r\n     * @constructor\r\n     */\r\n    constructor(options) {\r\n        options = options || {};\r\n\r\n        let cause = options.optionalCause || options.cause;\r\n        let expectedValue = options.expectedValue;\r\n        let actualValue = options.actualValue;\r\n        let message = options.message;\r\n\r\n        let inner_message = `failure (expected: '${expectedValue}' [${Utility.typeOf(expectedValue)}]) (actual: '${actualValue}' [${Utility.typeOf(actualValue)}]) (message: ${message})`;\r\n\r\n        super(inner_message);\r\n\r\n        this._cause = cause;\r\n        this._expectedValue = expectedValue;\r\n        this._actualValue = actualValue;\r\n    }\r\n\r\n    get actualValue() {\r\n        return this._actualValue;\r\n    }\r\n\r\n    get expectedValue() {\r\n        return this._expectedValue;\r\n    }\r\n\r\n    get cause() {\r\n        return this._cause;\r\n    }\r\n\r\n    static toString() {\r\n        return 'PreconditionsError';\r\n    }\r\n}\r\n\r\n// /**\r\n//  *\r\n//\r\n//  */\r\n// function PreconditionsError(expectedValue, actualValue, message, optionalCause) {\r\n//\r\n// }\r\n//\r\n// PreconditionsError.prototype = Object.create(Error.prototype);\r\n// PreconditionsError.prototype.constructor = PreconditionsError;\r\n\r\nexport default PreconditionsError;\r\n\r\n"]}