{"version":3,"sources":["../../../src/js/money/Ethereum.js"],"names":["Ethereum","valueInEthereum","value","toValueOrFail","currency","optCurrency","shouldBeEthereum","moneyOrCurrency","isClass","isInstance","isEthereum","fail"],"mappings":"AAAA;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA;;;;;;;;IAQMA,Q;;;;;;;;;;;;;AAEF;;;;;qCAKoBC,e,EAAiB;AACjC;;;AAGA,gBAAIC,QAAQ,mBAASC,aAAT,CAAuBF,eAAvB,CAAZ;AACA;;;AAGA,gBAAIG,WAAW,mBAASC,WAAT,CAAqBJ,eAArB,CAAf;;AAEA,gBAAIG,QAAJ,EAAc;AACVJ,yBAASM,gBAAT,CAA0BF,QAA1B;AACH;;AAED,mBAAO,oBAAU;AACbF,uBAAOA,KADM;AAEbE,0BAAUJ;AAFG,aAAV,CAAP;AAIH;;AAED;AACA;;;;;;;;;;;;mCASkBO,e,EAAiB;AAC/B,gBAAI,CAACA,eAAL,EAAsB;AAClB,uBAAO,KAAP;AACH;;AAED,gBAAIH,WAAW,mBAASC,WAAT,CAAqBE,eAArB,CAAf;;AAEA,mBAAOP,SAASQ,OAAT,CAAiBJ,QAAjB,KAA8BJ,SAASS,UAAT,CAAoBL,QAApB,CAArC;AACH;;AAED;;;;;;;;;;yCAOwBG,e,EAAiB;AACrC,gBAAI,CAACP,SAASU,UAAT,CAAoBH,eAApB,CAAL,EAA2C;AACvC,wCAAcI,IAAd,CAAmBX,QAAnB,EAA6B,mBAASK,WAAT,CAAqBE,eAArB,KAAyCA,eAAtE;AACH;;AAED,mBAAOA,eAAP;AACH;;AAED;;;;mCAEkB;AACd,mBAAO,UAAP;AACH;;;;;;AAIL;AACA;;kBAEeP,Q","file":"Ethereum.js","sourcesContent":["'use strict';\n\nimport Preconditions from \"../Preconditions\";\nimport Currency from \"./Currency\";\nimport Money from \"./Money\";\n\n/**\n * Represents the Ethereum currency in memory.\n *\n * This class cannot be instantiated. Everything is static and the constructor throws, so treat it like a singleton.\n *\n * @beta\n * @class Ethereum\n */\nclass Ethereum extends Currency {\n\n    /**\n     *\n     * @param {Money|String|Number|null|undefined} valueInEthereum\n     * @returns {Money}\n     */\n    static fromEthereum(valueInEthereum) {\n        /**\n         * @type {Number}\n         */\n        let value = Currency.toValueOrFail(valueInEthereum);\n        /**\n         * @type {Class.<Currency>|undefined}\n         */\n        let currency = Currency.optCurrency(valueInEthereum);\n\n        if (currency) {\n            Ethereum.shouldBeEthereum(currency);\n        }\n\n        return new Money({\n            value: value,\n            currency: Ethereum\n        });\n    }\n\n    //region Detection\n    /**\n     * Detects if you pass in either Money or Currency of type Ethereum <br>\n     * <br>\n     * Ethereum -> true <br>\n     * money<Ethereum> -> true <br>\n     *\n     * @param {Money|Currency|Class<Currency>} moneyOrCurrency\n     * @return {Boolean}\n     */\n    static isEthereum(moneyOrCurrency) {\n        if (!moneyOrCurrency) {\n            return false;\n        }\n\n        let currency = Currency.optCurrency(moneyOrCurrency);\n\n        return Ethereum.isClass(currency) || Ethereum.isInstance(currency);\n    }\n\n    /**\n     * If {@link Ethereum#isEthereum} returns false, will throw.\n     *\n     * @param {Money|Currency|Class<Currency>} moneyOrCurrency\n     * @return {Class<Currency>}\n     * @throws {PreconditionsError} if not an instance of Money (for Ethereum) or the Ethereum class itself.\n     */\n    static shouldBeEthereum(moneyOrCurrency) {\n        if (!Ethereum.isEthereum(moneyOrCurrency)) {\n            Preconditions.fail(Ethereum, Currency.optCurrency(moneyOrCurrency) || moneyOrCurrency);\n        }\n\n        return moneyOrCurrency;\n    }\n\n    //endregion\n\n    static toString() {\n        return 'Ethereum';\n    }\n\n}\n\n// Currency.types.register('Ethereum', Ethereum);\n// Currency.types.register('ETH', Ethereum);\n\nexport default Ethereum;"]}