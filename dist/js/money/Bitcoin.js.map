{"version":3,"sources":["../../../src/js/money/Bitcoin.es6"],"names":[],"mappings":"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","file":"Bitcoin.js","sourcesContent":["'use strict';\r\n\r\nimport {Utility, Preconditions} from \"~/\";\r\nimport Currency from \"./Currency\";\r\nimport Satoshi from \"./Satoshi\";\r\nimport Money from \"./Money\";\r\n\r\n/**\r\n * @private\r\n * @type {Converter}\r\n */\r\nlet conversions = {\r\n    /**\r\n     *\r\n     * @param {Number} valueInBitcoin\r\n     * @returns {Number}\r\n     */\r\n    'Bitcoin->Satoshi': function (valueInBitcoin) {\r\n        Preconditions.shouldBeNumber(valueInBitcoin);\r\n\r\n        return valueInBitcoin * Bitcoin.SATOSHIS_PER_BITCOIN\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param {Number} valueInSatoshi\r\n     * @returns {Number}\r\n     */\r\n    'Satoshi->Bitcoin': function (valueInSatoshi) {\r\n        Preconditions.shouldBeNumber(valueInSatoshi);\r\n\r\n        return valueInSatoshi * Bitcoin.BITCOIN_PER_SATOSHI;\r\n    }\r\n};\r\n\r\n// Register our known conversions.\r\nCurrency.converter.register(conversions);\r\n\r\n/**\r\n * @class Bitcoin\r\n */\r\nexport default class Bitcoin extends Currency {\r\n\r\n    static toString() {\r\n        return 'Bitcoin';\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Money} money\r\n     * @param {Number} [places]\r\n     * @returns {String}\r\n     */\r\n    static serialize(money, places) {\r\n        let value = this.toBitcoin();\r\n\r\n        if (isNaN(value)) {\r\n            return 'NaN';\r\n        }\r\n\r\n        if (!places) {\r\n            places = 8;\r\n        }\r\n\r\n        let parts = String(value).split('.');\r\n\r\n        if (parts.length === 1) {\r\n            parts.push('0');\r\n        }\r\n\r\n        let needed = places - parts[1].length;\r\n\r\n        for (let i = 0; i < needed; i++) {\r\n            parts[1] += '0';\r\n        }\r\n\r\n        return parts[0] + '.' + parts[1];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Money|String|Number|null|undefined} valueInBitcoin\r\n     * @returns {Money}\r\n     */\r\n    static fromBitcoin(valueInBitcoin) {\r\n        /**\r\n         * @type {Number}\r\n         */\r\n        let value = Currency.toValueOrFail(valueInBitcoin);\r\n        /**\r\n         * @type {Class.<Currency>|undefined}\r\n         */\r\n        let currency = Currency.optCurrency(valueInBitcoin);\r\n\r\n        if (currency) {\r\n            Bitcoin.shouldBeBitcoin(currency);\r\n        }\r\n\r\n        return new Money({\r\n            value: value,\r\n            currency: Bitcoin\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Money|String|Number|null|undefined} valueInSatoshis\r\n     * @returns {Money}\r\n     */\r\n    static fromSatoshi(valueInSatoshis) {\r\n        return Satoshi.fromSatoshis(valueInSatoshis);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param valueInBitcoin\r\n     */\r\n    static toSatoshis(valueInBitcoin) {\r\n        return Satoshi.fromBitcoin(valueInBitcoin);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param number\r\n     * @returns {Number}\r\n     */\r\n    static calculateSatoshisFromBitcoin(number) {\r\n        Preconditions.shouldBeDefined(Currency);\r\n        number = Currency.toValueOrFail(number);\r\n\r\n        if (isNaN(number)) {\r\n            return NaN;\r\n        }\r\n\r\n        if (number === 0) {\r\n            return 0;\r\n        }\r\n\r\n        let str = String(number);\r\n        let sign = (str.indexOf('-') === 0) ? '-' : '';\r\n\r\n        str = str.replace(/^-/, '');\r\n\r\n        if (str.indexOf('e') >= 0) {\r\n            return parseInt(sign + str.replace('.', '').replace(/e-8/, '').replace(/e-7/, '0'), 10);\r\n        } else {\r\n            if (!(/\\./).test(str)) {\r\n                str += '.0';\r\n            }\r\n\r\n            let parts = str.split('.');\r\n\r\n            str = parts[0] + '.' + parts[1].slice(0, 8);\r\n\r\n            while (!(/\\.[0-9]{8}/).test(str)) {\r\n                str += '0';\r\n            }\r\n\r\n            return parseInt(sign + str.replace('.', '').replace(/^0+/, ''), 10);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return {Number}\r\n     */\r\n    static get SATOSHIS_PER_BITCOIN() {\r\n        return 100000000;\r\n    }\r\n\r\n    /**\r\n     * @return {number}\r\n     */\r\n    static get BITCOIN_PER_SATOSHI() {\r\n        return 1 / 100000000;\r\n    }\r\n\r\n    static toClass() {\r\n        return Bitcoin;\r\n    }\r\n\r\n    //region Detection\r\n    /**\r\n     *\r\n     * @param {Money|Currency|Class<Currency>} moneyOrCurrency\r\n     */\r\n    static isBitcoin(moneyOrCurrency) {\r\n        return Bitcoin.isClass(Currency.getCurrency(moneyOrCurrency));\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Money|Currency|Class<Currency>} moneyOrCurrency\r\n     */\r\n    static shouldBeBitcoin(moneyOrCurrency) {\r\n        let currency = Currency.getCurrency(moneyOrCurrency);\r\n\r\n        if (!Bitcoin.isClass(currency)) {\r\n            console.log('currency=>', currency);\r\n            Preconditions.fail(Bitcoin, currency);\r\n        }\r\n\r\n        return moneyOrCurrency;\r\n    }\r\n\r\n    //endregion\r\n\r\n}"]}