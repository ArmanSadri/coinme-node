{"version":3,"sources":["../../../src/js/money/Exchange.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Exchange.js","sourcesContent":["// \"use strict\";\n//\n// import CoreObject from \"../CoreObject\";\n// import Converter from \"./Converter\";\n// import Money from \"./Money\";\n// import Currency from \"./Currency\";\n// import Lodash from \"lodash\";\n// import Promise from \"bluebird\";\n// import Logger from \"winston\";\n// import Stopwatch from \"../Stopwatch\"\n//\n// class Exchange extends CoreObject {\n//\n//     constructor(options) {\n//         super(...arguments);\n//\n//         this._converters = [];\n//     }\n//\n//     /**\n//      * @returns {Array}\n//      */\n//     get converters() {\n//         return this._converters;\n//     }\n//\n//     /**\n//      *\n//      * @param {Converter} converter\n//      * @returns {Exchange}\n//      */\n//     register(converter) {\n//         this.converters.push(converter);\n//\n//         return this;\n//     }\n//\n//     /**\n//      *\n//      * @param {Money} money\n//      * @param {Class<Currency>} currency\n//      * @return {Promise<Conversion<Money>>}\n//      */\n//     convert(money, currency) {\n//         let converters = this.convertersFor(money.currency, currency);\n//\n//         let answers = Lodash.map(converters, function (/**@type {Converter} */ converter) {\n//             return Promise.resolve(converter.convert(money, currency));\n//         });\n//\n//         let stopwatch = new Stopwatch();\n//\n//         return Promise.any(answers)\n//             .then((/** @type {Money} */ answer) => {\n//                 Logger.debug(`Converter ${money} to ${answer}`);\n//\n//                 return answer;\n//             });\n//     }\n//\n//     /**\n//      * @param {Class<Currency>} sourceCurrency\n//      * @param {Class<Currency>} destinationCurrency\n//      * @returns {Array}\n//      */\n//     convertersFor(sourceCurrency, destinationCurrency) {\n//         Currency.shouldBeCurrency(sourceCurrency, 'sourceCurrency must be a currency');\n//         Currency.shouldBeCurrency(destinationCurrency, 'destinationCurrency must be a currency');\n//\n//         return Lodash.filter(this.converters, function (/** @type {Converter} */converter) {\n//             return converter.canConvert(sourceCurrency, destinationCurrency);\n//         });\n//     }\n//\n// }\n//\n// export default Exchange;"]}