{"version":3,"sources":["../../../src/js/money/Converter.es6"],"names":[],"mappings":"AAAA;;;;;;;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;IAcqB,S;cAAA,S;;;;;;;AAMjB,aANiB,SAMjB,CAAY,OAAZ,EAAqB;AAAA,8BANJ,SAMI;;AACjB,YAAI,cAAc,WAAQ,IAAR,CAAa,OAAb,EAAsB,aAAtB,CAAlB;;;;;;AADiB,2EANJ,SAMI,cAGR,SAHQ;;AAQjB,cAAK,YAAL,GAAoB,eAAe,EAAnC;AARiB;AASpB;;iBAfgB,S;;mCAqBN,S,EAAW,S,EAAW,kB,EAAoB;AACjD,wBAAY,WAAS,WAAT,CAAqB,SAArB,CAAZ;AACA,wBAAY,WAAS,WAAT,CAAqB,SAArB,CAAZ;;AAEA,gBAAI,aAAa,KAAK,aAAL,CAAmB,SAAnB,EAA8B,SAA9B,EAAyC,kBAAzC,CAAjB;;AAEA,mBAAO,WAAQ,UAAR,CAAmB,UAAnB,CAAP;AACH;;;;;;;;;;;;gCASO,K,EAAO,Q,EAAU,kB,EAAoB;AACzC,uBAAW,WAAS,WAAT,CAAqB,QAArB,CAAX;;AAEA,gBAAI,KAAK,KAAK,aAAL,CAAmB,MAAM,QAAzB,EAAmC,QAAnC,EAA6C,kBAA7C,CAAT;AACA,gBAAI,QAAQ,GAAG,IAAH,CAAQ,IAAR,EAAc,MAAM,KAApB,CAAZ;;AAEA,6BAAc,cAAd,CAA6B,KAA7B,EAAoC,yDAAyD,KAA7F;;AAEA,mBAAO,YAAU;AACb,uBAAO,KADM;AAEb,0BAAU;AAFG,aAAV,CAAP;AAIH;;;;;;;;;;;;sCASa,c,EAAgB,mB,EAAqB,kB,EAAoB;AACnE,6BAAiB,WAAS,WAAT,CAAqB,cAArB,CAAjB;AACA,kCAAsB,WAAS,WAAT,CAAqB,mBAArB,CAAtB;;AAEA,gBAAI,CAAC,cAAD,IAAmB,CAAC,mBAAxB,EAA6C;AACzC,uBAAO,IAAP;AACH,aAFD,MAEO,IAAI,eAAe,MAAf,CAAsB,mBAAtB,CAAJ,EAAgD;AACnD,uBAAO,UAAS,KAAT,EAAgB;AAAE,2BAAO,KAAP;AAAe,iBAAxC;AACH,aAFM,MAEA,IAAI,WAAQ,UAAR,CAAmB,kBAAnB,CAAJ,EAA4C;AAC/C,uBAAO,kBAAP;AACH,aAFM,MAEA,IAAI,WAAQ,QAAR,CAAiB,kBAAjB,CAAJ,EAA0C;AAC7C,uBAAO,UAAS,KAAT,EAAgB;AAAE,2BAAO,QAAQ,kBAAf;AAAoC,iBAA7D;AACH,aAFM,MAEA;AACH,uBAAO,KAAK,cAAL,CAAoB,cAApB,EAAoC,mBAApC,CAAP;AACH;AACJ;;;;;;;;;;;iCAQQ,W,EAAa;AAClB,6BAAc,cAAd,CAA6B,WAA7B;;AAEA,6BAAO,MAAP,CAAc,KAAK,WAAnB,EAAgC,WAAhC;;AAEA,mBAAO,IAAP;AACH;;;;;;;;;;;uCAQc,c,EAAgB,mB,EAAqB;AAChD,6BAAiB,WAAS,WAAT,CAAqB,cAArB,CAAjB;AACA,kCAAsB,WAAS,WAAT,CAAqB,mBAArB,CAAtB;;AAEA,gBAAI,gBAAgB,eAAe,QAAf,KAA4B,IAA5B,GAAmC,oBAAoB,QAApB,EAAvD;AACA,gBAAI,KAAK,KAAK,WAAL,CAAiB,aAAjB,CAAT;;AAEA,6BAAc,gBAAd,CAA+B,EAA/B,EAAmC,0BAA0B,aAA7D;;AAEA,mBAAO,EAAP;AACH;;;4BAxFiB;AACd,mBAAO,KAAK,YAAZ;AACH;;;WAnBgB,S;;;kBAAA,S","file":"Converter.js","sourcesContent":["'use strict';\r\n\r\nimport {Money, Currency, Bitcoin, Satoshi} from \"~/money\";\r\nimport {CoreObject, Preconditions, Utility} from \"~/\";\r\nimport Lodash from 'lodash';\r\n\r\n/**\r\n * Supports different conversion directions.\r\n *\r\n * The conversion map uses the Currency name for directionality. The internal conversion map is stored like:\r\n *\r\n * {\r\n *   'Bitcoin->Satoshi' : function(value) { return value * satoshi_factor; },\r\n *   'Satoshi->Bitcoin': function(value) { return value / satoshi_factor; }\r\n * }\r\n *\r\n * @class\r\n */\r\nexport default class Converter extends CoreObject {\r\n\r\n    /**\r\n     * @param {Object} options\r\n     * @param {Object} options.conversions\r\n     */\r\n    constructor(options) {\r\n        let conversions = Utility.take(options, 'conversions');\r\n\r\n        super(...arguments);\r\n\r\n        /**\r\n         * @type {Object}\r\n         */\r\n        this._conversions = conversions || {};\r\n    }\r\n\r\n    get conversions() {\r\n        return this._conversions;\r\n    }\r\n\r\n    canConvert(currency1, currency2, optionalConversion) {\r\n        currency1 = Currency.optCurrency(currency1);\r\n        currency2 = Currency.optCurrency(currency2);\r\n\r\n        let conversion = this.optConversion(currency1, currency2, optionalConversion);\r\n\r\n        return Utility.isFunction(conversion);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Money} money\r\n     * @param {Class<Currency>|Currency} currency\r\n     * @param {Function} [optionalConversion]\r\n     * @returns {Money}\r\n     */\r\n    convert(money, currency, optionalConversion) {\r\n        currency = Currency.getCurrency(currency);\r\n\r\n        let fn = this.optConversion(money.currency, currency, optionalConversion);\r\n        let value = fn.call(this, money.value);\r\n\r\n        Preconditions.shouldBeNumber(value, 'Sanity check failure, the value should be a number: ' + value);\r\n\r\n        return new Money({\r\n            value: value,\r\n            currency: currency\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Class<Currency>|Currency|String} sourceCurrency\r\n     * @param {Class<Currency>|Currency|String} destinationCurrency\r\n     * @param {Function|Number|String} [optionalConversion]\r\n     * @returns {*}\r\n     */\r\n    optConversion(sourceCurrency, destinationCurrency, optionalConversion) {\r\n        sourceCurrency = Currency.optCurrency(sourceCurrency);\r\n        destinationCurrency = Currency.optCurrency(destinationCurrency);\r\n\r\n        if (!sourceCurrency || !destinationCurrency) {\r\n            return null;\r\n        } else if (sourceCurrency.equals(destinationCurrency)) {\r\n            return function(value) { return value; }\r\n        } else if (Utility.isFunction(optionalConversion)) {\r\n            return optionalConversion;\r\n        } else if (Utility.isNumber(optionalConversion)) {\r\n            return function(value) { return value * optionalConversion; }\r\n        } else {\r\n            return this._getConversion(sourceCurrency, destinationCurrency);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @param {Object} conversions\r\n     * @returns {Converter}\r\n     */\r\n    register(conversions) {\r\n        Preconditions.shouldBeObject(conversions);\r\n\r\n        Lodash.assign(this.conversions, conversions);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {Money|Currency|Class<Currency>|String} sourceCurrency\r\n     * @param {Money|Currency|Class<Currency>|String} destinationCurrency\r\n     * @private\r\n     * @return {Function}\r\n     */\r\n    _getConversion(sourceCurrency, destinationCurrency) {\r\n        sourceCurrency = Currency.getCurrency(sourceCurrency);\r\n        destinationCurrency = Currency.getCurrency(destinationCurrency);\r\n\r\n        let converterName = sourceCurrency.toString() + '->' + destinationCurrency.toString();\r\n        let fn = this.conversions[converterName];\r\n\r\n        Preconditions.shouldBeFunction(fn, 'Converter not found: ' + converterName);\r\n\r\n        return fn;\r\n    }\r\n}"]}