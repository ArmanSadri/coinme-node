{"version":3,"sources":["../../../src/js/money/Money.js"],"names":[],"mappings":"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","file":"Money.js","sourcesContent":["import CoreObject from \"../CoreObject\";\nimport Utility from \"../Utility\";\nimport Preconditions from \"../Preconditions\";\nimport Currency from \"./Currency\";\n\nexport default class Money extends CoreObject {\n\n    /**\n     * @param {Object} options\n     * @param {Number} options.value\n     */\n    constructor(options) {\n        Preconditions.shouldBeDefined(Currency);\n\n        let value = Preconditions.shouldBeNumber(Currency.toValueOrFail(Utility.take(options, 'value')));\n        let currency = Preconditions.shouldBeDefined(Currency.getCurrency(Utility.take(options, 'currency')));\n\n        super(...arguments);\n\n        /**\n         * @type {Number}\n         * @private\n         */\n        this._value = Preconditions.shouldBeNumber(value);\n\n        /**\n         * @type {Class<Currency>}\n         * @private\n         */\n        this._currency = Currency.shouldBeCurrency(currency);\n    }\n\n    /**\n     *\n     * @returns {Class<Currency>}\n     */\n    get currency() {\n        return this._currency;\n    }\n\n    /**\n     * @returns {Number}\n     */\n    get value() {\n        return this._value;\n    }\n\n    toString() {\n        return this.currency.toString(this);\n    }\n\n    toJson() {\n        return this.currency.toJson(this);\n    }\n\n    /**\n     * Returns a new instance of money, since this is immutable.\n     *\n     * @param {String|Number|Money} money\n     * @return {Money}\n     */\n    plus(money) {\n        money = Money.optMoney(money, this.currency);\n        let convertedValue = this.currency.convertFrom(money);\n\n        return this.withValue(convertedValue + this);\n    }\n\n    /**\n     * Returns a new instance of money, since this is immutable.\n     *\n     * @param {String|Number|Money} money\n     * @return {Money}\n     */\n    minus(money) {\n        money = Money.optMoney(money, this.currency);\n        let convertedValue = this.currency.convertFrom(money).value;\n\n        return this.withValue(convertedValue - this.value);\n    }\n\n    /**\n     * @param {Money|String|Number} money\n     * @param {Number|Function} [optionalConversion]\n     * @returns {boolean}\n     */\n    equals(money, optionalConversion) {\n        money = Money.optMoney(money, this.currency);\n\n        if (!money) {\n            return false;\n        }\n\n        let convertedAlien = Preconditions.shouldBeNumber(Currency.toValueOrFail(this.currency.convertFrom(money, optionalConversion)), 'Converted value must be a number.');\n        let value = Preconditions.shouldBeNumber(Currency.toValueOrFail(this), 'Our value must be a number.');\n\n        return convertedAlien === value;\n    }\n\n    valueOf() {\n        return this.value;\n    }\n\n    /**\n     *\n     * @param {Number} value\n     * @returns {Money}\n     * @private\n     */\n    withValue(value) {\n        if (!value) {\n            value = 0;\n        }\n\n        return new Money({\n            currency: this.currency,\n            value: value\n        });\n    }\n\n    /**\n     *\n     * @param {Currency|Class<Currency>|String} currencyOrString\n     * @param {Number|Function|Converter} [optionalConversion]\n     * @returns {Money}\n     */\n    convertTo(currencyOrString, optionalConversion) {\n        let currency = Currency.getCurrency(currencyOrString);\n\n        return currency.convertFrom(this, optionalConversion);\n    }\n\n    /**\n     *\n     * @param {*} object\n     * @returns {Money}\n     */\n    static shouldBeMoney(object) {\n        if (CoreObject.isClass(object)) {\n            Preconditions.shouldBeClass(object, Money, 'object should be money');\n        } else {\n            Preconditions.shouldBeInstance(object, Money, 'object should be money');\n        }\n\n        return object;\n    }\n\n    /**\n     *\n     * @param {Number|String|Money} valueOrMoney\n     * @param {Class<Currency>} [defaultCurrency]\n     * @returns {Money|undefined}\n     */\n    static optMoney(valueOrMoney, defaultCurrency) {\n        if (Money.isInstance(valueOrMoney)) {\n            return valueOrMoney;\n        }\n\n        return new Money({\n            value: valueOrMoney,\n            currency: defaultCurrency\n        });\n    }\n}"]}