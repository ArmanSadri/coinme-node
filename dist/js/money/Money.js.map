{"version":3,"sources":["../../../src/js/money/Money.js"],"names":[],"mappings":"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","file":"Money.js","sourcesContent":["import CoreObject from \"../CoreObject\";\nimport Utility from \"../Utility\";\nimport Preconditions from \"../Preconditions\";\nimport Currency from \"./Currency\";\nimport Big from 'big.js/big';\n\nexport default class Money extends CoreObject {\n\n    /**\n     * @param {Object} options\n     * @param {BigJsLibrary.BigJS} options.value\n     */\n    constructor(options) {\n        Preconditions.shouldBeDefined(Currency);\n\n        let value = Currency.toValueOrFail(Utility.take(options, 'value'));\n        let currency = Preconditions.shouldBeDefined(Currency.getCurrency(Utility.take(options, 'currency')));\n\n        super(...arguments);\n\n        /**\n         * @type {BigJsLibrary.BigJS}\n         * @private\n         */\n        Preconditions.shouldBe(function() { return (value instanceof Big); }, Utility.typeOf(Big), Utility.typeOf(value), 'should be Big');\n        this._value = value;\n\n        /**\n         * @type {Class<Currency>}\n         * @private\n         */\n        this._currency = Currency.shouldBeCurrency(currency);\n    }\n\n    /**\n     *\n     * @returns {Class<Currency>}\n     */\n    get currency() {\n        return this._currency;\n    }\n\n    /**\n     * @returns {BigJsLibrary.BigJS}\n     */\n    get value() {\n        return this._value;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `${this.value} ${this.currency}`;\n    }\n\n    /**\n     *\n     * @returns {{value, currency}|{value: BigJsLibrary.BigJS, currency: Class.<Currency>}}\n     */\n    toJson() {\n        return super.toJson({\n            value: Utility.optString(this.value),\n            currency: this.currency.toString()\n        });\n    }\n\n    /**\n     * @returns {{value, currency}|{value: BigJsLibrary.BigJS, currency: Class.<Currency>}}\n     */\n    toJSON() {\n        return this.toJson();\n    }\n\n    /**\n     * Returns a new instance of money, since this is immutable.\n     *\n     * @param {String|Number|Money} money\n     * @return {Money}\n     */\n    plus(money) {\n        let big1 = this._toValue(money);\n        let big2 = this._toValue(this);\n\n        let big3 = big1.plus(big2);\n\n        return this.withValue(big3);\n    }\n\n    /**\n     * Returns a new instance of money, since this is immutable.\n     *\n     * @param {String|Number|Money} money\n     * @return {Money}\n     */\n    minus(money) {\n        return this.withValue(this._toValue(money) - this.value);\n    }\n\n    /**\n     * @param {Money|String|Number} money\n     * @returns {boolean}\n     */\n    equals(money) {\n        if (!money) {\n            return false;\n        }\n\n        /**\n         * @type {BigJsLibrary.BigJS}\n         */\n        let value1 = this._toValue(money);\n\n        /**\n         * @type {BigJsLibrary.BigJS}\n         */\n        let value2 = this._toValue(this);\n\n        return value1.eq(value2);\n    }\n\n    /**\n     *\n     * @param {Money|Currency} currencyOrMoney\n     * @returns {boolean}\n     */\n    isSameCurrency(currencyOrMoney) {\n        let c1 = Preconditions.shouldBeExisting(Currency.getCurrency(currencyOrMoney));\n        let c2 = Preconditions.shouldBeExisting(Currency.getCurrency(this));\n\n        return c1.equals(c2) && c2.equals(c1);\n    }\n\n    valueOf() {\n        return this.value;\n    }\n\n    /**\n     *\n     * @param {Number} value\n     * @returns {Money}\n     * @private\n     */\n    withValue(value) {\n        if (!value) {\n            value = 0;\n        }\n\n        return new Money({\n            currency: this.currency,\n            value: value\n        });\n    }\n\n    /**\n     *\n     * @param {Money} money\n     * @return {BigJsLibrary.BigJS}\n     * @private\n     */\n    _toValue(money) {\n        money = Money.shouldBeMoney(Money.optMoney(money, this.currency));\n\n        let that = this;\n        Preconditions.shouldBe(function() { return that.isSameCurrency(money); }, this.currency, Currency.optCurrency(money), 'Must be the same currency.');\n\n        return Currency.toValueOrFail(money);\n    }\n\n    /**\n     * @returns {string}\n     */\n    static toString() {\n        return 'Money';\n    }\n\n    /**\n     *\n     * @param {Money} money\n     * @return {Class<Currency>}\n     */\n    static toCurrency(money) {\n        Money.shouldBeInstance(money);\n\n        return money.currency;\n    }\n\n    /**\n     *\n     * @param {Class<Money>|Money|Class<Currency>|Currency} object\n     * @param {Class<Currency>|Currency} [currency] Optional. If provided, required.\n     * @returns {Money}\n     */\n    static shouldBeMoney(object, currency) {\n        Preconditions.shouldBeDefined(object);\n\n        if (CoreObject.isClass(object)) {\n            Preconditions.shouldBeClass(object, Money, 'object should be money: ' + object);\n\n            if (Utility.isDefined(currency)) {\n                throw new Error(`Money cannot convert to Currency`);\n            }\n        } else {\n            Preconditions.shouldBeInstance(object, Money, 'object should be money: ' + object);\n\n            if (currency) {\n                Money.getCurrency(object);\n\n                Currency.shouldBeClass(currency);\n                Preconditions.shouldBeClass(object.currency, currency);\n            }\n        }\n\n        return object;\n    }\n\n    /**\n     *\n     * @param {Big|Number|String|Money} valueOrMoney\n     * @param {Class<Currency>} [defaultCurrency]\n     * @returns {Money|undefined}\n     */\n    static optMoney(valueOrMoney, defaultCurrency) {\n        if (Money.isInstance(valueOrMoney)) {\n            return valueOrMoney;\n        }\n\n        return new Money({\n            value: Currency.toValueOrFail(valueOrMoney),\n            currency: defaultCurrency\n        });\n    }\n\n    static optValue(money) {\n        return Currency.optValue(money);\n    }\n\n    /**\n     *\n     * @param {Money} money\n     * @param {Class<Currency>|Currency|Money|String} [destinationCurrency]\n     * @return {Boolean}\n     */\n    static isInstance(money, destinationCurrency) {\n        if (!super.isInstance(money)) {\n            return false;\n        }\n\n        if (destinationCurrency) {\n            /**\n             * @type {Class.<Currency>}\n             */\n            let currency = Currency.getCurrency(destinationCurrency);\n\n            /**\n             * @type {Currency}\n             */\n            return currency.equals(money.currency);\n        } else {\n            return true;\n        }\n    }\n}"]}