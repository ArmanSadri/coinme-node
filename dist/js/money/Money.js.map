{"version":3,"sources":["../../../src/js/money/Money.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqB;;;;;;;;AAMjB,aANiB,KAMjB,CAAY,OAAZ,EAAqB;8BANJ,OAMI;;AACjB,gCAAc,eAAd,qBADiB;;AAGjB,YAAI,QAAQ,wBAAc,cAAd,CAA6B,mBAAS,aAAT,CAAuB,kBAAQ,IAAR,CAAa,OAAb,EAAsB,OAAtB,CAAvB,CAA7B,CAAR,CAHa;AAIjB,YAAI,WAAW,wBAAc,eAAd,CAA8B,mBAAS,WAAT,CAAqB,kBAAQ,IAAR,CAAa,OAAb,EAAsB,UAAtB,CAArB,CAA9B,CAAX,CAJa;;;;;;;2EANJ,mBAYJ,YANQ;;AAYjB,cAAK,MAAL,GAAc,wBAAc,cAAd,CAA6B,KAA7B,CAAd;;;;;;AAZiB,aAkBjB,CAAK,SAAL,GAAiB,mBAAS,gBAAT,CAA0B,QAA1B,CAAjB,CAlBiB;;KAArB;;;;;;;;iBANiB;;mCA0CN;AACP,mBAAO,KAAK,QAAL,CAAc,QAAd,CAAuB,IAAvB,CAAP,CADO;;;;iCAIF;AACL,mBAAO,KAAK,QAAL,CAAc,MAAd,CAAqB,IAArB,CAAP,CADK;;;;;;;;;;;;6BAUJ,OAAO;AACR,oBAAQ,MAAM,QAAN,CAAe,KAAf,EAAsB,KAAK,QAAL,CAA9B,CADQ;AAER,gBAAI,iBAAiB,KAAK,QAAL,CAAc,WAAd,CAA0B,KAA1B,CAAjB,CAFI;;AAIR,mBAAO,KAAK,SAAL,CAAe,iBAAiB,IAAjB,CAAtB,CAJQ;;;;;;;;;;;;8BAaN,OAAO;AACT,oBAAQ,MAAM,QAAN,CAAe,KAAf,EAAsB,KAAK,QAAL,CAA9B,CADS;AAET,gBAAI,iBAAiB,KAAK,QAAL,CAAc,WAAd,CAA0B,KAA1B,EAAiC,KAAjC,CAFZ;;AAIT,mBAAO,KAAK,SAAL,CAAe,iBAAiB,KAAK,KAAL,CAAvC,CAJS;;;;;;;;;;;+BAYN,OAAO,oBAAoB;AAC9B,oBAAQ,MAAM,QAAN,CAAe,KAAf,EAAsB,KAAK,QAAL,CAA9B,CAD8B;;AAG9B,gBAAI,CAAC,KAAD,EAAQ;AACR,uBAAO,KAAP,CADQ;aAAZ;;AAIA,gBAAI,iBAAiB,wBAAc,cAAd,CAA6B,mBAAS,aAAT,CAAuB,KAAK,QAAL,CAAc,WAAd,CAA0B,KAA1B,EAAiC,kBAAjC,CAAvB,CAA7B,EAA2G,mCAA3G,CAAjB,CAP0B;AAQ9B,gBAAI,QAAQ,wBAAc,cAAd,CAA6B,mBAAS,aAAT,CAAuB,IAAvB,CAA7B,EAA2D,6BAA3D,CAAR,CAR0B;;AAU9B,mBAAO,mBAAmB,KAAnB,CAVuB;;;;kCAaxB;AACN,mBAAO,KAAK,KAAL,CADD;;;;;;;;;;;;kCAUA,OAAO;AACb,gBAAI,CAAC,KAAD,EAAQ;AACR,wBAAQ,CAAR,CADQ;aAAZ;;AAIA,mBAAO,IAAI,KAAJ,CAAU;AACb,0BAAU,KAAK,QAAL;AACV,uBAAO,KAAP;aAFG,CAAP,CALa;;;;;;;;;;;;kCAiBP,kBAAkB,oBAAoB;AAC5C,gBAAI,WAAW,mBAAS,WAAT,CAAqB,gBAArB,CAAX,CADwC;;AAG5C,mBAAO,SAAS,WAAT,CAAqB,IAArB,EAA2B,kBAA3B,CAAP,CAH4C;;;;;;;;;;;4BA1FjC;AACX,mBAAO,KAAK,SAAL,CADI;;;;;;;;;4BAOH;AACR,mBAAO,KAAK,MAAL,CADC;;;;sCA8FS,QAAQ;AACzB,gBAAI,qBAAW,OAAX,CAAmB,MAAnB,CAAJ,EAAgC;AAC5B,wCAAc,aAAd,CAA4B,MAA5B,EAAoC,KAApC,EAA2C,wBAA3C,EAD4B;aAAhC,MAEO;AACH,wCAAc,gBAAd,CAA+B,MAA/B,EAAuC,KAAvC,EAA8C,wBAA9C,EADG;aAFP;;AAMA,mBAAO,MAAP,CAPyB;;;;;;;;;;;;iCAgBb,cAAc,iBAAiB;AAC3C,gBAAI,MAAM,UAAN,CAAiB,YAAjB,CAAJ,EAAoC;AAChC,uBAAO,YAAP,CADgC;aAApC;;AAIA,mBAAO,IAAI,KAAJ,CAAU;AACb,uBAAO,YAAP;AACA,0BAAU,eAAV;aAFG,CAAP,CAL2C;;;;WApJ9B","file":"Money.js","sourcesContent":["import CoreObject from \"../CoreObject\";\r\nimport Utility from \"../Utility\";\r\nimport Preconditions from \"../Preconditions\";\r\nimport Currency from \"./Currency\";\r\n\r\nexport default class Money extends CoreObject {\r\n\r\n    /**\r\n     * @param {Object} options\r\n     * @param {Number} options.value\r\n     */\r\n    constructor(options) {\r\n        Preconditions.shouldBeDefined(Currency);\r\n\r\n        let value = Preconditions.shouldBeNumber(Currency.toValueOrFail(Utility.take(options, 'value')));\r\n        let currency = Preconditions.shouldBeDefined(Currency.getCurrency(Utility.take(options, 'currency')));\r\n\r\n        super(...arguments);\r\n\r\n        /**\r\n         * @type {Number}\r\n         * @private\r\n         */\r\n        this._value = Preconditions.shouldBeNumber(value);\r\n\r\n        /**\r\n         * @type {Class<Currency>}\r\n         * @private\r\n         */\r\n        this._currency = Currency.shouldBeCurrency(currency);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {Class<Currency>}\r\n     */\r\n    get currency() {\r\n        return this._currency;\r\n    }\r\n\r\n    /**\r\n     * @returns {Number}\r\n     */\r\n    get value() {\r\n        return this._value;\r\n    }\r\n\r\n    toString() {\r\n        return this.currency.toString(this);\r\n    }\r\n\r\n    toJson() {\r\n        return this.currency.toJson(this);\r\n    }\r\n\r\n    /**\r\n     * Returns a new instance of money, since this is immutable.\r\n     *\r\n     * @param {String|Number|Money} money\r\n     * @return {Money}\r\n     */\r\n    plus(money) {\r\n        money = Money.optMoney(money, this.currency);\r\n        let convertedValue = this.currency.convertFrom(money);\r\n\r\n        return this.withValue(convertedValue + this);\r\n    }\r\n\r\n    /**\r\n     * Returns a new instance of money, since this is immutable.\r\n     *\r\n     * @param {String|Number|Money} money\r\n     * @return {Money}\r\n     */\r\n    minus(money) {\r\n        money = Money.optMoney(money, this.currency);\r\n        let convertedValue = this.currency.convertFrom(money).value;\r\n\r\n        return this.withValue(convertedValue - this.value);\r\n    }\r\n\r\n    /**\r\n     * @param {Money|String|Number} money\r\n     * @param {Number|Function} [optionalConversion]\r\n     * @returns {boolean}\r\n     */\r\n    equals(money, optionalConversion) {\r\n        money = Money.optMoney(money, this.currency);\r\n\r\n        if (!money) {\r\n            return false;\r\n        }\r\n\r\n        let convertedAlien = Preconditions.shouldBeNumber(Currency.toValueOrFail(this.currency.convertFrom(money, optionalConversion)), 'Converted value must be a number.');\r\n        let value = Preconditions.shouldBeNumber(Currency.toValueOrFail(this), 'Our value must be a number.');\r\n\r\n        return convertedAlien === value;\r\n    }\r\n\r\n    valueOf() {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Number} value\r\n     * @returns {Money}\r\n     * @private\r\n     */\r\n    withValue(value) {\r\n        if (!value) {\r\n            value = 0;\r\n        }\r\n\r\n        return new Money({\r\n            currency: this.currency,\r\n            value: value\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Currency|Class<Currency>|String} currencyOrString\r\n     * @param {Number|Function|Converter} [optionalConversion]\r\n     * @returns {Money}\r\n     */\r\n    convertTo(currencyOrString, optionalConversion) {\r\n        let currency = Currency.getCurrency(currencyOrString);\r\n\r\n        return currency.convertFrom(this, optionalConversion);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} object\r\n     * @returns {Money}\r\n     */\r\n    static shouldBeMoney(object) {\r\n        if (CoreObject.isClass(object)) {\r\n            Preconditions.shouldBeClass(object, Money, 'object should be money');\r\n        } else {\r\n            Preconditions.shouldBeInstance(object, Money, 'object should be money');\r\n        }\r\n\r\n        return object;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Number|String|Money} valueOrMoney\r\n     * @param {Class<Currency>} [defaultCurrency]\r\n     * @returns {Money|undefined}\r\n     */\r\n    static optMoney(valueOrMoney, defaultCurrency) {\r\n        if (Money.isInstance(valueOrMoney)) {\r\n            return valueOrMoney;\r\n        }\r\n\r\n        return new Money({\r\n            value: valueOrMoney,\r\n            currency: defaultCurrency\r\n        });\r\n    }\r\n}"]}