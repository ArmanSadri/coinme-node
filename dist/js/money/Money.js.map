{"version":3,"sources":["../../../src/js/money/Money.js"],"names":["Money","options","shouldBeDefined","value","toValueOrFail","take","currency","getCurrency","arguments","shouldBe","typeOf","_value","_currency","shouldBeCurrency","optString","toString","toJson","money","big1","_toValue","big2","big3","plus","withValue","value1","value2","eq","currencyOrMoney","c1","shouldBeExisting","c2","equals","shouldBeMoney","optMoney","that","isSameCurrency","optCurrency","shouldBeInstance","object","isClass","shouldBeClass","isDefined","Error","valueOrMoney","defaultCurrency","isInstance","optValue","destinationCurrency"],"mappings":"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","file":"Money.js","sourcesContent":["import CoreObject from \"../CoreObject\";\nimport Utility from \"../Utility\";\nimport Preconditions from \"../Preconditions\";\nimport Currency from \"./Currency\";\nimport Big from 'big.js/big';\n\nexport default class Money extends CoreObject {\n\n    /**\n     * @param {Object} options\n     * @param {BigJsLibrary.BigJS} options.value\n     */\n    constructor(options) {\n        Preconditions.shouldBeDefined(Currency);\n\n        let value = Currency.toValueOrFail(Utility.take(options, 'value'));\n        let currency = Preconditions.shouldBeDefined(Currency.getCurrency(Utility.take(options, 'currency')));\n\n        super(...arguments);\n\n        /**\n         * @type {BigJsLibrary.BigJS}\n         * @private\n         */\n        Preconditions.shouldBe(function() { return (value instanceof Big); }, Utility.typeOf(Big), Utility.typeOf(value), 'should be Big');\n        this._value = value;\n\n        /**\n         * @type {Class<Currency>}\n         * @private\n         */\n        this._currency = Currency.shouldBeCurrency(currency);\n    }\n\n    /**\n     *\n     * @returns {Class<Currency>}\n     */\n    get currency() {\n        return this._currency;\n    }\n\n    /**\n     * @returns {BigJsLibrary.BigJS}\n     */\n    get value() {\n        return this._value;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `${this.value} ${this.currency}`;\n    }\n\n    /**\n     *\n     * @returns {{value, currency}|{value: BigJsLibrary.BigJS, currency: Class.<Currency>}}\n     */\n    toJson() {\n        return super.toJson({\n            value: Utility.optString(this.value),\n            currency: this.currency.toString()\n        });\n    }\n\n    /**\n     * @returns {{value, currency}|{value: BigJsLibrary.BigJS, currency: Class.<Currency>}}\n     */\n    toJSON() {\n        return this.toJson();\n    }\n\n    /**\n     * Returns a new instance of money, since this is immutable.\n     *\n     * @param {String|Number|Money} money\n     * @return {Money}\n     */\n    plus(money) {\n        let big1 = this._toValue(money);\n        let big2 = this._toValue(this);\n\n        let big3 = big1.plus(big2);\n\n        return this.withValue(big3);\n    }\n\n    /**\n     * Returns a new instance of money, since this is immutable.\n     *\n     * @param {String|Number|Money} money\n     * @return {Money}\n     */\n    minus(money) {\n        return this.withValue(this._toValue(money) - this.value);\n    }\n\n    /**\n     * @param {Money|String|Number} money\n     * @returns {boolean}\n     */\n    equals(money) {\n        if (!money) {\n            return false;\n        }\n\n        /**\n         * @type {BigJsLibrary.BigJS}\n         */\n        let value1 = this._toValue(money);\n\n        /**\n         * @type {BigJsLibrary.BigJS}\n         */\n        let value2 = this._toValue(this);\n\n        return value1.eq(value2);\n    }\n\n    /**\n     *\n     * @param {Money|Currency} currencyOrMoney\n     * @returns {boolean}\n     */\n    isSameCurrency(currencyOrMoney) {\n        let c1 = Preconditions.shouldBeExisting(Currency.getCurrency(currencyOrMoney));\n        let c2 = Preconditions.shouldBeExisting(Currency.getCurrency(this));\n\n        return c1.equals(c2) && c2.equals(c1);\n    }\n\n    valueOf() {\n        return this.value;\n    }\n\n    /**\n     *\n     * @param {Number} value\n     * @returns {Money}\n     * @private\n     */\n    withValue(value) {\n        if (!value) {\n            value = 0;\n        }\n\n        return new Money({\n            currency: this.currency,\n            value: value\n        });\n    }\n\n    /**\n     *\n     * @param {Money} money\n     * @return {BigJsLibrary.BigJS}\n     * @private\n     */\n    _toValue(money) {\n        money = Money.shouldBeMoney(Money.optMoney(money, this.currency));\n\n        let that = this;\n        Preconditions.shouldBe(function() { return that.isSameCurrency(money); }, this.currency, Currency.optCurrency(money), 'Must be the same currency.');\n\n        return Currency.toValueOrFail(money);\n    }\n\n    /**\n     * @returns {string}\n     */\n    static toString() {\n        return 'Money';\n    }\n\n    /**\n     *\n     * @param {Money} money\n     * @return {Class<Currency>}\n     */\n    static toCurrency(money) {\n        Money.shouldBeInstance(money);\n\n        return money.currency;\n    }\n\n    /**\n     *\n     * @param {Class<Money>|Money|Class<Currency>|Currency} object\n     * @param {Class<Currency>|Currency} [currency] Optional. If provided, required.\n     * @returns {Money}\n     */\n    static shouldBeMoney(object, currency) {\n        Preconditions.shouldBeDefined(object);\n\n        if (CoreObject.isClass(object)) {\n            Preconditions.shouldBeClass(object, Money, 'object should be money: ' + object);\n\n            if (Utility.isDefined(currency)) {\n                throw new Error(`Money cannot convert to Currency`);\n            }\n        } else {\n            Preconditions.shouldBeInstance(object, Money, 'object should be money: ' + object);\n\n            if (currency) {\n                Money.getCurrency(object);\n\n                Currency.shouldBeClass(currency);\n                Preconditions.shouldBeClass(object.currency, currency);\n            }\n        }\n\n        return object;\n    }\n\n    /**\n     *\n     * @param {Big|Number|String|Money} valueOrMoney\n     * @param {Class<Currency>} [defaultCurrency]\n     * @returns {Money|undefined}\n     */\n    static optMoney(valueOrMoney, defaultCurrency) {\n        if (Money.isInstance(valueOrMoney)) {\n            return valueOrMoney;\n        }\n\n        return new Money({\n            value: Currency.toValueOrFail(valueOrMoney),\n            currency: defaultCurrency\n        });\n    }\n\n    static optValue(money) {\n        return Currency.optValue(money);\n    }\n\n    /**\n     *\n     * @param {Money} money\n     * @param {Class<Currency>|Currency|Money|String} [destinationCurrency]\n     * @return {Boolean}\n     */\n    static isInstance(money, destinationCurrency) {\n        if (!super.isInstance(money)) {\n            return false;\n        }\n\n        if (destinationCurrency) {\n            /**\n             * @type {Class.<Currency>}\n             */\n            let currency = Currency.getCurrency(destinationCurrency);\n\n            /**\n             * @type {Currency}\n             */\n            return currency.equals(money.currency);\n        } else {\n            return true;\n        }\n    }\n}"]}