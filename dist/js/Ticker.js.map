{"version":3,"sources":["../../src/js/Ticker.js"],"names":[],"mappings":"AAAA;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;AAMA,IAAI,aAAJ;;IAEM,M;;;;;;AAKF,oBAAY,OAAZ,EAAqB;AAAA;;AACjB,aAAK,MAAL,GAAc,yBAAd;AACH;;;;;;;;;;;;;;;;;;+BAgBM;AACH,gBAAI,OAAO,QAAQ,MAAR,EAAX;AACA,gBAAI,gBAAgB,KAAK,CAAL,CAApB;AACA,gBAAI,cAAc,KAAK,CAAL,CAAlB;;AAEA,mBAAO,mBAAS,OAAT,CAAiB,OAAjB,CAAyB,aAAzB,IAA0C,WAAjD;AACH;;;;;;;;;;;;6BASI,K,EAAO,Q,EAAU;AAClB,gBAAI,QAAQ,IAAZ;;AAEA,oBAAQ,GAAR,CAAY,OAAZ,EAAqB,KAArB,EAA4B,QAA5B;AACA,mBAAO,uBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,oBAAI,gBAAgB,mBAAS,WAAT,CAAqB,OAArB,CAA6B,KAA7B,EAAoC,QAApC,CAApB;;;AAGA,sBAAM,KAAN,CAAY,UAAZ,CAAuB,YAAW;AAC9B,4BAAQ,GAAR,CAAY,SAAZ,EAAuB,KAAvB,EAA8B,QAA9B;;AAEA;AACH,iBAJD,EAIG,IAJH,EAIS,gBAAgB,GAJzB;AAKH,aATM,CAAP;AAUH;;;;;;;;;;4BAvCW;AACR,mBAAO,KAAK,MAAZ;AACH;;;uCA4CqB;AAClB,mBAAO,aAAP;AACH;;;;;;AAGL,gBAAgB,IAAI,MAAJ,EAAhB;;QAEQ,M,GAAA,M;kBACO,M","file":"Ticker.js","sourcesContent":["'use strict';\n\nimport TimeUnit from \"./TimeUnit\";\nimport Promise from 'bluebird';\nimport NanoTimer from 'nanotimer';\n\n/**\n *\n * @type {Ticker}\n */\nvar SYSTEM_TICKER;\n\nclass Ticker {\n\n    /**\n     * Constructor for use by subclasses.\n     */\n    constructor(options) {\n        this._timer = new NanoTimer();\n    }\n\n    /**\n     *\n     * @return {NanoTimer}\n     */\n    get timer() {\n        return this._timer;\n    }\n\n    /**\n     * Returns the number of nanoseconds elapsed since this ticker's fixed\n     * point of reference.\n     *\n     * @return {Number} nanoseconds\n     */\n    read() {\n        let time = process.hrtime();\n        let timeInSeconds = time[0];\n        let timeInNanos = time[1];\n\n        return TimeUnit.SECONDS.toNanos(timeInSeconds) + timeInNanos;\n    }\n\n    /**\n     * Returns a promise that will finish in the given time.\n     *\n     * @param {Number} value\n     * @param {TimeUnit} timeUnit\n     * @return {Promise}\n     */\n    wait(value, timeUnit) {\n        let scope = this;\n\n        console.log('wait!', value, timeUnit);\n        return new Promise((resolve, reject) => {\n            let numberOfNanos = TimeUnit.NANOSECONDS.convert(value, timeUnit);\n\n            //.setTimeout(task, args, timeout, [callback])\n            scope.timer.setTimeout(function() {\n                console.log('waited!', value, timeUnit);\n\n                resolve();\n            }, null, numberOfNanos + 'n');\n        });\n    }\n\n    /**\n     * A ticker that reads the current time using nanoseconds.\n     *\n     * @return {Ticker}\n     */\n    static systemTicker() {\n        return SYSTEM_TICKER;\n    }\n}\n\nSYSTEM_TICKER = new Ticker();\n\nexport {Ticker};\nexport default Ticker;"]}