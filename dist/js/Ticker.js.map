{"version":3,"sources":["../../src/js/Ticker.js"],"names":["SYSTEM_TICKER","Ticker","options","_timer","time","process","hrtime","timeInSeconds","timeInNanos","SECONDS","toNanos","value","timeUnit","scope","resolve","reject","numberOfNanos","NANOSECONDS","convert","timer","setTimeout"],"mappings":"AAAA;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;AAEA;;;;AAIA,IAAIA,aAAJ;;IAEMC,M;;AAEF;;;AAGA,oBAAYC,OAAZ,EAAqB;AAAA;;AACjB,aAAKC,MAAL,GAAc,yBAAd;AACH;;AAED;;;;;;;;;;AAQA;;;;;;+BAMO;AACH,gBAAIC,OAAOC,QAAQC,MAAR,EAAX;AACA,gBAAIC,gBAAgBH,KAAK,CAAL,CAApB;AACA,gBAAII,cAAcJ,KAAK,CAAL,CAAlB;;AAEA,mBAAO,mBAASK,OAAT,CAAiBC,OAAjB,CAAyBH,aAAzB,IAA0CC,WAAjD;AACH;;AAED;;;;;;;;;;6BAOKG,K,EAAOC,Q,EAAU;AAClB,gBAAIC,QAAQ,IAAZ;;AAEA,mBAAO,uBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIC,gBAAgB,mBAASC,WAAT,CAAqBC,OAArB,CAA6BP,KAA7B,EAAoCC,QAApC,CAApB;;AAEA;AACAC,sBAAMM,KAAN,CAAYC,UAAZ,CAAuB,YAAW;;AAE9BN;AACH,iBAHD,EAGG,IAHH,EAGSE,gBAAgB,GAHzB;AAIH,aARM,CAAP;AASH;;AAED;;;;;;;;4BAvCY;AACR,mBAAO,KAAKb,MAAZ;AACH;;;uCA0CqB;AAClB,mBAAOH,aAAP;AACH;;;;;;AAGLA,gBAAgB,IAAIC,MAAJ,EAAhB;;QAEQA,M,GAAAA,M;kBACOA,M","file":"Ticker.js","sourcesContent":["'use strict';\n\nimport TimeUnit from \"./TimeUnit\";\nimport Promise from 'bluebird';\nimport NanoTimer from 'nanotimer';\n\n/**\n *\n * @type {Ticker}\n */\nvar SYSTEM_TICKER;\n\nclass Ticker {\n\n    /**\n     * Constructor for use by subclasses.\n     */\n    constructor(options) {\n        this._timer = new NanoTimer();\n    }\n\n    /**\n     *\n     * @return {NanoTimer}\n     */\n    get timer() {\n        return this._timer;\n    }\n\n    /**\n     * Returns the number of nanoseconds elapsed since this ticker's fixed\n     * point of reference.\n     *\n     * @return {Number} nanoseconds\n     */\n    read() {\n        let time = process.hrtime();\n        let timeInSeconds = time[0];\n        let timeInNanos = time[1];\n\n        return TimeUnit.SECONDS.toNanos(timeInSeconds) + timeInNanos;\n    }\n\n    /**\n     * Returns a promise that will finish in the given time.\n     *\n     * @param {Number} value\n     * @param {TimeUnit} timeUnit\n     * @return {Promise}\n     */\n    wait(value, timeUnit) {\n        let scope = this;\n\n        return new Promise((resolve, reject) => {\n            let numberOfNanos = TimeUnit.NANOSECONDS.convert(value, timeUnit);\n\n            //.setTimeout(task, args, timeout, [callback])\n            scope.timer.setTimeout(function() {\n\n                resolve();\n            }, null, numberOfNanos + 'n');\n        });\n    }\n\n    /**\n     * A ticker that reads the current time using nanoseconds.\n     *\n     * @return {Ticker}\n     */\n    static systemTicker() {\n        return SYSTEM_TICKER;\n    }\n}\n\nSYSTEM_TICKER = new Ticker();\n\nexport {Ticker};\nexport default Ticker;"]}