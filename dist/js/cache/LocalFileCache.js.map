{"version":3,"sources":["../../../src/js/cache/LocalFileCache.js"],"names":["LocalFileCache","options","path","take","adapter","value","tmpdir","config","_config","watchDirectoryChanges","watchFileChanges","hashAlgo","gzip","deflate","debug","defaults","_fc","_path","_started","fc","scope","on","d","logger","p","k","length","mime_type","mtime","toUTCString","_startedLatch","resolve","reject","cache_dir","toString","err","load","cache","_items","startedLatch","catch","_error","finally","base_path","then","error","joinPaths","absolutePath","pathString","substring","startsWith","filePath","items","result","warn"],"mappings":"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","file":"LocalFileCache.js","sourcesContent":["import Utility from \"../Utility\";\nimport URI from \"urijs\";\nimport filecache from \"filecache\";\nimport Promise from \"bluebird\";\nimport osenv from \"osenv\";\nimport mkdirp from \"mkdirp\";\nimport Cache from \"./Cache\";\n\n/**\n * @class LocalFileCache\n * @extends Cache\n */\nclass LocalFileCache extends Cache {\n\n    _config = {\n        watchDirectoryChanges: true,\n        watchFileChanges: false,\n        hashAlgo: 'sha1',\n        gzip: true,\n        deflate: true,\n        debug: true\n    };\n\n    //region constructor\n    /**\n     *\n     * @param {Object} options\n     * @param {String|URI} [options.path] defaults to tmpdir\n     * @param {{watchDirectoryChanges: boolean, watchFileChanges: boolean, hashAlgo: string, gzip: boolean, deflate: boolean, debug: boolean}} [options.config]\n     */\n    constructor(options) {\n        let path = Utility.take(options, 'path', {\n            adapter(value) {\n                return URI(value || (osenv.tmpdir() + '/coinme'));\n            }\n        });\n\n        let config = Utility.take(options, 'config', false);\n\n        super(options);\n\n        this._config = Utility.defaults(config || {}, this._config);\n        this._fc = filecache(this.config);\n        this._path = path;\n        this._started = false;\n\n        let fc = this.fc;\n        let scope = this;\n\n        if (this.config.watchDirectoryChanges && this.config.debug) {\n            fc.on('change', function (d) {\n                scope.logger.debug('! file changed');\n                scope.logger.debug('     full path: %s', d.p);\n                scope.logger.debug(' relative path: %s', d.k);\n                scope.logger.debug('        length: %s bytes', d.length);\n                scope.logger.debug('                %s bytes (gzip)', d.gzip.length);\n                scope.logger.debug('                %s bytes (deflate)', d.deflate.length);\n                scope.logger.debug('     mime-type: %s', d.mime_type);\n                scope.logger.debug('         mtime: %s', d.mtime.toUTCString());\n            });\n        }\n\n        this._startedLatch = new Promise((resolve, reject) => {\n            let cache_dir = scope.path.toString();\n\n            mkdirp(cache_dir, function (err) {\n                if (err) {\n                    return reject(err);\n                }\n\n                fc.load(cache_dir, function (err, cache) {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        scope._items = cache;\n\n                        resolve();\n                    }\n                });\n\n                fc.on('ready', function (cache) {\n                    scope._items = cache;\n                });\n            })\n        });\n\n        this.startedLatch.catch((err) => {\n            scope._error = err;\n        });\n\n        this.startedLatch.finally(() => {\n            scope._started = true;\n        });\n    }\n\n    //endregion\n\n    //region getters/setters\n    /**\n     * @property\n     * @readonly\n     * @type {Promise}\n     * @return {Promise}\n     */\n    get startedLatch() {\n        return this._startedLatch;\n    }\n\n    /**\n     * @property\n     * @readonly\n     * @type {boolean}\n     * @return {boolean}\n     */\n    get started() {\n        return this._started;\n    }\n\n    /**\n     * @property\n     * @readonly\n     * @type {undefined|Error}\n     * @return {boolean}\n     */\n    get hasError() {\n        return !!this.error;\n    }\n\n    /**\n     * @property\n     * @readonly\n     * @type {undefined|Error}\n     * @return {undefined|Error}\n     */\n    get error() {\n        return this._error;\n    }\n\n    /**\n     * The items in the cache.\n     * @readonly\n     * @private\n     * @type {Object}\n     * @return {Object}\n     */\n    get items() {\n        return this._items;\n    }\n\n    /**\n     * @private\n     * @property\n     * @readonly\n     * @type {filecache}\n     * @return {filecache}\n     */\n    get fc() {\n        return this._fc;\n    }\n\n    /**\n     * @property\n     * @readonly\n     * @type {String}\n     * @return {{watchDirectoryChanges: boolean, watchFileChanges: boolean, hashAlgo: string, gzip: boolean, deflate: boolean, debug: boolean}}\n     */\n    get config() {\n        return this._config;\n    }\n\n    /**\n     * @property\n     * @readonly\n     * @type {URI}\n     * @return {URI}\n     */\n    get path() {\n        return this._path;\n    }\n\n    //endregion\n\n    /**\n     *\n     * @param {String|URI} path\n     * @return {Promise}\n     */\n    read(path) {\n        /** @type {URI} */\n        let base_path = this.path;\n        /** @type {winston.Logger} */\n        let logger = this.logger;\n\n        let scope = this;\n\n        return super\n            .read(path)\n            .then((/** @type {URI} */path) => {\n                if (scope.error) {\n                    // an error here means that this cache is fucked.\n                    throw scope.error;\n                }\n\n                return path;\n            })\n            .then((path) => {\n                return URI.joinPaths(base_path, path);\n            })\n            .then((/** @type {URI} */absolutePath) => {\n                let pathString = absolutePath.toString().substring(base_path.toString().length);\n\n                if (pathString.startsWith('/')) {\n                    pathString = pathString.substring(1);\n                }\n\n                return pathString;\n            })\n            .then((/** @type {String} */filePath) => {\n                let items = scope.items;\n                let result = items[filePath];\n\n                if (!result) {\n                    logger.warn(`Not sure why, but ${filePath} was not found in ${items}`);\n                }\n\n                return result;\n            });\n    }\n}\n\nexport {LocalFileCache}\nexport default LocalFileCache;"]}