{"version":3,"sources":["../../src/js/Address.js"],"names":["VALIDATORS","address","shouldBeInstance","Address","isBlank","resource","value","validate","options","isString","validator","strict","take","shouldBeDefined","_uri","toUri","_validator","toLowerCase","_strict","generalValidator","shouldBeFunction","shouldBeTrue","toString","valid","valueOf","optString","uri","host","scheme","isUndefined","_valid","validatorFn","shouldNotBeBlank","shouldBeString","stringOrAddressOrUri","isInstance","defaultScheme","toUriWithDefaultScheme","toAddress","isNullOrUndefined","indexOf","u","index","length","protocol","substring","rest"],"mappings":"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","file":"Address.js","sourcesContent":["import Utility from \"./Utility\";\nimport CoreObject from \"./CoreObject\";\nimport URI from \"urijs\";\nimport altcoin from \"altcoin-address\";\nimport Preconditions from \"~/Preconditions\";\nimport {NotImplementedError} from \"./errors\";\n\nlet VALIDATORS = {\n\n    /**\n     * @param {Address} address\n     */\n    'general': function (address) {\n        Preconditions.shouldBeInstance(address, Address);\n\n        return !(Utility.isBlank(address.resource) || Utility.isBlank(address.value));\n    },\n\n    /**\n     * @param {Address} address\n     * @returns {boolean}\n     */\n    'bitcoin': function (address) {\n        Preconditions.shouldBeInstance(address, Address);\n\n        if (address.resource !== 'bitcoin') {\n            return false;\n        }\n\n        return altcoin.validate(address.value, 'bitcoin');\n    }\n};\n\n/**\n * A class for uniquely identifying something.\n */\nclass Address extends CoreObject {\n\n    /**\n     *\n     * @param {URI|String|Object} options\n     * @param {String} [options.value]\n     * @param {Function} [options.validator]\n     * @param {Boolean} [options.strict] Set to false to skip validation.\n     */\n    constructor(options) {\n        if (Utility.isString(options)) {\n            options = {value: options};\n        } else if (options instanceof URI) {\n            options = {value: options};\n        } else if (options instanceof Address) {\n            /**\n             * @type {Address}\n             */\n            let address = options;\n\n            options = {\n                value: address.value,\n                validator: address.validator,\n                strict: address.strict\n            }\n        }\n\n        /**\n         * @type {String|URI}\n         */\n        let value = Utility.take(options, 'value');\n        let validator = Utility.take(options, 'validator');\n        let strict = Utility.take(options, 'strict');\n\n        Preconditions.shouldBeDefined(value, 'Cannot construct an empty Address.');\n\n        super(options);\n\n        this._uri = Address.toUri(value);\n        this._validator = validator || VALIDATORS[Utility.toLowerCase(this.resource)];\n        this._strict = (false === strict);\n\n        {\n            let generalValidator = Preconditions.shouldBeFunction(VALIDATORS['general'], 'general validator is required');\n\n            Preconditions.shouldBeTrue(generalValidator(this), 'general validator failed for: ' + value);\n        }\n\n        if (this.strict) {\n            // Require Validation\n            Preconditions.shouldBeFunction(this.validator, 'validator not found for \\'' + this.toString() + '\\'');\n            Preconditions.shouldBeTrue(this.valid, 'not valid');\n        }\n    }\n\n    /**\n     * @return {boolean}\n     */\n    get strict() {\n        return this._strict;\n    }\n\n    /**\n     * [resource]:/[value]\n     *\n     * @return {String}\n     */\n    get value() {\n        return this.uri.host();\n    }\n\n    /**\n     * [resource]:/[value]\n     *\n     * @return {String}\n     */\n    get resource() {\n        return this.uri.scheme();\n    }\n\n    /**\n     * @returns {URI}\n     */\n    get uri() {\n        return this._uri;\n    }\n\n    /**\n     *\n     * @returns {Boolean}\n     */\n    get valid() {\n        if (Utility.isUndefined(this._valid)) {\n            if (this.validator) {\n                this._valid = this.validator(this);\n            } else {\n                this._valid = true; // because it passed general.\n            }\n        }\n\n        return this._valid;\n    }\n\n    /**\n     * @returns {Function}\n     */\n    get validator() {\n        return this._validator;\n    }\n\n    /**\n     *\n     * @returns {String}\n     */\n    toString() {\n        return this.valueOf();\n    }\n\n    /**\n     * @returns {String}\n     */\n    valueOf() {\n        return this._uri.toString();\n    }\n\n    toJson() {\n        return super.toJson({\n            value: Utility.optString(this)\n        })\n    }\n\n    /**\n     * @returns {String}\n     */\n    static toString() {\n        return 'Address';\n    }\n\n    /**\n     * @param {String} scheme\n     * @param {Function} validatorFn\n     */\n    static registerValidator(scheme, validatorFn) {\n        scheme = Preconditions.shouldNotBeBlank(Utility.toLowerCase(Preconditions.shouldBeString(scheme)));\n        validatorFn = Preconditions.shouldBeFunction(validatorFn);\n\n        VALIDATORS[Utility.toLowerCase(scheme)] = validatorFn;\n\n        return validatorFn;\n    }\n\n    /**\n     *\n     * @param {String|Address|URI} stringOrAddressOrUri\n     * @return {Address|null}\n     */\n    static toAddress(stringOrAddressOrUri) {\n        if (Utility.isString(stringOrAddressOrUri) || (stringOrAddressOrUri instanceof URI)) {\n            return new Address(stringOrAddressOrUri);\n        } else if (Address.isInstance(stringOrAddressOrUri)) {\n            return stringOrAddressOrUri;\n        } else {\n            throw new NotImplementedError(`Cannot handle ${stringOrAddressOrUri}`);\n        }\n    }\n\n    /**\n     *\n     * @param {String|Address|URI} stringOrAddressOrUri\n     * @param {String} [defaultScheme]\n     * @return {Address}\n     */\n    static toAddressWithDefaultScheme(stringOrAddressOrUri, defaultScheme) {\n        if (Utility.isString(stringOrAddressOrUri)) {\n            return new Address(Address.toUriWithDefaultScheme(stringOrAddressOrUri, defaultScheme));\n        } else {\n            return Address.toAddress(stringOrAddressOrUri);\n        }\n    }\n\n    /**\n     *\n     * @param {String|Address|URI} stringOrAddressOrUri\n     * @param {String} [defaultScheme]\n     * @return {URI}\n     */\n    static toUriWithDefaultScheme(stringOrAddressOrUri, defaultScheme) {\n        if (Utility.isNullOrUndefined(stringOrAddressOrUri)) {\n            return null;\n        } else if (stringOrAddressOrUri instanceof URI) {\n            return stringOrAddressOrUri;\n        } else if (Utility.isString(stringOrAddressOrUri)) {\n            if (~stringOrAddressOrUri.indexOf('://')) {\n                let u = new URI(stringOrAddressOrUri);\n\n                return new URI(u.scheme() + \"://\" + u.host());\n            }\n\n            let index = stringOrAddressOrUri.indexOf(\":/\");\n\n            if (-1 === index) {\n                if (!Utility.isBlank(defaultScheme)) {\n                    stringOrAddressOrUri = defaultScheme + ':/' + stringOrAddressOrUri;\n\n                    index = defaultScheme.length;\n                } else {\n                    return new URI(stringOrAddressOrUri);\n                }\n            }\n\n            let protocol = stringOrAddressOrUri.substring(0, index);\n            let rest = stringOrAddressOrUri.substring(index + 2);\n\n            return new URI(protocol + \"://\" + rest);\n        } else {\n            throw new NotImplementedError('Do not know how to handle: ' + stringOrAddressOrUri);\n        }\n    }\n\n    /**\n     *\n     * @param {String|URI|null|undefined} uri\n     * @return {URI}\n     */\n    static toUri(uri) {\n        return Address.toUriWithDefaultScheme(uri);\n    }\n}\n\nexport {Address};\nexport default Address;"]}