{"version":3,"sources":["../../src/js/Address.js"],"names":[],"mappings":"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","file":"Address.js","sourcesContent":["import Utility from \"./Utility\";\nimport CoreObject from \"./CoreObject\";\nimport URI from \"urijs\";\nimport altcoin from \"altcoin-address\";\nimport Preconditions from \"~/Preconditions\";\nimport {NotImplementedError} from \"./errors\";\n\nlet VALIDATORS = {\n\n    /**\n     * @param {Address} address\n     */\n    'general': function (address) {\n        Preconditions.shouldBeInstance(address, Address);\n\n        let resource = address.resource;\n        let value = address.value;\n\n        console.log(resource, value);\n\n        return !(Utility.isBlank(address.resource) || Utility.isBlank(address.value));\n    },\n\n    /**\n     * @param {Address} address\n     * @returns {boolean}\n     */\n    'bitcoin': function (address) {\n        Preconditions.shouldBeInstance(address, Address);\n\n        if (address.resource !== 'bitcoin') {\n            return false;\n        }\n\n        return altcoin.validate(address.value, 'bitcoin');\n    }\n};\n\n/**\n * A class for uniquely identifying something.\n */\nclass Address extends CoreObject {\n\n    /**\n     *\n     * @param {URI|String|Object} options\n     * @param {String} [options.value]\n     * @param {Function} [options.validator]\n     * @param {Boolean} [options.strict] Set to false to skip validation.\n     */\n    constructor(options) {\n        if (Utility.isString(options)) {\n            options = {value: options};\n        } else if (options instanceof URI) {\n            options = {value: options};\n        } else if (options instanceof Address) {\n            /**\n             * @type {Address}\n             */\n            let address = options;\n\n            options = {\n                value: address.value,\n                validator: address.validator,\n                strict: address.strict\n            }\n        }\n\n        /**\n         * @type {String|URI}\n         */\n        let value = Utility.take(options, 'value');\n        let validator = Utility.take(options, 'validator');\n        let strict = Utility.take(options, 'strict');\n\n        Preconditions.shouldBeDefined(value, 'Cannot construct an empty Address.');\n\n        super(options);\n\n        this._uri = Address.toUri(value);\n        this._validator = validator || VALIDATORS[Utility.toLowerCase(this.resource)];\n        this._strict = (false === strict);\n\n        {\n            let generalValidator = Preconditions.shouldBeFunction(VALIDATORS['general'], 'general validator is required');\n\n            Preconditions.shouldBeTrue(generalValidator(this), 'general validator failed for: ' + value);\n        }\n\n        if (this.strict) {\n            // Require Validation\n            Preconditions.shouldBeFunction(this.validator, 'validator not found for \\'' + this.toString() + '\\'');\n            Preconditions.shouldBeTrue(this.valid, 'not valid');\n        }\n    }\n\n    /**\n     * @return {boolean}\n     */\n    get strict() {\n        return this._strict;\n    }\n\n    /**\n     * [resource]:/[value]\n     *\n     * @return {String}\n     */\n    get value() {\n        return this.uri.host();\n    }\n\n    /**\n     * [resource]:/[value]\n     *\n     * @return {String}\n     */\n    get resource() {\n        return this.uri.scheme();\n    }\n\n    /**\n     * @returns {URI}\n     */\n    get uri() {\n        return this._uri;\n    }\n\n    /**\n     *\n     * @returns {Boolean}\n     */\n    get valid() {\n        if (Utility.isUndefined(this._valid)) {\n            if (this.validator) {\n                this._valid = this.validator(this);\n            } else {\n                this._valid = true; // because it passed general.\n            }\n        }\n\n        return this._valid;\n    }\n\n    /**\n     * @returns {Function}\n     */\n    get validator() {\n        return this._validator;\n    }\n\n    /**\n     *\n     * @returns {String}\n     */\n    toString() {\n        return this.valueOf();\n    }\n\n    /**\n     * @returns {String}\n     */\n    valueOf() {\n        return this._uri.toString();\n    }\n\n    toJson() {\n        return super.toJson({\n            value: Utility.optString(this)\n        })\n    }\n\n    /**\n     * @returns {String}\n     */\n    static toString() {\n        return 'Address';\n    }\n\n    /**\n     * @param {String} scheme\n     * @param {Function} validatorFn\n     */\n    static registerValidator(scheme, validatorFn) {\n        scheme = Preconditions.shouldNotBeBlank(Utility.toLowerCase(Preconditions.shouldBeString(scheme)));\n        validatorFn = Preconditions.shouldBeFunction(validatorFn);\n\n        VALIDATORS[Utility.toLowerCase(scheme)] = validatorFn;\n\n        return validatorFn;\n    }\n\n    /**\n     *\n     * @param {String|Address|URI} stringOrAddressOrUri\n     * @return {Address|null}\n     */\n    static toAddress(stringOrAddressOrUri) {\n        if (Utility.isString(stringOrAddressOrUri) || (stringOrAddressOrUri instanceof URI)) {\n            return new Address(stringOrAddressOrUri);\n        } else if (Address.isInstance(stringOrAddressOrUri)) {\n            return stringOrAddressOrUri;\n        } else {\n            throw new NotImplementedError(`Cannot handle ${stringOrAddressOrUri}`);\n        }\n    }\n\n    /**\n     *\n     * @param {String|Address|URI} stringOrAddressOrUri\n     * @param {String} [defaultScheme]\n     * @return {Address}\n     */\n    static toAddressWithDefaultScheme(stringOrAddressOrUri, defaultScheme) {\n        if (Utility.isString(stringOrAddressOrUri)) {\n            return new Address(Address.toUriWithDefaultScheme(stringOrAddressOrUri, defaultScheme));\n        } else {\n            return Address.toAddress(stringOrAddressOrUri);\n        }\n    }\n\n    /**\n     *\n     * @param {String|Address|URI} stringOrAddressOrUri\n     * @param {String} [defaultScheme]\n     * @return {URI}\n     */\n    static toUriWithDefaultScheme(stringOrAddressOrUri, defaultScheme) {\n        if (Utility.isNullOrUndefined(stringOrAddressOrUri)) {\n            return null;\n        } else if (stringOrAddressOrUri instanceof URI) {\n            return stringOrAddressOrUri;\n        } else if (Utility.isString(stringOrAddressOrUri)) {\n            if (~stringOrAddressOrUri.indexOf('://')) {\n                let u = new URI(stringOrAddressOrUri);\n\n                return new URI(u.scheme() + \"://\" + u.host());\n            }\n\n            let index = stringOrAddressOrUri.indexOf(\":/\");\n\n            if (-1 === index) {\n                if (!Utility.isBlank(defaultScheme)) {\n                    stringOrAddressOrUri = defaultScheme + ':/' + stringOrAddressOrUri;\n\n                    index = defaultScheme.length;\n                } else {\n                    return new URI(stringOrAddressOrUri);\n                }\n            }\n\n            let protocol = stringOrAddressOrUri.substring(0, index);\n            let rest = stringOrAddressOrUri.substring(index + 2);\n\n            console.log('test', stringOrAddressOrUri, protocol, rest);\n\n            return new URI(protocol + \"://\" + rest);\n        } else {\n            throw new NotImplementedError('Do not know how to handle: ' + stringOrAddressOrUri);\n        }\n    }\n\n    /**\n     *\n     * @param {String|URI|null|undefined} uri\n     * @return {URI}\n     */\n    static toUri(uri) {\n        return Address.toUriWithDefaultScheme(uri);\n    }\n}\n\nexport {Address};\nexport default Address;"]}