{"version":3,"sources":["../../../src/js/data/Licenses.js"],"names":[],"mappings":";;;;AAAA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,IAAI,SAAS;AACT,UAAM,cADG,E;AAET,UAAM,cAFG,E;AAGT,UAAM,gEAHG,E;AAIT,UAAM,cAJG,E;AAKT,UAAM,uBALG,E;AAMT,UAAM,kEANG,E;AAOT,UAAM,YAPG,E;AAQT,UAAM,cARG,E;AAST,UAAM,2BATG,E;AAUT,UAAM,wBAVG,E;AAWT,UAAM,cAXG,E;AAYT,UAAM,sCAZG,E;AAaT,UAAM,iDAbG,E;AAcT,UAAM,2BAdG,E;AAeT,UAAM,yCAfG,E;AAgBT,UAAM,0CAhBG,E;AAiBT,UAAM,8EAjBG,E;AAkBT,UAAM,wCAlBG,E;AAmBT,UAAM,cAnBG,E;AAoBT,UAAM,wCApBG,E;AAqBT,UAAM,wBArBG,E;AAsBT,UAAM,sCAtBG,E;AAuBT,UAAM,mDAvBG,E;AAwBT,UAAM,wBAxBG,E;AAyBT,UAAM,YAzBG,E;AA0BT,UAAM,sHA1BG,E;AA2BT,UAAM,kEA3BG,E;AA4BT,UAAM,cA5BG,E;AA6BT,UAAM,kDA7BG,E;AA8BT,UAAM,+BA9BG,E;AA+BT,UAAM,wBA/BG,E;AAgCT,UAAM,cAhCG,E;AAiCT,UAAM,0GAjCG,E;AAkCT,UAAM,eAlCG,E;AAmCT,UAAM,sCAnCG,E;AAoCT,UAAM,kEApCG,E;AAqCT,UAAM,sCArCG,E;AAsCT,UAAM,cAtCG,E;AAuCT,UAAM,YAvCG,E;AAwCT,UAAM,sCAxCG,E;AAyCT,UAAM,eAzCG,E;AA0CT,UAAM,+BA1CG,E;AA2CT,UAAM,cA3CG,E;AA4CT,UAAM,cA5CG,E;AA6CT,UAAM,eA7CG,E;AA8CT,UAAM,8BA9CG,E;AA+CT,UAAM,yCA/CG,E;AAgDT,UAAM,8CAhDG,E;AAiDT,UAAM,0CAjDG,E;AAkDT,UAAM,wBAlDG,E;AAmDT,UAAM,e;AAnDG,CAAb;;IAsDM,Q;;;AAEF,wBAAc;AAAA;;AAAA,iGACD,SADC;;AAGV,cAAM,IAAI,SAAJ,CAAc,sBAAd,CAAN;;AAEA,yBAAO,cAAP,CAAsB,QAAtB;AALU;AAMb;;;;qDAEmC,M,EAAQ;AAC5C,gBAAI,QAAQ,KAAZ;AACA,gBAAI,gBAAgB,EAApB;;AAEA,gBAAI,UAAU,OAAO,MAAP,GAAgB,CAA9B,EAAiC;;AAE7B,sBAAM,CAAN,CAAQ,IAAR,CAAa,MAAb,EAAqB,UAAS,KAAT,EAAgB,KAAhB,EAAuB;AACxC,wBAAI,CAAC,KAAD,IAAU,MAAM,IAAN,CAAW,MAAX,CAAd,EAAkC;AAC9B,gCAAQ,IAAR;AACA,wCAAgB,KAAhB;AACH;AACJ,iBALD;AAMH;;AAED,gBAAI,CAAC,KAAL,EAAY;AACR,uBAAO,SAAP;AACH;;AAED,kBAAM,MAAN,CAAa,IAAb,CAAkB,gCAAgC,MAAlD;AACA,mBAAO,EAAC,OAAO,aAAR,EAAP;AACH","file":"Licenses.js","sourcesContent":["import CoreObject from \"../CoreObject\";\nimport Errors from \"../errors/Errors\";\n\n/********************************************************\n * @DESCRIPTION: validation for the format of a driver's\n *   license list as of 2012 US Driver's Licenses formats\n * @author: Adam Bullmer\n * @date: 04/04/2013\n *\n * @PARAM: $string, automatic input from form_validation()\n * @EXPECTED-INPUT: alpha-numeric, trimmed\n *\n * @REQUIREMENTS: It is required to validate the DL State\n * field FIRST in order for us to choose which regex rules\n * we will use.\n * @FIELD: 'dl_state'\n * @FIELD-VALUE: 2 uppercase character state abbreviation\n ********************************************************/\nlet format = {\n    'AL': /^[0-9]{1,7}$/, //1-7Numbers\n    'AK': /^[0-9]{1,7}$/, //1-7Numbers\n    'AZ': /(^[a-zA-Z]{1}[0-9]{8}$)|(^[a-zA-Z]{2}[0-9]{2,5}$)|(^[0-9]{9}$)/, //1Alpha+1-8Numeric or 2Alpha+2-5Numeric or 9Numeric\n    'AR': /^[0-9]{4,9}$/, //4-9Numeric\n    'CA': /^[a-zA-Z]{1}[0-9]{7}$/, //1Alpha+7Numeric\n    'CO': /(^[0-9]{9}$)|(^[a-zA-Z]{1}[0-9]{3,6}$)|(^[a-zA-Z]{2}[0-9]{2,5}$)/, //9Numeric or 1Alpha+3-6Numeric or 2Alpha+2-5Numeric\n    'CT': /^[0-9]{9}$/, //9Numeric\n    'DE': /^[0-9]{1,7}$/, //1-7Numeric\n    'DC': /(^[0-9]{7}$)|(^[0-9]{9}$)/, //7Numeric or 9Numeric\n    'FL': /^[a-zA-Z]{1}[0-9]{12}$/, //1Alpha+12Numeric\n    'GA': /^[0-9]{7,9}$/, //7-9Numeric\n    'HI': /(^[a-zA-Z]{1}[0-9]{8}$)|(^[0-9]{9}$)/, //1Alpha+8Numeric or 9Numeric\n    'ID': /(^[a-zA-Z]{2}[0-9]{6}[a-zA-Z]{1}$)|(^[0-9]{9}$)/, //2Alpha+6Numeric+1Alpha or 9Numeric\n    'IL': /^[a-zA-Z]{1}[0-9]{11,12}$/, //1Alpha+11-12Numeric\n    'IN': /(^[a-zA-Z]{1}[0-9]{9}$)|(^[0-9]{9,10}$)/, //1Alpha+9Numeric or 9-10Numeric\n    'IA': /^[0-9]{9}|([0-9]{3}[a-zA-Z]{2}[0-9]{4}$)/, //9Numeric or 3Numeric+2Alpha+4Numeric\n    'KS': /(^([a-zA-Z]{1}[0-9]{1}){2}[a-zA-Z]{1}$)|(^[a-zA-Z]{1}[0-9]{8}$)|(^[0-9]{9}$)/, //1Alpha+1Numeric+1Alpha+1Numeric+1Alpha or 1Alpha+8Numeric or 9Numeric\n    'KY': /(^[a-zA_Z]{1}[0-9]{8,9}$)|(^[0-9]{9}$)/, //1Alpha+8-9Numeric or 9Numeric\n    'LA': /^[0-9]{1,9}$/, //1-9Numeric\n    'ME': /(^[0-9]{7,8}$)|(^[0-9]{7}[a-zA-Z]{1}$)/, //7-8Numeric or 7Numeric+1Alpha\n    'MD': /^[a-zA-Z]{1}[0-9]{12}$/, //1Alpha+12Numeric\n    'MA': /(^[a-zA-Z]{1}[0-9]{8}$)|(^[0-9]{9}$)/, //1Alpha+8Numeric or 9Numeric\n    'MI': /(^[a-zA-Z]{1}[0-9]{10}$)|(^[a-zA-Z]{1}[0-9]{12}$)/, //1Alpha+10Numeric or 1Alpha+12Numeric\n    'MN': /^[a-zA-Z]{1}[0-9]{12}$/, //1Alpha+12Numeric\n    'MS': /^[0-9]{9}$/, //9Numeric\n    'MO': /(^[a-zA-Z]{1}[0-9]{5,9}$)|(^[a-zA-Z]{1}[0-9]{6}[R]{1}$)|(^[0-9]{8}[a-zA-Z]{2}$)|(^[0-9]{9}[a-zA-Z]{1}$)|(^[0-9]{9}$)/, //1Alpha+5-9Numeric or 1Alpha+6Numeric+R or 8Numeric+2Alpha or 9Numeric+1Alpha or 9Numeric\n    'MT': /(^[a-zA-Z]{1}[0-9]{8}$)|(^[0-9]{13}$)|(^[0-9]{9}$)|(^[0-9]{14}$)/, //1Alpha+8Numeric or 13Numeric or 9Numeric or 14Numeric\n    'NE': /^[0-9]{1,7}$/, //1-7Numeric\n    'NV': /(^[0-9]{9,10}$)|(^[0-9]{12}$)|(^[X]{1}[0-9]{8}$)/, //9Numeric or 10Numeric or 12Numeric or X+8Numeric\n    'NH': /^[0-9]{2}[a-zA-Z]{3}[0-9]{5}$/, //2Numeric+3Alpha+5Numeric\n    'NJ': /^[a-zA-Z]{1}[0-9]{14}$/, //1Alpha+14Numeric\n    'NM': /^[0-9]{8,9}$/, //8Numeric or 9Numeric\n    'NY': /(^[a-zA-Z]{1}[0-9]{7}$)|(^[a-zA-Z]{1}[0-9]{18}$)|(^[0-9]{8}$)|(^[0-9]{9}$)|(^[0-9]{16}$)|(^[a-zA-Z]{8}$)/, //1Alpha+7Numeric or 1Alpha+18Numeric or 8Numeric or 9Numeric or 16 Numeric or 8Alpha\n    'NC': /^[0-9]{1,12}$/, //1-12Numeric\n    'ND': /(^[a-zA-Z]{3}[0-9]{6}$)|(^[0-9]{9}$)/, //3Alpha+6Numeric or 9Numeric\n    'OH': /(^[a-zA-Z]{1}[0-9]{4,8}$)|(^[a-zA-Z]{2}[0-9]{3,7}$)|(^[0-9]{8}$)/, //1Alpha+4-8Numeric or 2Alpha+3-7Numeric or 8Numeric\n    'OK': /(^[a-zA-Z]{1}[0-9]{9}$)|(^[0-9]{9}$)/, //1Alpha+9Numeric or 9Numeric\n    'OR': /^[0-9]{1,9}$/, //1-9Numeric\n    'PA': /^[0-9]{8}$/, //8Numeric\n    'RI': /^([0-9]{7}$)|(^[a-zA-Z]{1}[0-9]{6}$)/, //7Numeric or 1Alpha+6Numeric\n    'SC': /^[0-9]{5,11}$/, //5-11Numeric\n    'SD': /(^[0-9]{6,10}$)|(^[0-9]{12}$)/, //6-10Numeric or 12Numeric\n    'TN': /^[0-9]{7,9}$/, //7-9Numeric\n    'TX': /^[0-9]{7,8}$/, //7-8Numeric\n    'UT': /^[0-9]{4,10}$/, //4-10Numeric\n    'VT': /(^[0-9]{8}$)|(^[0-9]{7}[A]$)/, //8Numeric or 7Numeric+A\n    'VA': /(^[a-zA-Z]{1}[0-9]{9,11}$)|(^[0-9]{9}$)/, //1Alpha+9Numeric or 1Alpha+10Numeric or 1Alpha+11Numeric or 9Numeric\n    'WA': /^(?=.{12}$)[a-zA-Z]{1,7}[a-zA-Z0-9\\*]{4,11}$/, //1-7Alpha+any combination of Alpha, Numeric, or * for a total of 12 characters\n    'WV': /(^[0-9]{7}$)|(^[a-zA-Z]{1,2}[0-9]{5,6}$)/, //7Numeric or 1-2Alpha+5-6Numeric\n    'WI': /^[a-zA-Z]{1}[0-9]{13}$/, //1Alpha+13Numeric\n    'WY': /^[0-9]{9,10}$/ //9-10Numeric\n};\n\nclass Licenses extends CoreObject {\n\n    constructor() {\n        super(...arguments);\n\n        throw new TypeError('Licenses is abstract');\n\n        Errors.mustBeAbstract(Licenses);\n    }\n\n    static detectStateFromDriverLicense(string) {\n    var match = false;\n    var matchingState = '';\n\n    if (string && string.length > 5) {\n        // For performance\n        Ember.$.each(format, function(state, regex) {\n            if (!match && regex.test(string)) {\n                match = true;\n                matchingState = state;\n            }\n        });\n    }\n\n    if (!match) {\n        return undefined;\n    }\n\n    Ember.Logger.warn('Did an expensive query for ' + string);\n    return {state: matchingState};\n}\n\n\n}"]}