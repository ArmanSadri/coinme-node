{"version":3,"sources":["../../../src/js/data/SignTool.js"],"names":[],"mappings":"AAAA;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEM,Q;;;AAEF,sBAAY,OAAZ,EAAqB;AAAA;;AACjB,YAAI,SAAS,kBAAQ,IAAR,CAAa,OAAb,EAAsB,QAAtB,EAAgC;AACzC,sBAAU,IAD+B;AAEzC,kBAAM;AAFmC,SAAhC,CAAb;;AADiB,iGAMR,SANQ;;AAQjB,cAAK,OAAL,GAAe,MAAf;AARiB;AASpB;;;;;;;;;;;;;;;;;;;;;;wCAoBe,K,EAAO,O,EAAS;;;AAG5B,gBAAI,gBAAgB,uBAAI,MAAJ,CAAW,KAAX,EAAkB;AAClC,0BAAU;AADwB,aAAlB,CAApB;;;AAKA,gBAAI,UAAU,cAAc,OAA5B;;AAEA;AACI,oBAAI,mBAAmB,kBAAQ,MAAR,CAAe,QAAQ,QAAvB,CAAvB;AACA,oBAAI,cAAc,CAAC,kBAAQ,OAAR,CAAgB,QAAQ,GAAxB,CAAnB;;AAEA,oBAAI,oBAAoB,CAAC,WAAzB,EAAsC;AAClC,2BAAO,IAAP;AACH;AACJ;;AAED;AACI,oBAAI,iBAAiB,kBAAQ,MAAR,CAAe,QAAQ,MAAvB,CAArB;AACA,oBAAI,YAAY,CAAC,kBAAQ,OAAR,CAAgB,QAAQ,GAAxB,CAAjB;;AAEA,oBAAI,kBAAkB,CAAC,SAAvB,EAAkC;AAC9B,2BAAO,IAAP;AACH;AACJ;;AAED;AACI,oBAAI,kBAAkB,kBAAQ,MAAR,CAAe,QAAQ,OAAvB,CAAtB;AACA,oBAAI,aAAa,CAAC,kBAAQ,OAAR,CAAgB,QAAQ,GAAxB,CAAlB;;AAEA,oBAAI,mBAAmB,CAAC,UAAxB,EAAoC;AAChC,2BAAO,IAAP;AACH;AACJ;;;;AAID,mBAAO,IAAP;AACH;;;;;;;;;;;;;;6BAWI,K,EAAO,O,EAAS;AACjB,gBAAI,SAAS,KAAK,MAAlB;;;AAGA,mCAAI,MAAJ,CAAW,KAAX,EAAkB,MAAlB,EAA0B,OAA1B;;AAEA,mBAAO,uBAAI,MAAJ,CAAW,KAAX,EAAkB,MAAlB,CAAP;AACH;;;;;;;;;;;;;;;8BAYK,M,EAAQ,O,EAAS;AACnB,gBAAI,SAAS,KAAK,MAAlB;;AAEA,oCAAc,cAAd,CAA6B,MAA7B;;AAEA,mBAAO,uBAAI,IAAJ,CAAS,MAAT,EAAiB,MAAjB,EAAyB,OAAzB,CAAP;AACH;;;4BAzFY;AACT,mBAAO,KAAK,OAAZ;AACH;;;;;;QA0FG,Q,GAAA,Q;kBACO,Q","file":"SignTool.js","sourcesContent":["'use strict';\n\nimport jwt from \"jsonwebtoken\";\nimport Preconditions from \"../Preconditions\";\nimport Utility from '../Utility';\nimport CoreObject from '../CoreObject'\n\nclass SignTool extends CoreObject {\n\n    constructor(options) {\n        let secret = Utility.take(options, 'secret', {\n            required: true,\n            type: 'string'\n        });\n\n        super(...arguments);\n\n        this._secret = secret;\n    }\n\n    /**\n     * @type {String}\n     * @returns {String}\n     * @private\n     */\n    get secret() {\n        return this._secret;\n    }\n\n    /**\n     *\n     * @param {String} token\n     * @param {Object} options\n     * @param {boolean|String} [options.issuer]\n     * @param {boolean|String} [options.subject]\n     * @param {boolean|String} [options.audience]\n     * @static\n     */\n    containsHeaders(token, options) {\n        // Will crash if not valid\n\n        let decodedObject = jwt.decode(token, {\n            complete: true\n        });\n\n        // let result = decodedObject.payload;\n        let payload = decodedObject.payload;\n\n        {\n            let requiresAudience = Utility.isTrue(options.audience);\n            let hasAudience = !Utility.isBlank(payload.aud);\n\n            if (requiresAudience && !hasAudience) {\n                return null;\n            }\n        }\n\n        {\n            let requiresIssuer = Utility.isTrue(options.issuer);\n            let hasIssuer = !Utility.isBlank(payload.iss);\n\n            if (requiresIssuer && !hasIssuer) {\n                return null;\n            }\n        }\n\n        {\n            let requiredSubject = Utility.isTrue(options.subject);\n            let hasSubject = !Utility.isBlank(payload.sub);\n\n            if (requiredSubject && !hasSubject) {\n                return null;\n            }\n        }\n\n        // TODO: verify the signature somehow?\n\n        return true;\n    }\n\n    /**\n     *\n     * @param {String} token\n     * @param {Object} options\n     * @param {String} [options.issuer]\n     * @param {String} [options.subject]\n     * @param {String} [options.audience]\n     * @static\n     */\n    read(token, options) {\n        let secret = this.secret;\n\n        // Will crash if not valid\n        jwt.verify(token, secret, options);\n\n        return jwt.decode(token, secret);\n    }\n\n    /**\n     *\n     * @param {Object} object\n     * @param {Object} options\n     * @param {String} [options.issuer]\n     * @param {String} [options.subject]\n     * @param {String} [options.audience]\n     * @return {String} token\n     * @static\n     */\n    write(object, options) {\n        let secret = this.secret;\n\n        Preconditions.shouldBeObject(object);\n\n        return jwt.sign(object, secret, options);\n    }\n}\n\nexport {SignTool};\nexport default SignTool;"]}