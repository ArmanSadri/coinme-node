{"version":3,"sources":["../../../src/js/data/SignTool.js"],"names":[],"mappings":"AAAA;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEM,Q;;;AAEF,sBAAY,OAAZ,EAAqB;AAAA;;AACjB,YAAI,SAAS,kBAAQ,IAAR,CAAa,OAAb,EAAsB,QAAtB,EAAgC;AACzC,sBAAU,IAD+B;AAEzC,kBAAM;AAFmC,SAAhC,CAAb;;AADiB,iGAMR,SANQ;;AAQjB,cAAK,OAAL,GAAe,MAAf;AARiB;AASpB;;;;;;;;;;;;;;;;;;;;;;wCAoBe,K,EAAO,O,EAAS;;;AAG5B,gBAAI,gBAAgB,uBAAI,MAAJ,CAAW,KAAX,EAAkB;AAClC,0BAAU;AADwB,aAAlB,CAApB;;;AAKA,gBAAI,UAAU,cAAc,OAA5B;;AAEA;AACI,oBAAI,mBAAmB,kBAAQ,MAAR,CAAe,QAAQ,QAAvB,CAAvB;AACA,oBAAI,cAAc,CAAC,kBAAQ,OAAR,CAAgB,QAAQ,GAAxB,CAAnB;;AAEA,oBAAI,oBAAoB,CAAC,WAAzB,EAAsC;AAClC,2BAAO,IAAP;AACH;AACJ;;AAED;AACI,oBAAI,iBAAiB,kBAAQ,MAAR,CAAe,QAAQ,MAAvB,CAArB;AACA,oBAAI,YAAY,CAAC,kBAAQ,OAAR,CAAgB,QAAQ,GAAxB,CAAjB;;AAEA,oBAAI,kBAAkB,CAAC,SAAvB,EAAkC;AAC9B,2BAAO,IAAP;AACH;AACJ;;AAED;AACI,oBAAI,kBAAkB,kBAAQ,MAAR,CAAe,QAAQ,OAAvB,CAAtB;AACA,oBAAI,aAAa,CAAC,kBAAQ,OAAR,CAAgB,QAAQ,GAAxB,CAAlB;;AAEA,oBAAI,mBAAmB,CAAC,UAAxB,EAAoC;AAChC,2BAAO,IAAP;AACH;AACJ;;;;AAID,mBAAO,IAAP;AACH;;;;;;;;;;;;;;6BAWI,K,EAAO,O,EAAS;AACjB,gBAAI,SAAS,KAAK,MAAlB;;;AAGA,mCAAI,MAAJ,CAAW,KAAX,EAAkB,MAAlB,EAA0B,OAA1B;;AAEA,mBAAO,uBAAI,MAAJ,CAAW,KAAX,EAAkB,MAAlB,CAAP;AACH;;;;;;;;;;;;;;;8BAYK,M,EAAQ,O,EAAS;AACnB,gBAAI,SAAS,KAAK,MAAlB;;AAEA,oCAAc,cAAd,CAA6B,MAA7B;;AAEA,mBAAO,uBAAI,IAAJ,CAAS,MAAT,EAAiB,MAAjB,EAAyB,OAAzB,CAAP;AACH;;;4BAzFY;AACT,mBAAO,KAAK,OAAZ;AACH;;;;;;QA0FG,Q,GAAA,Q;kBACO,Q","file":"SignTool.js","sourcesContent":["'use strict';\r\n\r\nimport jwt from \"jsonwebtoken\";\r\nimport Preconditions from \"../Preconditions\";\r\nimport Utility from '../Utility';\r\nimport CoreObject from '../CoreObject'\r\n\r\nclass SignTool extends CoreObject {\r\n\r\n    constructor(options) {\r\n        let secret = Utility.take(options, 'secret', {\r\n            required: true,\r\n            type: 'string'\r\n        });\r\n\r\n        super(...arguments);\r\n\r\n        this._secret = secret;\r\n    }\r\n\r\n    /**\r\n     * @type {String}\r\n     * @returns {String}\r\n     * @private\r\n     */\r\n    get secret() {\r\n        return this._secret;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {String} token\r\n     * @param {Object} options\r\n     * @param {boolean|String} [options.issuer]\r\n     * @param {boolean|String} [options.subject]\r\n     * @param {boolean|String} [options.audience]\r\n     * @static\r\n     */\r\n    containsHeaders(token, options) {\r\n        // Will crash if not valid\r\n\r\n        let decodedObject = jwt.decode(token, {\r\n            complete: true\r\n        });\r\n\r\n        // let result = decodedObject.payload;\r\n        let payload = decodedObject.payload;\r\n\r\n        {\r\n            let requiresAudience = Utility.isTrue(options.audience);\r\n            let hasAudience = !Utility.isBlank(payload.aud);\r\n\r\n            if (requiresAudience && !hasAudience) {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        {\r\n            let requiresIssuer = Utility.isTrue(options.issuer);\r\n            let hasIssuer = !Utility.isBlank(payload.iss);\r\n\r\n            if (requiresIssuer && !hasIssuer) {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        {\r\n            let requiredSubject = Utility.isTrue(options.subject);\r\n            let hasSubject = !Utility.isBlank(payload.sub);\r\n\r\n            if (requiredSubject && !hasSubject) {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        // TODO: verify the signature somehow?\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {String} token\r\n     * @param {Object} options\r\n     * @param {String} [options.issuer]\r\n     * @param {String} [options.subject]\r\n     * @param {String} [options.audience]\r\n     * @static\r\n     */\r\n    read(token, options) {\r\n        let secret = this.secret;\r\n\r\n        // Will crash if not valid\r\n        jwt.verify(token, secret, options);\r\n\r\n        return jwt.decode(token, secret);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Object} object\r\n     * @param {Object} options\r\n     * @param {String} [options.issuer]\r\n     * @param {String} [options.subject]\r\n     * @param {String} [options.audience]\r\n     * @return {String} token\r\n     * @static\r\n     */\r\n    write(object, options) {\r\n        let secret = this.secret;\r\n\r\n        Preconditions.shouldBeObject(object);\r\n\r\n        return jwt.sign(object, secret, options);\r\n    }\r\n}\r\n\r\nexport {SignTool};\r\nexport default SignTool;"]}