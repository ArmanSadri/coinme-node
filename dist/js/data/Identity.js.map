{"version":3,"sources":["../../../src/js/data/Identity.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;IASM,Q;;;;;;;;AAUF,sBAAY,OAAZ,EAAqB;AAAA;;AACjB,YAAI,gBAAJ;AACA,YAAI,aAAa,EAAjB;;AAEA,YAAI,kBAAQ,QAAR,CAAiB,OAAjB,CAAJ,EAA+B;AAC3B,sBAAU,kBAAQ,IAAR,CAAa,OAAb,EAAsB,SAAtB,CAAV;AACA,yBAAa,kBAAQ,IAAR,CAAa,OAAb,EAAsB,YAAtB,EAAoC,QAApC,CAAb;AACH,SAHD,MAGO;AACH,sBAAU,kBAAQ,0BAAR,CAAmC,OAAnC,EAA4C,UAA5C,CAAV;AACH;;AATgB,iGAWR,SAXQ;;AAajB,cAAK,QAAL,GAAgB,kBAAQ,gBAAR,CAAyB,OAAzB,EAAkC,qBAAlC,CAAhB;AACA,cAAK,WAAL,GAAmB,UAAnB,C;AAdiB;AAepB;;;;;;;;;;mCAmBU;;AAEP,gBAAI,MAAM,KAAK,OAAL,CAAa,GAAb,CAAiB,KAAjB,EAAV;;AAEA,6BAAO,IAAP,CAAY,KAAK,UAAL,IAAmB,EAA/B,EAAmC,UAAS,KAAT,EAAgB,GAAhB,EAAqB;AACpD,sBAAM,IAAI,SAAJ,CAAc,GAAd,EAAmB,KAAnB,CAAN;AACH,aAFD;;AAIA,mBAAO,IAAI,QAAJ,EAAP;AACH;;;iCAEQ;AACL,8FAAoB;AAChB,yBAAS,KAAK,QAAL;AADO,aAApB;AAGH;;;4BA5Ba;AACV,mBAAO,KAAK,QAAZ;AACH;;;;;;;;;;4BAOgB;AACb,mBAAO,KAAK,WAAZ;AACH;;;;;;QAoBG,Q,GAAA,Q;kBACO,Q","file":"Identity.js","sourcesContent":["import CoreObject from \"../CoreObject\";\nimport Address from \"../Address\";\nimport Utility from \"../Utility\";\nimport URI from \"urijs\";\nimport Lodash from \"lodash\";\n\n/**\n * This class represents a User pointer.\n *\n * One user could possibly have more than 1 identity associated with them.\n *\n * It is best to use a Natural Key for an Identity\n */\nclass Identity extends CoreObject {\n\n    _address;\n\n    _attributes;\n\n    /**\n     *\n     * @param {String|URI|{address:Address, attributes?:Object}} options\n     */\n    constructor(options) {\n        let address;\n        let attributes = {};\n\n        if (Utility.isObject(options)) {\n            address = Utility.take(options, 'address');\n            attributes = Utility.take(options, 'attributes', 'object');\n        } else {\n            address = Address.toAddressWithDefaultScheme(options, 'identity');\n        }\n\n        super(...arguments);\n\n        this._address = Address.shouldBeInstance(address, 'address is required');\n        this._attributes = attributes; // this is optional\n    }\n\n    /**\n     *\n     * @return {Address}\n     */\n    get address() {\n        return this._address;\n    }\n\n    /**\n     * Optional attributes\n     *\n     * @return {Object}\n     */\n    get attributes() {\n        return this._attributes;\n    }\n\n    toString() {\n        /** @type {URI} */\n        var uri = this.address.uri.clone();\n\n        Lodash.each(this.attributes || {}, function(value, key) {\n            uri = uri.addSearch(key, value);\n        });\n\n        return uri.toString();\n    }\n\n    toJson() {\n        return super.toJson({\n            address: this.toString()\n        });\n    }\n}\n\nexport {Identity};\nexport default Identity;"]}