{"version":3,"sources":["../../../src/js/data/Identity.js"],"names":["Identity","options","address","attributes","isObject","take","toAddressWithDefaultScheme","arguments","_address","shouldBeInstance","_attributes","uri","clone","each","value","key","addSearch","toString"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA;;;;;;;IAOMA,Q;;;AAMF;AACA;;;;AAIA,sBAAYC,OAAZ,EAAqB;AAAA;;AACjB,YAAIC,gBAAJ;AACA,YAAIC,aAAa,EAAjB;;AAEA,YAAI,kBAAQC,QAAR,CAAiBH,OAAjB,CAAJ,EAA+B;AAC3BC,sBAAU,kBAAQG,IAAR,CAAaJ,OAAb,EAAsB,SAAtB,CAAV;AACAE,yBAAa,kBAAQE,IAAR,CAAaJ,OAAb,EAAsB,YAAtB,EAAoC,QAApC,CAAb;AACH,SAHD,MAGO;AACHC,sBAAU,kBAAQI,0BAAR,CAAmCL,OAAnC,EAA4C,UAA5C,CAAV;AACH;;AATgB,yHAWRM,SAXQ;;AAajB,cAAKC,QAAL,GAAgB,kBAAQC,gBAAR,CAAyBP,OAAzB,EAAkC,qBAAlC,CAAhB;AACA,cAAKQ,WAAL,GAAmBP,UAAnB,CAdiB,CAcc;AAdd;AAepB;AACD;;AAEA;AACA;;;;;;;;;AAgBA;;mCAEW;AACP;AACA,gBAAIQ,MAAM,KAAKT,OAAL,CAAaS,GAAb,CAAiBC,KAAjB,EAAV;;AAEA,6BAAOC,IAAP,CAAY,KAAKV,UAAL,IAAmB,EAA/B,EAAmC,UAASW,KAAT,EAAgBC,GAAhB,EAAqB;AACpDJ,sBAAMA,IAAIK,SAAJ,CAAcD,GAAd,EAAmBD,KAAnB,CAAN;AACH,aAFD;;AAIA,mBAAOH,IAAIM,QAAJ,EAAP;AACH;;;iCAEQ;AACL,8HAAoB;AAChBf,yBAAS,KAAKe,QAAL;AADO,aAApB;AAGH;;;4BA7Ba;AACV,mBAAO,KAAKT,QAAZ;AACH;;AAED;;;;;;;;4BAKiB;AACb,mBAAO,KAAKE,WAAZ;AACH;;;;;;QAqBGV,Q,GAAAA,Q;kBACOA,Q","file":"Identity.js","sourcesContent":["import CoreObject from \"../CoreObject\";\nimport Address from \"../Address\";\nimport Utility from \"../Utility\";\nimport URI from \"urijs\";\nimport Lodash from \"lodash\";\n\n/**\n * This class represents a User pointer.\n *\n * One user could possibly have more than 1 identity associated with them.\n *\n * It is best to use a Natural Key for an Identity\n */\nclass Identity extends CoreObject {\n\n    _address;\n\n    _attributes;\n\n    //region constructor\n    /**\n     *\n     * @param {String|URI|{address:Address, attributes?:Object}} options\n     */\n    constructor(options) {\n        let address;\n        let attributes = {};\n\n        if (Utility.isObject(options)) {\n            address = Utility.take(options, 'address');\n            attributes = Utility.take(options, 'attributes', 'object');\n        } else {\n            address = Address.toAddressWithDefaultScheme(options, 'identity');\n        }\n\n        super(...arguments);\n\n        this._address = Address.shouldBeInstance(address, 'address is required');\n        this._attributes = attributes; // this is optional\n    }\n    //endregion\n\n    //region properties\n    /**\n     *\n     * @return {Address}\n     */\n    get address() {\n        return this._address;\n    }\n\n    /**\n     * Optional attributes\n     *\n     * @return {Object}\n     */\n    get attributes() {\n        return this._attributes;\n    }\n    //endregion\n\n    toString() {\n        /** @type {URI} */\n        var uri = this.address.uri.clone();\n\n        Lodash.each(this.attributes || {}, function(value, key) {\n            uri = uri.addSearch(key, value);\n        });\n\n        return uri.toString();\n    }\n\n    toJson() {\n        return super.toJson({\n            address: this.toString()\n        });\n    }\n}\n\nexport {Identity};\nexport default Identity;"]}