{"version":3,"sources":["../../../src/js/data/Converter.js"],"names":["ConverterAdapter","options","converter","take","outputClass","inputClass","arguments","_converter","_outputClass","_inputClass","instanceOrClass","supports","instance","shouldBeClass","getClass","convert","Converter","clazz","fail","toAdapter","toFunction"],"mappings":"AAAA;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,gB;;;AAEF;;;;;;AAMA,8BAAYC,OAAZ,EAAqB;AAAA;;AACjB,YAAIC,YAAY,kBAAQC,IAAR,CAAaF,OAAb,EAAsB,WAAtB,EAAmC,IAAnC,CAAhB;AACA,YAAIG,cAAc,kBAAQD,IAAR,CAAaF,OAAb,EAAsB,aAAtB,EAAqC,IAArC,CAAlB;AACA,YAAII,aAAa,kBAAQF,IAAR,CAAaF,OAAb,EAAsB,YAAtB,EAAoC,KAApC,CAAjB;;AAIA;;;;AAPiB,yIAKRK,SALQ;;AAWjB,cAAKC,UAAL,GAAkBL,SAAlB;AACA,cAAKM,YAAL,GAAoBJ,WAApB;AACA,cAAKK,WAAL,GAAmBJ,UAAnB;AAbiB;AAcpB;;AAED;;AAEA;;;;;;;;;AAsBA;;AAEA;;;;;iCAKSK,e,EAAiB;AACtB,mBAAO,KAAKR,SAAL,CAAeS,QAAf,CAAwBD,eAAxB,EAAyC,KAAKN,WAA9C,CAAP;AACH;;AAED;;;;;;;;8BAKMQ,Q,EAAU;AACZ,gBAAI,KAAKP,UAAT,EAAqB;AACjB,wCAAcQ,aAAd,CAA4B,kBAAQC,QAAR,CAAiBF,QAAjB,CAA5B,EAAwD,KAAKP,UAA7D;AACH;;AAED,mBAAO,KAAKH,SAAL,CAAea,OAAf,CAAuBH,QAAvB,EAAiC,KAAKR,WAAtC,CAAP;AACH;;;4BAxCiB;AACd,mBAAO,KAAKI,YAAZ;AACH;;AAED;;;;;;;4BAIiB;AACb,mBAAO,KAAKC,WAAZ;AACH;;AAED;;;;;;4BAGgB;AACZ,mBAAO,KAAKF,UAAZ;AACH;;;;;;IA2BCS,S;;;;;;;;;;;;;AAEF;;;;;;;;;iCASSN,e,EAAiBO,K,EAAO;AAC7B,kBAAM,mCAAN;AACH;;;sCAEaL,Q,EAAUK,K,EAAO;AAC3B,gBAAI,CAAC,KAAKN,QAAL,CAAcC,QAAd,EAAwBK,KAAxB,CAAL,EAAqC;AACjC,wCAAcC,IAAd,CAAmB,IAAnB,EAAyB,KAAzB,wBAAoDN,QAApD,UAAiEK,KAAjE;AACH;AACJ;;AAED;;;;;;;;gCAKQL,Q,EAAUK,K,EAAO;AACrB,kBAAM,mCAAN;AACH;;AAED;;;;;;;;;;kCAOUhB,O,EAAS;AACf,mBAAO,IAAID,gBAAJ,CAAqB;AACxBE,2BAAW,IADa;AAExBG,4BAAYJ,QAAQI,UAFI;AAGxBD,6BAAaH,QAAQG;AAHG,aAArB,CAAP;AAKH;;AAED;;;;;;;;;;mCAOWH,O,EAAS;AAChB,mBAAO,KAAKkB,SAAL,CAAelB,OAAf,EAAwBmB,UAAxB,EAAP;AACH;;;;;;QAIGJ,S,GAAAA,S;kBACOA,S","file":"Converter.js","sourcesContent":["'use strict';\n\nimport CoreObject from \"../CoreObject\";\nimport NotImplementedError from \"../errors/NotImplementedError\";\nimport Preconditions from \"../Preconditions\";\nimport Adapter from \"./Adapter\";\nimport Utility from '../Utility';\n\nclass ConverterAdapter extends Adapter {\n\n    /**\n     *\n     * @param {Object} options\n     * @param {Converter} options.converter\n     * @param {Class|Class<CoreObject>|*} options.outputClass\n     */\n    constructor(options) {\n        let converter = Utility.take(options, 'converter', true);\n        let outputClass = Utility.take(options, 'outputClass', true);\n        let inputClass = Utility.take(options, 'inputClass', false);\n\n        super(...arguments);\n\n        /**\n         * @type {Converter}\n         * @private\n         */\n        this._converter = converter;\n        this._outputClass = outputClass;\n        this._inputClass = inputClass;\n    }\n\n    //region Properties\n\n    /**\n     *\n     * @return {Class<CoreObject>|Class}\n     */\n    get outputClass() {\n        return this._outputClass;\n    }\n\n    /**\n     *\n     * @return {Class<CoreObject>|Class}\n     */\n    get inputClass() {\n        return this._inputClass;\n    }\n\n    /**\n     * @return {Converter}\n     */\n    get converter() {\n        return this._converter;\n    }\n    //endregion\n\n    /**\n     *\n     * @param {CoreObject|Class<CoreObject>} instanceOrClass\n     * @return {boolean}\n     */\n    supports(instanceOrClass) {\n        return this.converter.supports(instanceOrClass, this.outputClass);\n    }\n\n    /**\n     *\n     * @param {CoreObject|*} instance\n     * @return {CoreObject|*}\n     */\n    adapt(instance) {\n        if (this.inputClass) {\n            Preconditions.shouldBeClass(Utility.getClass(instance), this.inputClass);\n        }\n\n        return this.converter.convert(instance, this.outputClass);\n    }\n\n}\n\nclass Converter extends CoreObject {\n\n    /**\n     * Determines if this Converter instance can convert between the two currencies.\n     *\n     * NOTE: The direction matters.\n     *\n     * @param {CoreObject|Class<CoreObject>|*} instanceOrClass\n     * @param {Class<CoreObject>|*} clazz\n     * @returns {boolean}\n     */\n    supports(instanceOrClass, clazz) {\n        throw new NotImplementedError();\n    }\n\n    shouldSupport(instance, clazz) {\n        if (!this.supports(instance, clazz)) {\n            Preconditions.fail(true, false, `does not support ${instance}->${clazz}`);\n        }\n    }\n\n    /**\n     * @param {CoreObject|*} instance\n     * @param {Class<CoreObject>|Class|*} clazz\n     * @return {CoreObject|*}\n     */\n    convert(instance, clazz) {\n        throw new NotImplementedError();\n    }\n\n    /**\n     *\n     * @param {Class<CoreObject>} options\n     * @param {Class<CoreObject>} [options.inputClass]\n     * @param {Class<CoreObject>} [options.outputClass]\n     * @return {Adapter}\n     */\n    toAdapter(options) {\n        return new ConverterAdapter({\n            converter: this,\n            inputClass: options.inputClass,\n            outputClass: options.outputClass\n        });\n    }\n\n    /**\n     *\n     * @param {Class|Class<CoreObject>} options\n     * @param {Class|Class<CoreObject>} [options.inputClass]\n     * @param {Class|Class<CoreObject>} [options.outputClass]\n     * @return {Function}\n     */\n    toFunction(options) {\n        return this.toAdapter(options).toFunction();\n    }\n\n}\n\nexport {Converter};\nexport default Converter;"]}