{"version":3,"sources":["../../../src/js/data/Converter.js"],"names":[],"mappings":"AAAA;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEM,gB;;;;;;;;;;AAQF,8BAAY,OAAZ,EAAqB;AAAA;;AACjB,YAAI,YAAY,kBAAQ,IAAR,CAAa,OAAb,EAAsB,WAAtB,EAAmC,IAAnC,CAAhB;AACA,YAAI,cAAc,kBAAQ,IAAR,CAAa,OAAb,EAAsB,aAAtB,EAAqC,IAArC,CAAlB;AACA,YAAI,aAAa,kBAAQ,IAAR,CAAa,OAAb,EAAsB,YAAtB,EAAoC,KAApC,CAAjB;;;;;;;AAHiB,yGAKR,SALQ;;AAWjB,cAAK,UAAL,GAAkB,SAAlB;AACA,cAAK,YAAL,GAAoB,WAApB;AACA,cAAK,WAAL,GAAmB,UAAnB;AAbiB;AAcpB;;;;;;;;;;;;;;;;;;;;iCAiCQ,e,EAAiB;AACtB,mBAAO,KAAK,SAAL,CAAe,QAAf,CAAwB,eAAxB,EAAyC,KAAK,WAA9C,CAAP;AACH;;;;;;;;;;8BAOK,Q,EAAU;AACZ,gBAAI,KAAK,UAAT,EAAqB;AACjB,wCAAc,aAAd,CAA4B,kBAAQ,QAAR,CAAiB,QAAjB,CAA5B,EAAwD,KAAK,UAA7D;AACH;;AAED,mBAAO,KAAK,SAAL,CAAe,OAAf,CAAuB,QAAvB,EAAiC,KAAK,WAAtC,CAAP;AACH;;;4BAxCiB;AACd,mBAAO,KAAK,YAAZ;AACH;;;;;;;;;4BAMgB;AACb,mBAAO,KAAK,WAAZ;AACH;;;;;;;;4BAKe;AACZ,mBAAO,KAAK,UAAZ;AACH;;;;;;IA2BC,S;;;;;;;;;;;;;;;;;;;;;;iCAWO,e,EAAiB,K,EAAO;AAC7B,kBAAM,mCAAN;AACH;;;sCAEa,Q,EAAU,K,EAAO;AAC3B,gBAAI,CAAC,KAAK,QAAL,CAAc,QAAd,EAAwB,KAAxB,CAAL,EAAqC;AACjC,wCAAc,IAAd,CAAmB,IAAnB,EAAyB,KAAzB,wBAAoD,QAApD,UAAiE,KAAjE;AACH;AACJ;;;;;;;;;;gCAOO,Q,EAAU,K,EAAO;AACrB,kBAAM,mCAAN;AACH;;;;;;;;;;;;kCASS,O,EAAS;AACf,mBAAO,IAAI,gBAAJ,CAAqB;AACxB,2BAAW,IADa;AAExB,4BAAY,QAAQ,UAFI;AAGxB,6BAAa,QAAQ;AAHG,aAArB,CAAP;AAKH;;;;;;;;;;;;mCASU,O,EAAS;AAChB,mBAAO,KAAK,SAAL,CAAe,OAAf,EAAwB,UAAxB,EAAP;AACH;;;;;;QAIG,S,GAAA,S;kBACO,S","file":"Converter.js","sourcesContent":["'use strict';\n\nimport CoreObject from \"../CoreObject\";\nimport NotImplementedError from \"../errors/NotImplementedError\";\nimport Preconditions from \"../Preconditions\";\nimport Adapter from \"./Adapter\";\nimport Utility from '../Utility';\n\nclass ConverterAdapter extends Adapter {\n\n    /**\n     *\n     * @param {Object} options\n     * @param {Converter} options.converter\n     * @param {Class|Class<CoreObject>|*} options.outputClass\n     */\n    constructor(options) {\n        let converter = Utility.take(options, 'converter', true);\n        let outputClass = Utility.take(options, 'outputClass', true);\n        let inputClass = Utility.take(options, 'inputClass', false);\n\n        super(...arguments);\n\n        /**\n         * @type {Converter}\n         * @private\n         */\n        this._converter = converter;\n        this._outputClass = outputClass;\n        this._inputClass = inputClass;\n    }\n\n    //region Properties\n\n    /**\n     *\n     * @return {Class<CoreObject>|Class}\n     */\n    get outputClass() {\n        return this._outputClass;\n    }\n\n    /**\n     *\n     * @return {Class<CoreObject>|Class}\n     */\n    get inputClass() {\n        return this._inputClass;\n    }\n\n    /**\n     * @return {Converter}\n     */\n    get converter() {\n        return this._converter;\n    }\n    //endregion\n\n    /**\n     *\n     * @param {CoreObject|Class<CoreObject>} instanceOrClass\n     * @return {boolean}\n     */\n    supports(instanceOrClass) {\n        return this.converter.supports(instanceOrClass, this.outputClass);\n    }\n\n    /**\n     *\n     * @param {CoreObject|*} instance\n     * @return {CoreObject|*}\n     */\n    adapt(instance) {\n        if (this.inputClass) {\n            Preconditions.shouldBeClass(Utility.getClass(instance), this.inputClass);\n        }\n\n        return this.converter.convert(instance, this.outputClass);\n    }\n\n}\n\nclass Converter extends CoreObject {\n\n    /**\n     * Determines if this Converter instance can convert between the two currencies.\n     *\n     * NOTE: The direction matters.\n     *\n     * @param {CoreObject|Class<CoreObject>|*} instanceOrClass\n     * @param {Class<CoreObject>|*} clazz\n     * @returns {boolean}\n     */\n    supports(instanceOrClass, clazz) {\n        throw new NotImplementedError();\n    }\n\n    shouldSupport(instance, clazz) {\n        if (!this.supports(instance, clazz)) {\n            Preconditions.fail(true, false, `does not support ${instance}->${clazz}`);\n        }\n    }\n\n    /**\n     * @param {CoreObject|*} instance\n     * @param {Class<CoreObject>|Class|*} clazz\n     * @return {CoreObject|*}\n     */\n    convert(instance, clazz) {\n        throw new NotImplementedError();\n    }\n\n    /**\n     *\n     * @param {Class<CoreObject>} options\n     * @param {Class<CoreObject>} [options.inputClass]\n     * @param {Class<CoreObject>} [options.outputClass]\n     * @return {Adapter}\n     */\n    toAdapter(options) {\n        return new ConverterAdapter({\n            converter: this,\n            inputClass: options.inputClass,\n            outputClass: options.outputClass\n        });\n    }\n\n    /**\n     *\n     * @param {Class|Class<CoreObject>} options\n     * @param {Class|Class<CoreObject>} [options.inputClass]\n     * @param {Class|Class<CoreObject>} [options.outputClass]\n     * @return {Function}\n     */\n    toFunction(options) {\n        return this.toAdapter(options).toFunction();\n    }\n\n}\n\nexport {Converter};\nexport default Converter;"]}