{"version":3,"sources":["../../../src/js/data/CertificateBundle.js"],"names":["Certificate","options","uri","take","required","adapter","value","getPath","resourceLoader","directoryPath","clone","filename","path","cache","arguments","_uri","_path","toString","_name","_resourceLoader","scope","_startedLatch","resolve","reject","promise","then","startedLatch","open","_value","finally","_started","load","shouldBeTrue","isFulfilled","shouldBeFalsey","isCancelled","isRejected","isResolved","CertificateBundle","isString","certificate","key","authority","_authority","_key","_certificate","fromFolder"],"mappings":"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","file":"CertificateBundle.js","sourcesContent":["\"use strict\";\r\n\r\nimport fs from \"fs\";\r\nimport Preconditions from \"../Preconditions\";\r\nimport Utility from \"../Utility\";\r\nimport CoreObject from \"../CoreObject\";\r\nimport URI from \"urijs\";\r\nimport osenv from \"osenv\";\r\nimport {ResourceLoader, FileResourceLoader, CachedResourceLoader} from \"./\";\r\nimport {LocalFileCache} from \"../cache\";\r\nimport Promise from \"bluebird\";\r\n\r\n/**\r\n * @class\r\n */\r\nclass Certificate extends CoreObject {\r\n\r\n    _started;\r\n    _startedLatch;\r\n\r\n    /**\r\n     *\r\n     * @param {Object} options\r\n     * @param {String|URI} options.path\r\n     */\r\n    constructor(options) {\r\n        //region let uri\r\n        /** @type {URI} */\r\n        let uri = Utility.take(options, 'path', {\r\n            required: true,\r\n            adapter(value) {\r\n                return Utility.getPath(value);\r\n            }\r\n        });\r\n        //endregion\r\n\r\n        //region let resourceLoader\r\n        /** @type {ResourceLoader} */\r\n        let resourceLoader = Utility.take(options, 'resourceLoader', {\r\n            adapter: function(value) {\r\n                if (!value) {\r\n                    let directoryPath = uri.clone().filename('');\r\n\r\n                    value = new CachedResourceLoader({\r\n                        resourceLoader: new FileResourceLoader({\r\n                            path: directoryPath,\r\n                            cache: new LocalFileCache({\r\n                                path: directoryPath\r\n                            })\r\n                        })\r\n                    });\r\n                }\r\n\r\n                return value;\r\n            }\r\n        });\r\n        //endregion\r\n\r\n        super(...arguments);\r\n\r\n        this._uri = uri;\r\n        this._path = this.uri.toString();\r\n        this._name = this.uri.filename();\r\n        this._resourceLoader = resourceLoader;\r\n\r\n        //region startedLatch\r\n        let scope = this;\r\n\r\n        this._startedLatch = new Promise((resolve, reject) => {\r\n            let promise = Promise.resolve();\r\n\r\n            promise = promise.then(() => resourceLoader.startedLatch);\r\n\r\n            promise = promise.then(() => {\r\n                return this\r\n                    .open()\r\n                    .then((value) => {\r\n                        scope._value = value;\r\n                    });\r\n            });\r\n\r\n            resolve(promise);\r\n        });\r\n\r\n        this._startedLatch.finally(() => scope._started = true);\r\n        //endregion\r\n    }\r\n\r\n    //region getters/setters\r\n    /**\r\n     * @property\r\n     * @readonly\r\n     * @type {Boolean}\r\n     * @return {Boolean}\r\n     */\r\n    get started() {\r\n        return this._started;\r\n    }\r\n    /**\r\n     * @property\r\n     * @readonly\r\n     * @type {Promise}\r\n     * @return {Promise}\r\n     */\r\n    get startedLatch() {\r\n        return this._startedLatch;\r\n    }\r\n\r\n    /**\r\n     * @property\r\n     * @readonly\r\n     * @type {ResourceLoader}\r\n     * @return {ResourceLoader}\r\n     */\r\n    get resourceLoader() {\r\n        return this._resourceLoader;\r\n    }\r\n\r\n    /**\r\n     * @readonly\r\n     * @property\r\n     * @type {URI}\r\n     * @return {URI}\r\n     */\r\n    get uri() {\r\n        return this._uri;\r\n    }\r\n\r\n    /**\r\n     * @readonly\r\n     * @property\r\n     * @type {String}\r\n     * @return {String}\r\n     */\r\n    get path() {\r\n        return this._path;\r\n    }\r\n\r\n    /**\r\n     * @readonly\r\n     * @property\r\n     * @type {String}\r\n     * @return {String}\r\n     */\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    /**\r\n     * @readonly\r\n     * @property\r\n     * @throws {Error}\r\n     */\r\n    get value() {\r\n        Preconditions.shouldBeTrue(this._started, 'is not started yet');\r\n        Preconditions.shouldBeTrue(this.startedLatch.isFulfilled(), 'must be started');\r\n        Preconditions.shouldBeFalsey(this.startedLatch.isCancelled(), 'must be started');\r\n        Preconditions.shouldBeFalsey(this.startedLatch.isRejected(), 'must not be rejected');\r\n        Preconditions.shouldBeTrue(this.startedLatch.isResolved(), 'must be resolved');\r\n\r\n        return this._value;\r\n    }\r\n    //endregion\r\n\r\n    /**\r\n     * @return {Buffer}\r\n     */\r\n    open() {\r\n        let scope = this;\r\n\r\n        return this.resourceLoader.load(this.path)\r\n            .then((value) => {\r\n                scope._value = value;\r\n\r\n                return value;\r\n            });\r\n    }\r\n}\r\n\r\n/**\r\n * System for bundling 3 keys together (key, cert, and ca)\r\n *\r\n * @class\r\n */\r\nclass CertificateBundle extends CoreObject {\r\n\r\n    /**\r\n     *\r\n     * @param {Object} options\r\n     * @param {Certificate} options.certificate\r\n     * @param {Certificate} options.key\r\n     * @param {Certificate} options.authority\r\n     */\r\n    constructor(options) {\r\n        function adapter(value) {\r\n            if (Utility.isString(value) || value instanceof URI) {\r\n                return new Certificate({path: value});\r\n            }\r\n\r\n            return value;\r\n        }\r\n\r\n        /** @type {Certificate} */\r\n        let certificate = Utility.take(options, 'certificate', {\r\n            required: true,\r\n            adapter: adapter\r\n        });\r\n\r\n        /** @type {Certificate} */\r\n        let key = Utility.take(options, 'key', {\r\n            required: true,\r\n            adapter: adapter\r\n        });\r\n\r\n        /** @type {Certificate} */\r\n        let authority = Utility.take(options, 'authority', {\r\n            required: true,\r\n            adapter: adapter\r\n        });\r\n\r\n        super(options);\r\n\r\n        this._authority = authority;\r\n        this._key = key;\r\n        this._certificate = certificate;\r\n\r\n        //region startedLatch\r\n        this._startedLatch = new Promise((resolve, reject) => {\r\n            let promise = Promise.resolve();\r\n\r\n            if (authority) {\r\n                promise = promise.then(() => authority.open())\r\n            }\r\n            if (key) {\r\n                promise = promise.then(() => key.open());\r\n            }\r\n\r\n            if (certificate) {\r\n                promise = promise.then(() => certificate.open());\r\n            }\r\n\r\n            resolve(promise);\r\n        });\r\n        //endregion\r\n    }\r\n\r\n    //region getters/setters\r\n    get startedLatch() {\r\n        return this._startedLatch;\r\n    }\r\n\r\n    /**\r\n     * @readonly\r\n     * @property\r\n     * @type {Certificate}\r\n     * @return {Certificate}\r\n     */\r\n    get certificate() {\r\n        return this._certificate;\r\n    }\r\n\r\n    /**\r\n     * @readonly\r\n     * @property\r\n     * @type {Certificate}\r\n     * @return {Certificate}\r\n     */\r\n    get key() {\r\n        return this._key;\r\n    }\r\n\r\n    /**\r\n     * @readonly\r\n     * @property\r\n     * @type {Certificate}\r\n     * @return {Certificate}\r\n     */\r\n    get authority() {\r\n        return this._authority;\r\n    }\r\n    //endregion\r\n\r\n    /**\r\n     * coinme-node-key.pem\r\n     * coinme-node-cert.pem\r\n     * coinme-wallet-ca-cert.pem\r\n     *\r\n     * @param {String} path example ~/.coinme-node\r\n     * @return {CertificateBundle}\r\n     */\r\n    static fromFolder(path) {\r\n        let uri = URI((Utility.getPath(path)).toString() + '/'); // fixes the bug when the folder has a leading dot.\r\n\r\n        return new CertificateBundle({\r\n            key: uri.filename('coinme-node-key.pem').clone(),\r\n            certificate: uri.filename('coinme-node-cert.pem').clone(),\r\n            authority: uri.filename('coinme-wallet-ca-cert.pem').clone()\r\n        });\r\n    }\r\n\r\n    static fromHome() {\r\n        return CertificateBundle.fromFolder('~/.coinme-node');\r\n    }\r\n}\r\n\r\nexport {Certificate};\r\nexport {CertificateBundle};\r\n\r\nexport default CertificateBundle;"]}