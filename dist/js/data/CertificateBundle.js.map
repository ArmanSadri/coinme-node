{"version":3,"sources":["../../../src/js/data/CertificateBundle.js"],"names":["Certificate","options","uri","take","required","adapter","value","getPath","resourceLoader","directoryPath","clone","filename","path","cache","arguments","_uri","_path","toString","_name","_resourceLoader","scope","_startedLatch","resolve","reject","promise","then","open","load","_value","isFulfilled","shouldBeTrue","_started","startedLatch","shouldBeFalsey","isCancelled","isRejected","isResolved","CertificateBundle","isString","certificate","key","authority","_authority","_key","_certificate","fromFolder"],"mappings":"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","file":"CertificateBundle.js","sourcesContent":["\"use strict\";\n\nimport fs from \"fs\";\nimport Preconditions from \"../Preconditions\";\nimport Utility from \"../Utility\";\nimport CoreObject from \"../CoreObject\";\nimport URI from \"urijs\";\nimport osenv from \"osenv\";\nimport {ResourceLoader, FileResourceLoader, CachedResourceLoader} from \"./\";\nimport {LocalFileCache} from \"../cache\";\nimport Promise from \"bluebird\";\n\n//region class Certificate extends CoreObject\n/**\n * @class\n */\nclass Certificate extends CoreObject {\n\n    /**\n     * @type {Promise|bluebird}\n     */\n    _startedLatch;\n\n    /**\n     *\n     * @param {Object} options\n     * @param {String|URI} options.path\n     */\n    constructor(options) {\n        //region let uri\n        /** @type {URI} */\n        let uri = Utility.take(options, 'path', {\n            required: true,\n            adapter(value) {\n                return Utility.getPath(value);\n            }\n        });\n        //endregion\n\n        //region let resourceLoader\n        /** @type {ResourceLoader} */\n        let resourceLoader = Utility.take(options, 'resourceLoader', {\n            adapter: function(value) {\n                if (!value) {\n                    let directoryPath = uri.clone().filename('');\n\n                    value = new CachedResourceLoader({\n                        resourceLoader: new FileResourceLoader({\n                            path: directoryPath,\n                            cache: new LocalFileCache({\n                                path: directoryPath\n                            })\n                        })\n                    });\n                }\n\n                return value;\n            }\n        });\n        //endregion\n\n        super(...arguments);\n\n        this._uri = uri;\n        this._path = this.uri.toString();\n        this._name = this.uri.filename();\n        this._resourceLoader = resourceLoader;\n\n        //region startedLatch\n        let scope = this;\n\n        this._startedLatch = new Promise((resolve, reject) => {\n            let promise = Promise.resolve();\n\n            promise = promise.then(() => this.open());\n\n            resolve(promise);\n        });\n        //endregion\n    }\n\n    //region getters/setters\n    /**\n     * @property\n     * @readonly\n     * @type {Boolean}\n     * @return {Boolean}\n     */\n    get started() {\n        return this._startedLatch.isFulfilled();\n    }\n    /**\n     * @property\n     * @readonly\n     * @type {Promise}\n     * @return {Promise}\n     */\n    get startedLatch() {\n        return this._startedLatch;\n    }\n\n    /**\n     * @property\n     * @readonly\n     * @type {ResourceLoader}\n     * @return {ResourceLoader}\n     */\n    get resourceLoader() {\n        return this._resourceLoader;\n    }\n\n    /**\n     * @readonly\n     * @property\n     * @type {URI}\n     * @return {URI}\n     */\n    get uri() {\n        return this._uri;\n    }\n\n    /**\n     * @readonly\n     * @property\n     * @type {String}\n     * @return {String}\n     */\n    get path() {\n        return this._path;\n    }\n\n    /**\n     * @readonly\n     * @property\n     * @type {String}\n     * @return {String}\n     */\n    get name() {\n        return this._name;\n    }\n\n    /**\n     * @readonly\n     * @property\n     * @throws {Error}\n     */\n    get value() {\n        Preconditions.shouldBeTrue(this._started, 'is not started yet');\n        Preconditions.shouldBeTrue(this.startedLatch.isFulfilled(), 'must be started');\n        Preconditions.shouldBeFalsey(this.startedLatch.isCancelled(), 'must be started');\n        Preconditions.shouldBeFalsey(this.startedLatch.isRejected(), 'must not be rejected');\n        Preconditions.shouldBeTrue(this.startedLatch.isResolved(), 'must be resolved');\n\n        return this._value;\n    }\n    //endregion\n\n    /**\n     * @return {Buffer}\n     */\n    open() {\n        let scope = this;\n\n        return this.resourceLoader.load(this.path)\n            .then((value) => {\n                scope._value = value;\n\n                return value;\n            });\n    }\n}\n//endregion\n\n//region class CertificateBundle extends CoreObject\n/**\n * System for bundling 3 keys together (key, cert, and ca)\n *\n * @class\n */\nclass CertificateBundle extends CoreObject {\n\n    /**\n     *\n     * @param {Object} options\n     * @param {Certificate} options.certificate\n     * @param {Certificate} options.key\n     * @param {Certificate} options.authority\n     */\n    constructor(options) {\n        function adapter(value) {\n            if (Utility.isString(value) || value instanceof URI) {\n                return new Certificate({path: value});\n            }\n\n            return value;\n        }\n\n        /** @type {Certificate} */\n        let certificate = Utility.take(options, 'certificate', {\n            required: true,\n            adapter: adapter\n        });\n\n        /** @type {Certificate} */\n        let key = Utility.take(options, 'key', {\n            required: true,\n            adapter: adapter\n        });\n\n        /** @type {Certificate} */\n        let authority = Utility.take(options, 'authority', {\n            required: true,\n            adapter: adapter\n        });\n\n        super(options);\n\n        this._authority = authority;\n        this._key = key;\n        this._certificate = certificate;\n\n        //region startedLatch\n        this._startedLatch = new Promise((resolve, reject) => {\n            let promise = Promise.resolve();\n\n            if (authority) {\n                promise = promise.then(() => authority.open())\n            }\n\n            if (key) {\n                promise = promise.then(() => key.open());\n            }\n\n            if (certificate) {\n                promise = promise.then(() => certificate.open());\n            }\n\n            resolve(promise);\n        });\n        //endregion\n    }\n\n    //region getters/setters\n    get startedLatch() {\n        return this._startedLatch;\n    }\n\n    /**\n     * @readonly\n     * @property\n     * @type {Certificate}\n     * @return {Certificate}\n     */\n    get certificate() {\n        return this._certificate;\n    }\n\n    /**\n     * @readonly\n     * @property\n     * @type {Certificate}\n     * @return {Certificate}\n     */\n    get key() {\n        return this._key;\n    }\n\n    /**\n     * @readonly\n     * @property\n     * @type {Certificate}\n     * @return {Certificate}\n     */\n    get authority() {\n        return this._authority;\n    }\n    //endregion\n\n    /**\n     * coinme-node-key.pem\n     * coinme-node-cert.pem\n     * coinme-wallet-ca-cert.pem\n     *\n     * @param {String} path example ~/.coinme-node\n     * @return {CertificateBundle}\n     */\n    static fromFolder(path) {\n        let uri = URI((Utility.getPath(path)).toString() + '/'); // fixes the bug when the folder has a leading dot.\n\n        return new CertificateBundle({\n            key: uri.filename('coinme-node-key.pem').clone(),\n            certificate: uri.filename('coinme-node-cert.pem').clone(),\n            authority: uri.filename('coinme-wallet-ca-cert.pem').clone()\n        });\n    }\n\n    static fromHome() {\n        return CertificateBundle.fromFolder('~/.coinme-node');\n    }\n}\n//endregion\n\nexport {Certificate};\nexport {CertificateBundle};\n\nexport default CertificateBundle;"]}