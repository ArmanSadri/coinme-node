{"version":3,"sources":["../../../src/js/data/Conversion.js"],"names":["Conversion","options","input","take","output","stopwatch","converter","requestor","arguments","_input","_output","_stopwatch","_converter","_requestor","isNullOrUndefined","valueOf"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,U;;;AAEF;;;;;;;;;AASA,wBAAYC,OAAZ,EAAqB;AAAA;;AACjB,YAAIC,QAAQ,kBAAQC,IAAR,CAAaF,OAAb,EAAsB,OAAtB,EAA+B,IAA/B,CAAZ;AACA,YAAIG,SAAS,kBAAQD,IAAR,CAAaF,OAAb,EAAsB,QAAtB,EAAgC,IAAhC,CAAb;;AAEA,YAAII,YAAY,kBAAQF,IAAR,CAAaF,OAAb,EAAsB,WAAtB,uBAA8C,IAA9C,CAAhB;AACA,YAAIK,YAAY,kBAAQH,IAAR,CAAaF,OAAb,EAAsB,WAAtB,uBAA8C,IAA9C,CAAhB;AACA,YAAIM,YAAY,kBAAQJ,IAAR,CAAaF,OAAb,EAAsB,WAAtB,CAAhB;;AANiB,6HAQRO,SARQ;;AAUjB,cAAKC,MAAL,GAAcP,KAAd;AACA,cAAKQ,OAAL,GAAeN,MAAf;;AAEA,cAAKO,UAAL,GAAkBN,SAAlB;AACA,cAAKO,UAAL,GAAkBN,SAAlB;AACA,cAAKO,UAAL,GAAkBN,SAAlB;AAfiB;AAgBpB;;AAED;;;;;;;;;;AAoCA;;;;kCAIU;AACN,gBAAI,kBAAQO,iBAAR,CAA0BV,MAA1B,CAAJ,EAAuC;AACnC,uBAAO,IAAP;AACH;;AAED,gBAAI,KAAKA,MAAL,CAAYW,OAAhB,EAAyB;AACrB,uBAAO,KAAKX,MAAL,CAAYW,OAAZ,EAAP;AACH,aAFD,MAEO;AACH,uBAAO,KAAKX,MAAZ;AACH;AACJ;;AAED;;;;;;mCAGW;AACP,2CAA6B,KAAKF,KAAlC,mBAAqD,KAAKE,MAA1D;AACH;;AAED;;;;;;;4BAvDgB;AACZ,mBAAO,KAAKO,UAAZ;AACH;;AAED;;;;;;4BAGgB;AACZ,mBAAO,KAAKE,UAAZ;AACH;;AAED;;;;;;4BAGY;AACR,mBAAO,KAAKJ,MAAZ;AACH;;AAED;;;;;;4BAGa;AACT,mBAAO,KAAKC,OAAZ;AACH;;AAED;;;;;;4BAGgB;AACZ,mBAAO,KAAKE,UAAZ;AACH;;;mCA6BiB;AACd,mBAAO,YAAP;AACH;;;;;;kBAIUZ,U","file":"Conversion.js","sourcesContent":["import CoreObject from \"../CoreObject\";\nimport Utility from \"../Utility\";\nimport Stopwatch from \"../Stopwatch\";\nimport Converter from \"./Converter\";\n\nclass Conversion extends CoreObject {\n\n    /**\n     *\n     * @param {Object} options\n     * @param {*} options.input\n     * @param {*} options.output\n     * @param {Number} options.duration\n     * @param {Stopwatch} options.stopwatch\n     * @param {Converter} options.converter\n     */\n    constructor(options) {\n        let input = Utility.take(options, 'input', true);\n        let output = Utility.take(options, 'output', true);\n\n        let stopwatch = Utility.take(options, 'stopwatch', Stopwatch, true);\n        let converter = Utility.take(options, 'converter', Converter, true);\n        let requestor = Utility.take(options, 'requestor');\n\n        super(...arguments);\n\n        this._input = input;\n        this._output = output;\n\n        this._stopwatch = stopwatch;\n        this._converter = converter;\n        this._requestor = requestor;\n    }\n\n    /**\n     *\n     * @return {Stopwatch}\n     */\n    get stopwatch() {\n        return this._stopwatch;\n    }\n\n    /**\n     * @returns {*|undefined}\n     */\n    get requestor() {\n        return this._requestor;\n    }\n\n    /**\n     * @returns {*}\n     */\n    get input() {\n        return this._input;\n    }\n\n    /**\n     * @returns {*}\n     */\n    get output() {\n        return this._output;\n    }\n\n    /**\n     * @returns {Converter}\n     */\n    get converter() {\n        return this._converter;\n    }\n\n    /**\n     *\n     * @return {*}\n     */\n    valueOf() {\n        if (Utility.isNullOrUndefined(output)) {\n            return null;\n        }\n\n        if (this.output.valueOf) {\n            return this.output.valueOf();\n        } else {\n            return this.output;\n        }\n    }\n\n    /**\n     * @return {String}\n     */\n    toString() {\n        return `Conversion{ input:'${this.input}', output:'${this.output}' }`;\n    }\n\n    /**\n     *\n     * @return {String}\n     */\n    static toString() {\n        return 'Conversion';\n    }\n\n}\n\nexport default Conversion;"]}