{"version":3,"sources":["../../../src/js/data/Receipt.js"],"names":["EndpointType","stringOrMoney","shouldBeCurrency","currency","money","toMoney","currencyClass1","toClass","currencyClass2","shouldBeClass","stringOrAddressOrUri","ReceiptEndpoint","endpoint","address","toAddressWithDefaultScheme","name","shouldBeInstance","shouldBeTrue","isStringEqualIgnoreCase","resource","shouldBeDefined","valid","optString","KioskEndpointType","options","fee","take","validator","value","shouldBeNumber","id","type","required","WalletEndpointType","ENDPOINT_INSTANCE_KIOSK","ENDPOINT_INSTANCE_WALLET","endpointTypes","EndpointTypes","nameOrInstance","isInstance","shouldNotBeBlank","isString","types","toAddress","adapter","timestamp","amount","arguments","_type","getEndpointTypeOrFail","_address","_amount","_fee","_timestamp","toDateTime","optValue","optJson","Receipt","source","destination","identity","optInstant","optDateTime","_source","_destination","_identity","ReceiptBuilder","kioskName"],"mappings":"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","file":"Receipt.js","sourcesContent":["'use strict';\n\nimport CoreObject from \"../CoreObject\";\nimport Preconditions from \"../Preconditions\";\nimport Utility from \"../Utility\";\nimport {NotImplementedError} from \"../errors/NotImplementedError\";\nimport {Instant} from \"js-joda/dist/js-joda\";\nimport {Currency, USD, Money, Bitcoin} from \"../money\";\nimport {Address} from \"../Address\";\nimport Identity from \"./Identity\";\n\n//region class EndpointType\nclass EndpointType extends CoreObject {\n\n    /**\n     *\n     * @param {String|Money} stringOrMoney\n     * @return {Money}\n     */\n    toMoney(stringOrMoney) {\n        if (!stringOrMoney) {\n            stringOrMoney = '0';\n        }\n\n        Currency.shouldBeCurrency(this.currency);\n\n        let money = Currency.toMoney(stringOrMoney, this.currency);\n\n        let currencyClass1 = this.currency.toClass();\n        let currencyClass2 = money.currency.toClass();\n\n        Preconditions.shouldBeClass(currencyClass2, currencyClass1);\n\n        return money;\n    }\n\n    /**\n     *\n     * @param {String|Address|URI|ReceiptEndpoint} stringOrAddressOrUri\n     * @return {Address}\n     */\n    toAddress(stringOrAddressOrUri) {\n        if (stringOrAddressOrUri instanceof ReceiptEndpoint) {\n            /**\n             * @type {ReceiptEndpoint}\n             */\n            let endpoint = stringOrAddressOrUri;\n\n            return endpoint.address;\n        }\n\n        let address = Address.toAddressWithDefaultScheme(stringOrAddressOrUri, this.name);\n\n        Preconditions.shouldBeInstance(address, Address, 'Wrong type');\n\n        Preconditions.shouldBeTrue(\n            Utility.isStringEqualIgnoreCase(address.resource, this.name),\n            `Wrong resource type. Actual:${this.name} Expected:${address.resource}`);\n\n        Preconditions.shouldBeDefined(address.valid);\n        Preconditions.shouldBeTrue(address.valid, 'Address is not valid: ' + address);\n\n        return address;\n    }\n\n    toJson() {\n        return super.toJson({\n            currency: Utility.optString(this.currency),\n            name: this.name\n        });\n    }\n\n    /**\n     * @return {Class<Currency>}\n     */\n    get currency() {\n        throw new NotImplementedError('type');\n    }\n\n    /**\n     * @return {String}\n     */\n    get name() {\n        throw new NotImplementedError('type');\n    }\n}\n\nclass KioskEndpointType extends EndpointType {\n\n    /**\n     * @return {Currency}\n     */\n    get currency() {\n        return USD;\n    }\n\n    /**\n     * @return {String}\n     */\n    get name() {\n        return 'kiosk'\n    }\n\n    static create(options) {\n        let fee = Utility.take(options, 'fee', {\n            validator: function (value) {\n                Preconditions.shouldBeNumber(value, 'Must be number');\n                Preconditions.shouldBeTrue(value < 1, 'Fee should be less than 1');\n\n                return value;\n            }\n        });\n\n        let id = Utility.take(options, 'id', {\n            type: 'String',\n            required: true\n        });\n\n        return new KioskEndpointType({\n            fee: fee,\n            id: id\n        });\n    }\n}\n\nclass WalletEndpointType extends EndpointType {\n\n\n    /**\n     * @return {Class<Currency>|Currency}\n     */\n    get currency() {\n        return Bitcoin;\n    }\n\n    /**\n     * @return {String}\n     */\n    get name() {\n        return 'bitcoin';\n    }\n}\n//endregion\n\nlet ENDPOINT_INSTANCE_KIOSK = new KioskEndpointType();\nlet ENDPOINT_INSTANCE_WALLET = new WalletEndpointType();\nlet endpointTypes = {};\n\nendpointTypes[ENDPOINT_INSTANCE_WALLET.name] = ENDPOINT_INSTANCE_WALLET;\nendpointTypes[ENDPOINT_INSTANCE_KIOSK.name] = ENDPOINT_INSTANCE_KIOSK;\n\n//region class EndpointTypes\nclass EndpointTypes {\n\n    static types = endpointTypes;\n\n    /**\n     * @return {KioskEndpointType}\n     */\n    static get KIOSK() {\n        return ENDPOINT_INSTANCE_KIOSK;\n    }\n\n    /**\n     * @return {WalletEndpointType}\n     */\n    static get WALLET() {\n        return ENDPOINT_INSTANCE_WALLET;\n    }\n\n    /**\n     * @param {Address|String|EndpointType} nameOrInstance\n     * @return {EndpointType}\n     */\n    static getEndpointTypeOrFail(nameOrInstance) {\n        if (Address.isInstance(nameOrInstance)) {\n            nameOrInstance = Preconditions.shouldNotBeBlank(nameOrInstance.resource, `Name suspiciously blank ${nameOrInstance}`);\n        } else if (EndpointType.isInstance(nameOrInstance)) {\n            return nameOrInstance;\n        } else if (Utility.isString(nameOrInstance)) {\n\n        } else {\n            throw new NotImplementedError(`Cannot work with ${nameOrInstance}`);\n        }\n\n        let type = EndpointTypes.types[nameOrInstance];\n\n        Preconditions.shouldBeInstance(type, EndpointType, `EndpointType not found with name: '${nameOrInstance}'`);\n\n        return type;\n    }\n}\n//endregion\n\n//region class ReceiptEndpoint\nclass ReceiptEndpoint extends CoreObject {\n\n    //region fields\n    /**\n     * @type {Money}\n     */\n    _amount;\n\n    /**\n     * @type {Money}\n     */\n    _fee;\n\n    /**\n     * @type {Address}\n     */\n    _address;\n\n    /**\n     * @type {EndpointType}\n     */\n    _type;\n\n    /**\n     * @type {Instant}\n     */\n    _timestamp;\n    //endregion\n\n    /**\n     *\n     * @param {Object} options\n     * @param {Address|String} options.address\n     * @param {Money|String|Number|Big|BigJsLibrary.BigJS} options.amount\n     * @param {Money|String|Number|Big|BigJsLibrary.BigJS} [options.fee]\n     * @param {Instant|String|Number} options.timestamp If number, is assumed to be millis.\n     */\n    constructor(options) {\n        /**\n         * @type {Address}\n         */\n        let address = Address.toAddress(Utility.take(options, 'address', {\n            type: Address,\n            required: true,\n            adapter: Address.toAddressWithDefaultScheme\n        }));\n\n        /**\n         * @type {Instant}\n         */\n        let timestamp = Utility.take(options, 'timestamp', {\n            required: true,\n            validator: function (value) {\n                return value instanceof Instant;\n            }\n        });\n\n        /**\n         * @type {Money}\n         */\n        let amount = Utility.take(options, 'amount', Money, true);\n\n        let fee = Utility.take(options, 'fee', Money, false);\n\n        super(...arguments);\n\n        this._type = EndpointTypes.getEndpointTypeOrFail(address);\n        this._address = address;\n        this._amount = this.type.toMoney(amount);\n        this._fee = this.type.toMoney(fee);\n        this._timestamp = Utility.toDateTime(timestamp);\n    }\n\n    /**\n     * @type {Address}\n     */\n    get address() {\n        return this._address;\n    }\n\n    /**\n     * @type {EndpointType}\n     */\n    get type() {\n        return this._type;\n    }\n\n    /**\n     * @type {Money}\n     */\n    get amount() {\n        return this._amount;\n    }\n\n    /**\n     * @return {Money}\n     */\n    get fee() {\n        return this._fee;\n    }\n\n    toJson() {\n        return super.toJson({\n            currency: Utility.optString(this.type.currency),\n            fee: Utility.optString(Money.optValue(this.fee)),\n            amount: Utility.optJson(Money.optValue(this.amount)),\n            address: Utility.optString(this.address),\n        });\n    }\n}\n//endregion\n\n//region class Receipt\nclass Receipt extends CoreObject {\n\n    /**\n     * @type Instant\n     */\n    _timestamp;\n\n    /**\n     * @type {ReceiptEndpoint}\n     */\n    _source;\n\n    /**\n     * @type {ReceiptEndpoint}\n     */\n    _destination;\n\n    /**\n     * @type {Identity}\n     */\n    _identity;\n\n    /**\n     * @param {Object} options\n     * @param {ReceiptEndpoint} options.source\n     * @param {ReceiptEndpoint} options.destination\n     * @param {Instant} options.timestamp\n     */\n    constructor(options) {\n        let source = Utility.take(options, 'source', ReceiptEndpoint, true);\n        let destination = Utility.take(options, 'destination', ReceiptEndpoint, true);\n        let identity = Utility.take(options, 'identity', Identity, true);\n        let timestamp = Utility.take(options, 'timestamp', {\n            required: true,\n            adapter: function(value) {\n                return Utility.optInstant(Utility.optDateTime(value));\n            },\n            validator: function (value) {\n                return value instanceof Instant;\n            }\n        });\n\n        super(...arguments);\n\n        this._timestamp = timestamp;\n        this._source = source;\n        this._destination = destination;\n        this._identity = identity;\n    }\n\n    /**\n     * @return {Instant}\n     */\n    get timestamp() {\n        return this._timestamp;\n    }\n\n    /**\n     * @type {ReceiptEndpoint}\n     */\n    get source() {\n        return this._source;\n    }\n\n    /**\n     * @type {ReceiptEndpoint}\n     */\n    get destination() {\n        return this._destination;\n    }\n\n    /**\n     * @return {Identity}\n     */\n    get identity() {\n        return this._identity;\n    }\n\n    toJson() {\n        return super.toJson({\n            identity: Utility.optString(this.identity),\n            timestamp: Utility.optString(this.timestamp),\n            source: Utility.optJson(this.source),\n            destination: Utility.optJson(this.destination)\n        });\n    }\n}\n//endregion\n\n//region class ReceiptBuilder (incomplete)\nclass ReceiptBuilder extends CoreObject {\n\n    constructor(options) {\n        super(...arguments);\n\n\n    }\n\n    from(kioskName, money) {\n\n    }\n\n    to() {\n\n    }\n\n    at() {\n\n    }\n\n}\n//endregion\n\nexport {KioskEndpointType};\nexport {WalletEndpointType};\nexport {ReceiptBuilder};\nexport {EndpointTypes};\nexport {EndpointType};\nexport {ReceiptEndpoint};\nexport {Receipt};\n\nexport default Receipt;\n\n\n"]}