{"version":3,"sources":["../../../src/js/data/FileResourceLoader.js"],"names":["FileResourceLoader","options","path","take","required","adapter","value","tmpdir","getPath","validator","shouldBeInstanceOf","_path","_startedLatch","resolve","baseUri","then","uri","toString","fromNode","callback","readFile"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,kB;;;AAEF;AACA;;;;;;AAMA,gCAAYC,OAAZ,EAAqB;AAAA;;AACjB;AACA;AACA,YAAIC,OAAO,kBAAQC,IAAR,CAAaF,OAAb,EAAsB,MAAtB,EAA8B;AACrCG,sBAAU,IAD2B;AAErCC,qBAAS,iBAAUC,KAAV,EAAiB;AACtB,oBAAI,CAACA,KAAL,EAAY;AACRA,4BAAQ,qBAAI,gBAAMC,MAAN,EAAJ,CAAR;AACH;;AAED,uBAAO,kBAAQC,OAAR,CAAgBF,KAAhB,CAAP;AACH,aARoC;AASrCG,uBAAW,mBAAUH,KAAV,EAAiB;AACxB,wCAAcI,kBAAd,CAAiCJ,KAAjC,mBAA6C,KAA7C;AACH;AAXoC,SAA9B,CAAX;AAaA;;AAhBiB,4IAkBXL,OAlBW;;AAoBjB,cAAKU,KAAL,GAAaT,IAAb;;AAEA,cAAKU,aAAL,GAAqB,mBAAQC,OAAR,EAArB;AAtBiB;AAuBpB;;AAED;;AAEA;AACA;;;;;;;;;;;;AAUA;;AAEA;;;;6BAIKX,I,EAAM;AACP,gBAAIY,UAAU,KAAKZ,IAAnB;;AAEA,mBAAO,mBACFW,OADE,GAEFE,IAFE,CAEG,YAAM;AACR,uBAAO,kBAAQP,OAAR,CAAgB;AACnBM,6BAASA,OADU;AAEnBE,yBAAKd;AAFc,iBAAhB,CAAP;AAIH,aAPE,EAQFa,IARE,CAQG,WAAC,qBAAqBb,IAAtB,EAA+B;AACjCA,uBAAOA,KAAKe,QAAL,EAAP;;AAEA,uBAAO,mBAAQC,QAAR,CAAiB,UAACC,QAAD,EAAc;AAClC,iCAAGC,QAAH,CAAYlB,IAAZ,EAAkBiB,QAAlB;AACH,iBAFM,CAAP;AAGH,aAdE,CAAP;AAeH;;;4BA5BU;AACP,mBAAO,KAAKR,KAAZ;AACH;;;;;;QA6BGX,kB,GAAAA,kB;kBACOA,kB","file":"FileResourceLoader.js","sourcesContent":["import Utility from \"../Utility\";\nimport URI from \"urijs\";\nimport Preconditions from \"../Preconditions\";\nimport osenv from \"osenv\";\nimport Promise from \"bluebird\";\nimport {Cache} from \"../cache\";\nimport fs from \"fs\";\nimport ResourceLoader from \"./ResourceLoader\";\n\nclass FileResourceLoader extends ResourceLoader {\n\n    //region constructor\n    /**\n     *\n     * @param {Object} [options]\n     * @param {Cache} [options.cache]\n     * @param {String|URI} [options.path] defaults to osenv.tempdir()\n     */\n    constructor(options) {\n        //region let path\n        /** @type {URI} */\n        let path = Utility.take(options, 'path', {\n            required: true,\n            adapter: function (value) {\n                if (!value) {\n                    value = URI(osenv.tmpdir());\n                }\n\n                return Utility.getPath(value);\n            },\n            validator: function (value) {\n                Preconditions.shouldBeInstanceOf(value, URI, 'uri');\n            }\n        });\n        //endregion\n\n        super(options);\n\n        this._path = path;\n\n        this._startedLatch = Promise.resolve();\n    }\n\n    //endregion\n\n    //region getters/setters\n    /**\n     * @property\n     * @readonly\n     * @type {URI}\n     * @return {URI}\n     */\n    get path() {\n        return this._path;\n    }\n\n    //endregion\n\n    /**\n     * @param {String|URI} path\n     * @returns {Promise}\n     */\n    load(path) {\n        let baseUri = this.path;\n\n        return Promise\n            .resolve()\n            .then(() => {\n                return Utility.getPath({\n                    baseUri: baseUri,\n                    uri: path\n                });\n            })\n            .then((/** @type {String} */path) => {\n                path = path.toString();\n\n                return Promise.fromNode((callback) => {\n                    fs.readFile(path, callback);\n                });\n            })\n    }\n}\n\nexport {FileResourceLoader};\nexport default FileResourceLoader;"]}