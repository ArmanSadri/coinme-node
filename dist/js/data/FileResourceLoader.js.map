{"version":3,"sources":["../../../src/js/data/FileResourceLoader.js"],"names":["FileResourceLoader","options","path","take","required","adapter","value","tmpdir","getPath","validator","shouldBeInstanceOf","_path","_startedLatch","resolve","baseUri","then","uri","toString","fromNode","callback","readFile"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,kB;;;AAEF;AACA;;;;;;AAMA,gCAAYC,OAAZ,EAAqB;AAAA;;AACjB;AACA;AACA,YAAIC,OAAO,kBAAQC,IAAR,CAAaF,OAAb,EAAsB,MAAtB,EAA8B;AACrCG,sBAAU,IAD2B;AAErCC,qBAAS,iBAAUC,KAAV,EAAiB;AACtB,oBAAI,CAACA,KAAL,EAAY;AACRA,4BAAQ,qBAAI,gBAAMC,MAAN,EAAJ,CAAR;AACH;;AAED,uBAAO,kBAAQC,OAAR,CAAgBF,KAAhB,CAAP;AACH,aARoC;AASrCG,uBAAW,mBAAUH,KAAV,EAAiB;AACxB,wCAAcI,kBAAd,CAAiCJ,KAAjC,mBAA6C,KAA7C;AACH;AAXoC,SAA9B,CAAX;AAaA;;AAhBiB,4IAkBXL,OAlBW;;AAoBjB,cAAKU,KAAL,GAAaT,IAAb;;AAEA,cAAKU,aAAL,GAAqB,mBAAQC,OAAR,EAArB;AAtBiB;AAuBpB;;AAED;;AAEA;AACA;;;;;;;;;;;;AAUA;;AAEA;;;;6BAIKX,I,EAAM;AACP,gBAAIY,UAAU,KAAKZ,IAAnB;;AAEA,mBAAO,mBACFW,OADE,GAEFE,IAFE,CAEG,YAAM;AACR,uBAAO,kBAAQP,OAAR,CAAgB;AACnBM,6BAASA,OADU;AAEnBE,yBAAKd;AAFc,iBAAhB,CAAP;AAIH,aAPE,EAQFa,IARE,CAQG,WAAC,qBAAqBb,IAAtB,EAA+B;AACjCA,uBAAOA,KAAKe,QAAL,EAAP;;AAEA,uBAAO,mBAAQC,QAAR,CAAiB,UAACC,QAAD,EAAc;AAClC,iCAAGC,QAAH,CAAYlB,IAAZ,EAAkBiB,QAAlB;AACH,iBAFM,CAAP;AAGH,aAdE,CAAP;AAeH;;;4BA5BU;AACP,mBAAO,KAAKR,KAAZ;AACH;;;;;;QA6BGX,kB,GAAAA,kB;kBACOA,kB","file":"FileResourceLoader.js","sourcesContent":["import Utility from \"../Utility\";\r\nimport URI from \"urijs\";\r\nimport Preconditions from \"../Preconditions\";\r\nimport osenv from \"osenv\";\r\nimport Promise from \"bluebird\";\r\nimport {Cache} from \"../cache\";\r\nimport fs from \"fs\";\r\nimport ResourceLoader from \"./ResourceLoader\";\r\n\r\nclass FileResourceLoader extends ResourceLoader {\r\n\r\n    //region constructor\r\n    /**\r\n     *\r\n     * @param {Object} [options]\r\n     * @param {Cache} [options.cache]\r\n     * @param {String|URI} [options.path] defaults to osenv.tempdir()\r\n     */\r\n    constructor(options) {\r\n        //region let path\r\n        /** @type {URI} */\r\n        let path = Utility.take(options, 'path', {\r\n            required: true,\r\n            adapter: function (value) {\r\n                if (!value) {\r\n                    value = URI(osenv.tmpdir());\r\n                }\r\n\r\n                return Utility.getPath(value);\r\n            },\r\n            validator: function (value) {\r\n                Preconditions.shouldBeInstanceOf(value, URI, 'uri');\r\n            }\r\n        });\r\n        //endregion\r\n\r\n        super(options);\r\n\r\n        this._path = path;\r\n\r\n        this._startedLatch = Promise.resolve();\r\n    }\r\n\r\n    //endregion\r\n\r\n    //region getters/setters\r\n    /**\r\n     * @property\r\n     * @readonly\r\n     * @type {URI}\r\n     * @return {URI}\r\n     */\r\n    get path() {\r\n        return this._path;\r\n    }\r\n\r\n    //endregion\r\n\r\n    /**\r\n     * @param {String|URI} path\r\n     * @returns {Promise}\r\n     */\r\n    load(path) {\r\n        let baseUri = this.path;\r\n\r\n        return Promise\r\n            .resolve()\r\n            .then(() => {\r\n                return Utility.getPath({\r\n                    baseUri: baseUri,\r\n                    uri: path\r\n                });\r\n            })\r\n            .then((/** @type {String} */path) => {\r\n                path = path.toString();\r\n\r\n                return Promise.fromNode((callback) => {\r\n                    fs.readFile(path, callback);\r\n                });\r\n            })\r\n    }\r\n}\r\n\r\nexport {FileResourceLoader};\r\nexport default FileResourceLoader;"]}