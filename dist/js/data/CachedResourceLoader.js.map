{"version":3,"sources":["../../../src/js/data/CachedResourceLoader.js"],"names":["CachedResourceLoader","options","cache","take","adapter","value","resourceLoader","_loader","_cache","_startedLatch","Promise","resolve","reject","promise","then","startedLatch","path","read","load"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;;AAEA;;;;IAIMA,oB;;;AAEF;;;;;;AAMA,kCAAYC,OAAZ,EAAqB;AAAA;;AACjB;AACA;AACA,YAAIC,QAAQ,kBAAQC,IAAR,CAAaF,OAAb,EAAsB,OAAtB,EAA+B;AACvCG,mBADuC,mBAC/BC,KAD+B,EACxB;AACX,oBAAI,CAACA,KAAL,EAAY;AACRA,4BAAQ,2BAAR;AACH;;AAED,uBAAOA,KAAP;AACH;AAPsC,SAA/B,CAAZ;AASA;;AAEA;AACA,YAAIC,iBAAiB,kBAAQH,IAAR,CAAaF,OAAb,EAAsB,gBAAtB,4BAAwD,IAAxD,CAArB;;AAfiB,gJAiBXA,OAjBW;;AAmBjB,cAAKM,OAAL,GAAeD,cAAf;AACA,cAAKE,MAAL,GAAcN,KAAd;;AAEA,cAAKO,aAAL,GAAqB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAClD,gBAAIC,UAAUH,QAAQC,OAAR,EAAd;;AAEAE,sBAAUA,QAAQC,IAAR,CAAa;AAAA,uBAAMZ,MAAMa,YAAZ;AAAA,aAAb,CAAV;AACAF,sBAAUA,QAAQC,IAAR,CAAa;AAAA,uBAAMR,eAAeS,YAArB;AAAA,aAAb,CAAV;;AAEAJ,oBAAQE,OAAR;AACH,SAPoB,CAArB;AAtBiB;AA8BpB;;AAED;AACA;;;;;;;;;;;;AAoBA;;6BAEKG,I,EAAM;AACP,gBAAId,QAAQ,KAAKA,KAAjB;AACA,gBAAII,iBAAiB,KAAKA,cAA1B;;AAEA,mBAAO,iIACGU,IADH,EAEFF,IAFE,CAEG,WAAC,gBAAgBE,IAAjB,EAA0B;AAC5B,uBAAOd,MACFe,IADE,CACGD,IADH,EAEFF,IAFE,CAEG,UAACT,KAAD,EAAW;AACb,2BAAOA,SAASC,eAAeY,IAAf,CAAoBF,IAApB,CAAhB;AACH,iBAJE,CAAP;AAKH,aARE,CAAP;AASH;;;4BA7BoB;AACjB,mBAAO,KAAKT,OAAZ;AACH;;AAED;;;;;;;;;4BAMY;AACR,mBAAO,KAAKC,MAAZ;AACH;;;;;;QAoBGR,oB,GAAAA,oB;kBACOA,oB","file":"CachedResourceLoader.js","sourcesContent":["import Utility from \"../Utility\";\nimport URI from \"urijs\";\nimport {Cache, LocalFileCache} from \"../cache\";\nimport ResourceLoader from \"./ResourceLoader\";\n\n/**\n * @class CachedResourceLoader\n * @extends ResourceLoader\n */\nclass CachedResourceLoader extends ResourceLoader {\n\n    /**\n     *\n     * @param {Object} options\n     * @param {ResourceLoader} options.resourceLoader\n     * @param {Cache} [options.cache]\n     */\n    constructor(options) {\n        //region let cache\n        /** @type {Cache} */\n        let cache = Utility.take(options, 'cache', {\n            adapter(value) {\n                if (!value) {\n                    value = new LocalFileCache();\n                }\n\n                return value;\n            }\n        });\n        //endregion\n\n        /** @type {ResourceLoader} */\n        let resourceLoader = Utility.take(options, 'resourceLoader', ResourceLoader, true);\n\n        super(options);\n\n        this._loader = resourceLoader;\n        this._cache = cache;\n\n        this._startedLatch = new Promise((resolve, reject) => {\n            let promise = Promise.resolve();\n\n            promise = promise.then(() => cache.startedLatch);\n            promise = promise.then(() => resourceLoader.startedLatch);\n\n            resolve(promise);\n        });\n    }\n\n    //region getters/setters\n    /**\n     * @property\n     * @readonly\n     * @type {ResourceLoader}\n     * @return {ResourceLoader}\n     */\n    get resourceLoader() {\n        return this._loader;\n    }\n\n    /**\n     * @property\n     * @readonly\n     * @type {Cache}\n     * @return {Cache}\n     */\n    get cache() {\n        return this._cache;\n    }\n\n    //endregion\n\n    load(path) {\n        let cache = this.cache;\n        let resourceLoader = this.resourceLoader;\n\n        return super\n            .load(path)\n            .then((/**@type {URI}*/path) => {\n                return cache\n                    .read(path)\n                    .then((value) => {\n                        return value || resourceLoader.load(path);\n                    });\n            });\n    }\n}\n\nexport {CachedResourceLoader};\nexport default CachedResourceLoader;"]}