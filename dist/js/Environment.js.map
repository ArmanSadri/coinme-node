{"version":3,"sources":["../../src/js/Environment.js"],"names":["Environment","options","identity","take","configuration","certificate","required","adapter","value","fromHome","_identity","_configuration","_certificate","hostname","host","whoami","user","tmpdir","home"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;;IAEMA,W;;;AAEF;;;;;;AAMA,yBAAYC,OAAZ,EAAqB;AAAA;;AACjB,YAAIC,WAAW,kBAAQC,IAAR,CAAaF,OAAb,EAAsB,UAAtB,sBAA4C,IAA5C,CAAf;AACA,YAAIG,gBAAgB,kBAAQD,IAAR,CAAaF,OAAb,EAAsB,eAAtB,EAAuC,KAAvC,CAApB;AACA,YAAII,cAAc,kBAAQF,IAAR,CAAaF,OAAb,EAAsB,aAAtB,EAAqC;AACnDK,sBAAU,IADyC;AAEnDC,mBAFmD,mBAE3CC,KAF2C,EAEpC;AACX,oBAAI,CAACA,KAAL,EAAY;AACR,2BAAO,qCAAkBC,QAAlB,EAAP;AACH;;AAED,uBAAOD,KAAP;AACH;AARkD,SAArC,CAAlB;;AAHiB,8HAcXP,OAdW;;AAgBjB,cAAKS,SAAL,GAAiBR,QAAjB;AACA,cAAKS,cAAL,GAAsBP,aAAtB;AACA,cAAKQ,YAAL,GAAoBP,WAApB;AAlBiB;AAmBpB;;AAED;;;;;;;;;;;;;;;4BAWc;AACV,mBAAO;AACHQ,0BAAU,gBAAMC,IAAN,EADP;AAEHC,wBAAQ,gBAAMC,IAAN,EAFL;AAGHC,wBAAQ,gBAAMA,MAAN,EAHL;AAIHC,sBAAM,gBAAMA,IAAN;AAJH,aAAP;AAMH;;AAED;;;;;;4BAGe;AACX,mBAAO,KAAKR,SAAZ;AACH;;AAED;;;;;;;4BAIkB;AACd,mBAAO,KAAKE,YAAZ;AACH;;AAED;;;;;;;;4BAKoB;AAChB,mBAAO,KAAKD,cAAZ;AACH;;;;;;QAGGX,W,GAAAA,W;kBACOA,W","file":"Environment.js","sourcesContent":["import Identity from \"data/Identity\";\r\nimport Snowflake from \"node-snowflake\";\r\nimport fs from \"fs\";\r\nimport CoreObject from \"./CoreObject\";\r\nimport Utility from \"./Utility\";\r\nimport Preconditions from \"./Preconditions\";\r\nimport {CertificateBundle} from \"./data/CertificateBundle\";\r\nimport osenv  from \"osenv\";\r\n\r\nclass Environment extends CoreObject {\r\n\r\n    /**\r\n     *\r\n     * @param {Object} options\r\n     * @param {Identity} options.identity\r\n     * @param {Object} options.configuration\r\n     */\r\n    constructor(options) {\r\n        let identity = Utility.take(options, 'identity', Identity, true);\r\n        let configuration = Utility.take(options, 'configuration', false);\r\n        let certificate = Utility.take(options, 'certificate', {\r\n            required: true,\r\n            adapter(value) {\r\n                if (!value) {\r\n                    return CertificateBundle.fromHome();\r\n                }\r\n\r\n                return value;\r\n            }\r\n        });\r\n\r\n        super(options);\r\n\r\n        this._identity = identity;\r\n        this._configuration = configuration;\r\n        this._certificate = certificate;\r\n    }\r\n\r\n    /**\r\n     * @returns {{\r\n     *  hostname:String,\r\n     *  user:String,\r\n     *  tmpdir:String,\r\n     *  home: function,\r\n     *  searchPaths: Array,\r\n     *  editor: function,\r\n     *  shell:Object\r\n     * }}\r\n     */\r\n    get runtime() {\r\n        return {\r\n            hostname: osenv.host(),\r\n            whoami: osenv.user(),\r\n            tmpdir: osenv.tmpdir(),\r\n            home: osenv.home()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @return {Identity}\r\n     */\r\n    get identity() {\r\n        return this._identity;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @return {CertificateBundle}\r\n     */\r\n    get certificate() {\r\n        return this._certificate;\r\n    }\r\n\r\n    /**\r\n     * @property\r\n     * @readonly\r\n     * @returns {Object}\r\n     */\r\n    get configuration() {\r\n        return this._configuration;\r\n    }\r\n}\r\n\r\nexport {Environment};\r\nexport default Environment;"]}