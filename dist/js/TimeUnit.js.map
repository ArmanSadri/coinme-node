{"version":3,"sources":["../../src/js/TimeUnit.js"],"names":[],"mappings":"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","file":"TimeUnit.js","sourcesContent":["'use strict';\n\nimport Utility from \"./Utility\";\nimport CoreObject from \"./CoreObject\";\n\nimport {ChronoUnit} from 'js-joda/dist/js-joda'\nimport {Duration} from 'js-joda/dist/js-joda'\nimport Preconditions from \"./Preconditions\";\nimport math from 'mathjs';\n\nPreconditions.shouldBeDefined(ChronoUnit);\nPreconditions.shouldBeDefined(Duration);\n\n// Handy constants for conversions\nconst C0 = 1;\nconst C1 = C0 * 1000;\nconst C2 = C1 * 1000;\nconst C3 = C2 * 1000;\nconst C4 = C3 * 60;\nconst C5 = C4 * 60;\nconst C6 = C5 * 24;\n\nconst MAX = Number.MAX_SAFE_INTEGER;\nconst MIN = Number.MIN_SAFE_INTEGER;\n\n/**\n * Scale value by m, checking for overflow.\n * This has a short name to make above covaluee more reavalueable.\n * @param {Number|String} value\n * @param {Number} m\n * @param {Number} over\n * @return {Number}\n */\nfunction x(value, m, over) {\n    value = Utility.toNumberOrFail(value);\n    if (value > over) return MAX;\n    if (value < -over) return MIN;\n\n    return value * m;\n}\n\n//region specs\n\nconst SPEC_NANOSECONDS = {\n\n    /**\n     * @type {ChronoUnit}\n     */\n    unit: ChronoUnit.NANOS,\n\n    shortName: 'ns',\n\n    longName: 'nanos',\n\n    /**\n     * @param {Duration} duration\n     * @return {Number|number}\n     */\n    toNumber(duration) {\n        return this.fromNanos(duration.toNanos());\n    },\n\n    toNanos(valueInNanos)   {\n        return valueInNanos;\n    },\n\n    fromNanos(valueInNanos) {\n        return valueInNanos;\n    },\n\n    toMicros(valueInNanos)  {\n        return math.chain(valueInNanos)\n            .divide(\n                math.divide(C1, C0)\n            )\n            .done();\n        // return valueInNanos / (C1 / C0);\n    },\n\n    toMillis(valueInNanos)  {\n        return math.divide(valueInNanos, (math.divide(C2, C0)));\n        // return valueInNanos / (C2 / C0);\n    },\n\n    toSeconds(valueInNanos) {\n        return math.divide(valueInNanos, (math.divide(C3, C0)));\n        // return valueInNanos / (C3 / C0);\n    },\n\n    toMinutes(valueInNanos) {\n        return math.divide(valueInNanos, (math.divide(C4, C0)));\n        // return valueInNanos / (C4 / C0);\n    },\n\n    toHours(valueInNanos)   {\n        return math.divide(valueInNanos, (math.divide(C5, C0)));\n        // return valueInNanos / (C5 / C0);\n    },\n\n    toDays(valueInNanos)    {\n        return math.divide(valueInNanos, (math.divide(C6, C0)));\n        // return valueInNanos / (C6 / C0);\n    },\n\n    convert(value, timeUnit) {\n        return timeUnit.toNanos(value);\n    },\n\n    excessNanos(value, m) {\n        return (value - (m * C2));\n    }\n};\n\nconst SPEC_MICROSECONDS = {\n\n    unit: ChronoUnit.MICROS,\n\n    shortName: \"\\u03bcs\", // μs\n\n    longName: 'micros',\n\n    /**\n     * @param {Duration} duration\n     * @return {Number|number}\n     */\n    toNumber(duration) {\n        return this.fromNanos(duration.toNanos());\n    },\n\n    fromNanos(valueInNanos) {\n        return SPEC_NANOSECONDS.toMicros(valueInNanos);\n    },\n\n    toNanos(valueInMicros)   {\n        return x(valueInMicros, math.divide(C1, C0), math.divide(MAX, math.divide(C1, C0)));\n        // return x(valueInMicros, C1 / C0, MAX / (C1 / C0));\n    },\n\n    // toMicros(valueInMicros)  {\n    //     return valueInMicros;\n    // },\n    // toMillis(valueInMicros)  {\n    //     return valueInMicros / (C2 / C1);\n    // },\n    // toSeconds(valueInMicros) {\n    //     return valueInMicros / (C3 / C1);\n    // },\n    // toMinutes(valueInMicros) {\n    //     return valueInMicros / (C4 / C1);\n    // },\n    // toHours(valueInMicros)   {\n    //     return valueInMicros / (C5 / C1);\n    // },\n    // toDays(valueInMicros)    {\n    //     return valueInMicros / (C6 / C1);\n    // },\n    // convert(value, timeUnit) {\n    //     return timeUnit.toMicros(value);\n    // },\n    excessNanos(value, m) {\n        return ((value * C1) - (m * C2));\n    }\n};\n\nconst SPEC_MILLISECONDS = {\n\n    unit: ChronoUnit.MILLIS,\n\n    shortName: \"ms\", // μs\n\n    longName: 'millis',\n\n    /**\n     * @param {Duration} duration\n     * @return {Number|number}\n     */\n    toNumber(duration) {\n        return this.fromNanos(duration.toNanos());\n    },\n\n    fromNanos(valueInNanos) {\n        return SPEC_NANOSECONDS.toMillis(valueInNanos);\n    },\n\n    toNanos(valueInMillis)   {\n        return x(valueInMillis, math.divide(C2, C0), math.divide(MAX, math.divide(C2, C0)));\n        // return x(valueInMillis, C2 / C0, MAX / (C2 / C0));\n    },\n\n    // toMicros(valueInMillis)  {\n    //     return x(valueInMillis, C2 / C1, MAX / (C2 / C1));\n    // },\n    // toMillis(valueInMillis)  {\n    //     return valueInMillis;\n    // },\n    // toSeconds(valueInMillis) {\n    //     return valueInMillis / (C3 / C2);\n    // },\n    // toMinutes(valueInMillis) {\n    //     return valueInMillis / (C4 / C2);\n    // },\n    // toHours(valueInMillis)   {\n    //     return valueInMillis / (C5 / C2);\n    // },\n    // toDays(valueInMillis)    {\n    //     return valueInMillis / (C6 / C2);\n    // },\n    // convert(value, timeUnit) {\n    //     return timeUnit.toMillis(value);\n    // },\n\n    excessNanos(value, m) {\n        return 0;\n    }\n};\n\nconst SPEC_SECONDS = {\n\n    unit: ChronoUnit.SECONDS,\n\n    shortName: \"s\",\n\n    longName: 'seconds',\n\n    /**\n     * @param {Duration} duration\n     * @return {Number|number}\n     */\n    toNumber(duration) {\n        return this.fromNanos(duration.toNanos());\n    },\n\n    fromNanos(valueInNanos) {\n        return SPEC_NANOSECONDS.toSeconds(valueInNanos);\n    },\n\n    toNanos(valueInSeconds)   {\n        return x(valueInSeconds, math.divide(C3, C0), math.divide(MAX, math.divide(C3 / C0)));\n        // return x(valueInSeconds, C3 / C0, MAX / (C3 / C0));\n    },\n\n    // toMicros(valueInSeconds)  {\n    //     return x(valueInSeconds, C3 / C1, MAX / (C3 / C1));\n    // },\n    // toMillis(valueInSeconds)  {\n    //     return x(valueInSeconds, C3 / C2, MAX / (C3 / C2));\n    // },\n    // toSeconds(valueInSeconds) {\n    //     return valueInSeconds;\n    // },\n    // toMinutes(valueInSeconds) {\n    //     return valueInSeconds / (C4 / C3);\n    // },\n    // toHours(valueInSeconds)   {\n    //     return valueInSeconds / (C5 / C3);\n    // },\n    // toDays(valueInSeconds)    {\n    //     return valueInSeconds / (C6 / C3);\n    // },\n    // convert(value, timeUnit) {\n    //     return timeUnit.toSeconds(value);\n    // },\n\n    excessNanos(value, m) {\n        return 0;\n    }\n};\n\nconst SPEC_MINUTES = {\n\n    unit: ChronoUnit.MINUTES,\n\n    shortName: 'min',\n\n    longName: 'minutes',\n\n    /**\n     * @param {Duration} duration\n     * @return {Number|number}\n     */\n    toNumber(duration) {\n        return this.fromNanos(duration.toNanos());\n    },\n\n    fromNanos(valueInNanos) {\n        return SPEC_NANOSECONDS.toMinutes(valueInNanos);\n    },\n\n    toNanos(valueInMinutes)   {\n        return x(valueInMinutes, math.divide(C4, C0), math.divide(MAX, math.divide(C4 / C0)));\n        // return x(valueInMinutes, C4 / C0, MAX / (C4 / C0));\n    },\n\n    // toMicros(valueInMinutes)  {\n    //     return x(valueInMinutes, C4 / C1, MAX / (C4 / C1));\n    // },\n    // toMillis(valueInMinutes)  {\n    //     return x(valueInMinutes, C4 / C2, MAX / (C4 / C2));\n    // },\n    // toSeconds(valueInMinutes) {\n    //     return x(valueInMinutes, C4 / C3, MAX / (C4 / C3));\n    // },\n    // toMinutes(valueInMinutes) {\n    //     return valueInMinutes;\n    // },\n    // toHours(valueInMinutes)   {\n    //     return valueInMinutes / (C5 / C4);\n    // },\n    // toDays(valueInMinutes)    {\n    //     return valueInMinutes / (C6 / C4);\n    // },\n    // convert(value, timeUnit) {\n    //     return timeUnit.toMinutes(value);\n    // },\n\n    excessNanos(value, m) {\n        return 0;\n    }\n};\n\nconst SPEC_HOURS = {\n\n    shortName: \"h\",\n\n    longName: 'hours',\n\n    /**\n     * @param {Duration} duration\n     * @return {Number|number}\n     */\n    toNumber(duration) {\n        return this.fromNanos(duration.toNanos());\n    },\n\n    fromNanos(valueInNanos) {\n        return SPEC_NANOSECONDS.toHours(valueInNanos);\n    },\n\n    toNanos(valueInHours)   {\n        return x(valueInHours, C5 / C0, MAX / (C5 / C0));\n    },\n\n    // toMicros(valueInHours)  {\n    //     return x(valueInHours, C5 / C1, MAX / (C5 / C1));\n    // },\n    //\n    // toMillis(valueInHours)  {\n    //     return x(valueInHours, C5 / C2, MAX / (C5 / C2));\n    // },\n    //\n    // toSeconds(valueInHours) {\n    //     return x(valueInHours, C5 / C3, MAX / (C5 / C3));\n    // },\n    //\n    // toMinutes(valueInHours) {\n    //     return x(valueInHours, C5 / C4, MAX / (C5 / C4));\n    // },\n    //\n    // toHours(valueInHours)   {\n    //     return valueInHours;\n    // },\n    //\n    // toDays(valueInHours)    {\n    //     return valueInHours / (C6 / C5);\n    // },\n\n    // convert(value, timeUnit) {\n    //     return timeUnit.toHours(value);\n    // },\n\n    excessNanos(value, m) {\n        return 0;\n    }\n};\n\nconst SPEC_DAYS = {\n\n    unit: ChronoUnit.DAYS,\n\n    shortName: 'd',\n\n    longName: 'days',\n\n    toNanos(valueInDays)   {\n        return x(valueInDays, C6 / C0, MAX / (C6 / C0));\n    },\n\n    fromNanos(valueInNanos) {\n        // TimeUnit.NANOS.toDays(valueInNanos)\n        return SPEC_NANOSECONDS.toDays(valueInNanos);\n    },\n\n    toMicros(valueInDays)  {\n        return x(valueInDays, C6 / C1, MAX / (C6 / C1));\n    },\n\n    toMillis(valueInDays)  {\n        return x(valueInDays, C6 / C2, MAX / (C6 / C2));\n    },\n\n    toSeconds(valueInDays) {\n        return x(valueInDays, C6 / C3, MAX / (C6 / C3));\n    },\n\n    toMinutes(valueInDays) {\n        return x(valueInDays, C6 / C4, MAX / (C6 / C4));\n    },\n\n    /**\n     * @param {Number} valueInDays\n     * @return {Number} hours\n     */\n    toHours(valueInDays)   {\n        return x(valueInDays, C6 / C5, MAX / (C6 / C5));\n    },\n\n    toDays(valueInDays)    {\n        return valueInDays;\n    },\n\n    /**\n     *\n     * @param {Number} value\n     * @param {TimeUnit} timeUnit\n     * @returns {Number|*} days\n     */\n    convert(value, timeUnit) {\n        return timeUnit.toDays(value);\n    },\n\n    excessNanos(value, m) {\n        return 0;\n    }\n};\n//endregion\n\n//region TimeUnit\nclass TimeUnit extends CoreObject {\n\n    //region static TimeUnits\n    /**\n     * @return {TimeUnit}\n     */\n    static NANOSECONDS = new TimeUnit(SPEC_NANOSECONDS);\n\n    /**\n     * @return {TimeUnit}\n     */\n    static MICROSECONDS = new TimeUnit(SPEC_MICROSECONDS);\n\n    /**\n     * @return {TimeUnit}\n     */\n    static MILLISECONDS = new TimeUnit(SPEC_MILLISECONDS);\n\n    /**\n     * @return {TimeUnit}\n     */\n    static SECONDS = new TimeUnit(SPEC_SECONDS);\n\n    /**\n     * @return {TimeUnit}\n     */\n    static MINUTES = new TimeUnit(SPEC_MINUTES);\n\n    /**\n     * @return {TimeUnit}\n     */\n    static HOURS = new TimeUnit(SPEC_HOURS);\n\n    /**\n     * @return {TimeUnit}\n     */\n    static DAYS = new TimeUnit(SPEC_DAYS);\n    //endregion\n\n    /**\n     * @protected\n     * @param {Object} spec\n     */\n    constructor(spec) {\n        super();\n\n        /**\n         * @type {{unit: ChronoUnit, toString:function, equals:function, excessNanos:function, shortName:String, longName:String, toNumber:function}}\n         * @private\n         */\n        this.spec = spec;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return this.spec.shortName;\n    }\n\n    valueOf() {\n        return this.toString();\n    }\n\n    //region public methods\n    /**\n     *\n     * @returns {String}\n     */\n    get shortName() {\n        return this.spec.shortName;\n    }\n\n    /**\n     *\n     * @returns {String}\n     */\n    get longName() {\n        return this.spec.longName;\n    }\n\n    /**\n     * @return {ChronoUnit}\n     */\n    toChronoUnit() {\n        return this.spec.unit;\n    }\n\n    /**\n     *\n     * @param {Number} value - (the units of this number are assumed to be 'this.unit')\n     * @returns {Duration}\n     */\n    toDuration(value) {\n        value = Utility.toNumberOrFail(value, 'TimeUnit.toDuration(value) - value required');\n        return Duration.of(value, this.toChronoUnit());\n    }\n\n    //conversions\n\n    /**\n     * Converts from SOURCE value/units into DESTINATION (this) units.\n     *\n     * @param {Number} value The SOURCE value\n     * @param {TimeUnit} timeUnit  The SOURCE timeUnit\n     * @returns {Number} The destination value/units\n     */\n    convert(value, timeUnit) {\n        Preconditions.shouldBeNumber(value);\n        Preconditions.shouldBeInstance(timeUnit, TimeUnit);\n\n        let duration = Duration.of(value, timeUnit.toChronoUnit());\n\n        return this.spec.fromNanos(duration.toNanos());\n        // let numberOfNanos = sourceDuration.toNanos();\n        // let destinationDuration = this.toDuration(0);\n        //\n        // return destinationDuration.plusNanos(numberOfNanos);\n    }\n\n    /**\n     * @param {Number} value The value, in \"our\" units. If the unit is Millis, then your 'value' should be units.\n     *\n     * @return {Number}\n     */\n    toValue(value) {\n        return this.spec.fromNanos(\n            this.toDuration(value)\n                .toNanos());\n    }\n\n    /**\n     * @param {Number} value\n     * @returns {Number}\n     */\n    toNanos(value) {\n        return SPEC_NANOSECONDS.toNumber(this.toDuration(value));\n    }\n\n    /**\n     * @param {Number} value\n     * @returns {Number}\n     */\n    toMicros(value) {\n        // This library does not have support for micro\n        return SPEC_MICROSECONDS.toNumber(this.toDuration(value));\n    }\n\n    /**\n     * @param {Number} value\n     * @returns {Number}\n     */\n    toMillis(value) {\n        return SPEC_MILLISECONDS.toNumber(this.toDuration(value));\n    }\n\n    /**\n     * @param {Number} value\n     * @returns {Number}\n     */\n    toSeconds(value) {\n        return SPEC_SECONDS.toNumber(this.toDuration(value));\n    }\n\n    /**\n     * @param {Number} value\n     * @returns {Number}\n     */\n    toMinutes(value) {\n        return SPEC_MINUTES.toNumber(this.toDuration(value));\n    }\n\n    /**\n     * @returns {Number}\n     */\n    toHours(value) {\n        return SPEC_HOURS.toNumber(this.toDuration(value));\n    }\n\n    /**\n     * @param {Number} value\n     * @returns {Number}\n     */\n    toDays(value) {\n        return SPEC_DAYS.toNumber(this.toDuration(value));\n    }\n\n    /**\n     *\n     * @param {TimeUnit} timeUnit\n     * @returns {boolean}\n     */\n    equals(timeUnit) {\n        if (!timeUnit) {\n            return false;\n        }\n\n        return timeUnit.toString() === this.toString();\n    }\n    //endregion\n\n}\n//endregion\n\nexport {TimeUnit};\nexport default TimeUnit;"]}