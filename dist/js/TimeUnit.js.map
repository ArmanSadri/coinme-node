{"version":3,"sources":["../../src/js/TimeUnit.js"],"names":["shouldBeDefined","C0","C1","C2","C3","C4","C5","C6","MAX","Number","MAX_SAFE_INTEGER","MIN","MIN_SAFE_INTEGER","x","value","m","over","toNumberOrFail","SPEC_NANOSECONDS","unit","NANOS","shortName","longName","toNumber","duration","fromNanos","toNanos","valueInNanos","toMicros","chain","divide","done","toMillis","toSeconds","toMinutes","toHours","toDays","convert","timeUnit","excessNanos","SPEC_MICROSECONDS","MICROS","valueInMicros","SPEC_MILLISECONDS","MILLIS","valueInMillis","SPEC_SECONDS","SECONDS","valueInSeconds","SPEC_MINUTES","MINUTES","valueInMinutes","SPEC_HOURS","valueInHours","SPEC_DAYS","DAYS","valueInDays","TimeUnit","spec","toString","of","toChronoUnit","shouldBeNumber","shouldBeInstance","toDuration","NANOSECONDS","MICROSECONDS","MILLISECONDS","HOURS"],"mappings":"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","file":"TimeUnit.js","sourcesContent":["'use strict';\n\nimport Utility from \"./Utility\";\nimport CoreObject from \"./CoreObject\";\n\nimport {ChronoUnit} from 'js-joda/dist/js-joda'\nimport {Duration} from 'js-joda/dist/js-joda'\nimport Preconditions from \"./Preconditions\";\nimport math from 'mathjs';\n\nPreconditions.shouldBeDefined(ChronoUnit);\nPreconditions.shouldBeDefined(Duration);\n\n// Handy constants for conversions\nconst C0 = 1;\nconst C1 = C0 * 1000;\nconst C2 = C1 * 1000;\nconst C3 = C2 * 1000;\nconst C4 = C3 * 60;\nconst C5 = C4 * 60;\nconst C6 = C5 * 24;\n\nconst MAX = Number.MAX_SAFE_INTEGER;\nconst MIN = Number.MIN_SAFE_INTEGER;\n\n/**\n * Scale value by m, checking for overflow.\n * This has a short name to make above covaluee more reavalueable.\n * @param {Number|String} value\n * @param {Number} m\n * @param {Number} over\n * @return {Number}\n */\nfunction x(value, m, over) {\n    value = Utility.toNumberOrFail(value);\n    if (value > over) return MAX;\n    if (value < -over) return MIN;\n\n    return value * m;\n}\n\n//region specs\n\nconst SPEC_NANOSECONDS = {\n\n    /**\n     * @type {ChronoUnit}\n     */\n    unit: ChronoUnit.NANOS,\n\n    shortName: 'ns',\n\n    longName: 'nanos',\n\n    /**\n     * @param {Duration} duration\n     * @return {Number|number}\n     */\n    toNumber(duration) {\n        return this.fromNanos(duration.toNanos());\n    },\n\n    toNanos(valueInNanos)   {\n        return valueInNanos;\n    },\n\n    fromNanos(valueInNanos) {\n        return valueInNanos;\n    },\n\n    toMicros(valueInNanos)  {\n        return math.chain(valueInNanos)\n            .divide(\n                math.divide(C1, C0)\n            )\n            .done();\n        // return valueInNanos / (C1 / C0);\n    },\n\n    toMillis(valueInNanos)  {\n        return math.divide(valueInNanos, (math.divide(C2, C0)));\n        // return valueInNanos / (C2 / C0);\n    },\n\n    toSeconds(valueInNanos) {\n        return math.divide(valueInNanos, (math.divide(C3, C0)));\n        // return valueInNanos / (C3 / C0);\n    },\n\n    toMinutes(valueInNanos) {\n        return math.divide(valueInNanos, (math.divide(C4, C0)));\n        // return valueInNanos / (C4 / C0);\n    },\n\n    toHours(valueInNanos)   {\n        return math.divide(valueInNanos, (math.divide(C5, C0)));\n        // return valueInNanos / (C5 / C0);\n    },\n\n    toDays(valueInNanos)    {\n        return math.divide(valueInNanos, (math.divide(C6, C0)));\n        // return valueInNanos / (C6 / C0);\n    },\n\n    convert(value, timeUnit) {\n        return timeUnit.toNanos(value);\n    },\n\n    excessNanos(value, m) {\n        return (value - (m * C2));\n    }\n};\n\nconst SPEC_MICROSECONDS = {\n\n    unit: ChronoUnit.MICROS,\n\n    shortName: \"\\u03bcs\", // μs\n\n    longName: 'micros',\n\n    /**\n     * @param {Duration} duration\n     * @return {Number|number}\n     */\n    toNumber(duration) {\n        return this.fromNanos(duration.toNanos());\n    },\n\n    fromNanos(valueInNanos) {\n        return SPEC_NANOSECONDS.toMicros(valueInNanos);\n    },\n\n    toNanos(valueInMicros)   {\n        return x(valueInMicros, math.divide(C1, C0), math.divide(MAX, math.divide(C1, C0)));\n        // return x(valueInMicros, C1 / C0, MAX / (C1 / C0));\n    },\n\n    // toMicros(valueInMicros)  {\n    //     return valueInMicros;\n    // },\n    // toMillis(valueInMicros)  {\n    //     return valueInMicros / (C2 / C1);\n    // },\n    // toSeconds(valueInMicros) {\n    //     return valueInMicros / (C3 / C1);\n    // },\n    // toMinutes(valueInMicros) {\n    //     return valueInMicros / (C4 / C1);\n    // },\n    // toHours(valueInMicros)   {\n    //     return valueInMicros / (C5 / C1);\n    // },\n    // toDays(valueInMicros)    {\n    //     return valueInMicros / (C6 / C1);\n    // },\n    // convert(value, timeUnit) {\n    //     return timeUnit.toMicros(value);\n    // },\n    excessNanos(value, m) {\n        return ((value * C1) - (m * C2));\n    }\n};\n\nconst SPEC_MILLISECONDS = {\n\n    unit: ChronoUnit.MILLIS,\n\n    shortName: \"ms\", // μs\n\n    longName: 'millis',\n\n    /**\n     * @param {Duration} duration\n     * @return {Number|number}\n     */\n    toNumber(duration) {\n        return this.fromNanos(duration.toNanos());\n    },\n\n    fromNanos(valueInNanos) {\n        return SPEC_NANOSECONDS.toMillis(valueInNanos);\n    },\n\n    toNanos(valueInMillis)   {\n        return x(valueInMillis, math.divide(C2, C0), math.divide(MAX, math.divide(C2, C0)));\n        // return x(valueInMillis, C2 / C0, MAX / (C2 / C0));\n    },\n\n    // toMicros(valueInMillis)  {\n    //     return x(valueInMillis, C2 / C1, MAX / (C2 / C1));\n    // },\n    // toMillis(valueInMillis)  {\n    //     return valueInMillis;\n    // },\n    // toSeconds(valueInMillis) {\n    //     return valueInMillis / (C3 / C2);\n    // },\n    // toMinutes(valueInMillis) {\n    //     return valueInMillis / (C4 / C2);\n    // },\n    // toHours(valueInMillis)   {\n    //     return valueInMillis / (C5 / C2);\n    // },\n    // toDays(valueInMillis)    {\n    //     return valueInMillis / (C6 / C2);\n    // },\n    // convert(value, timeUnit) {\n    //     return timeUnit.toMillis(value);\n    // },\n\n    excessNanos(value, m) {\n        return 0;\n    }\n};\n\nconst SPEC_SECONDS = {\n\n    unit: ChronoUnit.SECONDS,\n\n    shortName: \"s\",\n\n    longName: 'seconds',\n\n    /**\n     * @param {Duration} duration\n     * @return {Number|number}\n     */\n    toNumber(duration) {\n        return this.fromNanos(duration.toNanos());\n    },\n\n    fromNanos(valueInNanos) {\n        return SPEC_NANOSECONDS.toSeconds(valueInNanos);\n    },\n\n    toNanos(valueInSeconds)   {\n        return x(valueInSeconds, math.divide(C3, C0), math.divide(MAX, math.divide(C3 / C0)));\n        // return x(valueInSeconds, C3 / C0, MAX / (C3 / C0));\n    },\n\n    // toMicros(valueInSeconds)  {\n    //     return x(valueInSeconds, C3 / C1, MAX / (C3 / C1));\n    // },\n    // toMillis(valueInSeconds)  {\n    //     return x(valueInSeconds, C3 / C2, MAX / (C3 / C2));\n    // },\n    // toSeconds(valueInSeconds) {\n    //     return valueInSeconds;\n    // },\n    // toMinutes(valueInSeconds) {\n    //     return valueInSeconds / (C4 / C3);\n    // },\n    // toHours(valueInSeconds)   {\n    //     return valueInSeconds / (C5 / C3);\n    // },\n    // toDays(valueInSeconds)    {\n    //     return valueInSeconds / (C6 / C3);\n    // },\n    // convert(value, timeUnit) {\n    //     return timeUnit.toSeconds(value);\n    // },\n\n    excessNanos(value, m) {\n        return 0;\n    }\n};\n\nconst SPEC_MINUTES = {\n\n    unit: ChronoUnit.MINUTES,\n\n    shortName: 'min',\n\n    longName: 'minutes',\n\n    /**\n     * @param {Duration} duration\n     * @return {Number|number}\n     */\n    toNumber(duration) {\n        return this.fromNanos(duration.toNanos());\n    },\n\n    fromNanos(valueInNanos) {\n        return SPEC_NANOSECONDS.toMinutes(valueInNanos);\n    },\n\n    toNanos(valueInMinutes)   {\n        return x(valueInMinutes, math.divide(C4, C0), math.divide(MAX, math.divide(C4 / C0)));\n        // return x(valueInMinutes, C4 / C0, MAX / (C4 / C0));\n    },\n\n    // toMicros(valueInMinutes)  {\n    //     return x(valueInMinutes, C4 / C1, MAX / (C4 / C1));\n    // },\n    // toMillis(valueInMinutes)  {\n    //     return x(valueInMinutes, C4 / C2, MAX / (C4 / C2));\n    // },\n    // toSeconds(valueInMinutes) {\n    //     return x(valueInMinutes, C4 / C3, MAX / (C4 / C3));\n    // },\n    // toMinutes(valueInMinutes) {\n    //     return valueInMinutes;\n    // },\n    // toHours(valueInMinutes)   {\n    //     return valueInMinutes / (C5 / C4);\n    // },\n    // toDays(valueInMinutes)    {\n    //     return valueInMinutes / (C6 / C4);\n    // },\n    // convert(value, timeUnit) {\n    //     return timeUnit.toMinutes(value);\n    // },\n\n    excessNanos(value, m) {\n        return 0;\n    }\n};\n\nconst SPEC_HOURS = {\n\n    shortName: \"h\",\n\n    longName: 'hours',\n\n    /**\n     * @param {Duration} duration\n     * @return {Number|number}\n     */\n    toNumber(duration) {\n        return this.fromNanos(duration.toNanos());\n    },\n\n    fromNanos(valueInNanos) {\n        return SPEC_NANOSECONDS.toHours(valueInNanos);\n    },\n\n    toNanos(valueInHours)   {\n        return x(valueInHours, C5 / C0, MAX / (C5 / C0));\n    },\n\n    // toMicros(valueInHours)  {\n    //     return x(valueInHours, C5 / C1, MAX / (C5 / C1));\n    // },\n    //\n    // toMillis(valueInHours)  {\n    //     return x(valueInHours, C5 / C2, MAX / (C5 / C2));\n    // },\n    //\n    // toSeconds(valueInHours) {\n    //     return x(valueInHours, C5 / C3, MAX / (C5 / C3));\n    // },\n    //\n    // toMinutes(valueInHours) {\n    //     return x(valueInHours, C5 / C4, MAX / (C5 / C4));\n    // },\n    //\n    // toHours(valueInHours)   {\n    //     return valueInHours;\n    // },\n    //\n    // toDays(valueInHours)    {\n    //     return valueInHours / (C6 / C5);\n    // },\n\n    // convert(value, timeUnit) {\n    //     return timeUnit.toHours(value);\n    // },\n\n    excessNanos(value, m) {\n        return 0;\n    }\n};\n\nconst SPEC_DAYS = {\n\n    unit: ChronoUnit.DAYS,\n\n    shortName: 'd',\n\n    longName: 'days',\n\n    toNanos(valueInDays)   {\n        return x(valueInDays, C6 / C0, MAX / (C6 / C0));\n    },\n\n    fromNanos(valueInNanos) {\n        // TimeUnit.NANOS.toDays(valueInNanos)\n        return SPEC_NANOSECONDS.toDays(valueInNanos);\n    },\n\n    toMicros(valueInDays)  {\n        return x(valueInDays, C6 / C1, MAX / (C6 / C1));\n    },\n\n    toMillis(valueInDays)  {\n        return x(valueInDays, C6 / C2, MAX / (C6 / C2));\n    },\n\n    toSeconds(valueInDays) {\n        return x(valueInDays, C6 / C3, MAX / (C6 / C3));\n    },\n\n    toMinutes(valueInDays) {\n        return x(valueInDays, C6 / C4, MAX / (C6 / C4));\n    },\n\n    /**\n     * @param {Number} valueInDays\n     * @return {Number} hours\n     */\n    toHours(valueInDays)   {\n        return x(valueInDays, C6 / C5, MAX / (C6 / C5));\n    },\n\n    toDays(valueInDays)    {\n        return valueInDays;\n    },\n\n    /**\n     *\n     * @param {Number} value\n     * @param {TimeUnit} timeUnit\n     * @returns {Number|*} days\n     */\n    convert(value, timeUnit) {\n        return timeUnit.toDays(value);\n    },\n\n    excessNanos(value, m) {\n        return 0;\n    }\n};\n//endregion\n\n//region TimeUnit\nclass TimeUnit extends CoreObject {\n\n    //region static TimeUnits\n    /**\n     * @return {TimeUnit}\n     */\n    static NANOSECONDS = new TimeUnit(SPEC_NANOSECONDS);\n\n    /**\n     * @return {TimeUnit}\n     */\n    static MICROSECONDS = new TimeUnit(SPEC_MICROSECONDS);\n\n    /**\n     * @return {TimeUnit}\n     */\n    static MILLISECONDS = new TimeUnit(SPEC_MILLISECONDS);\n\n    /**\n     * @return {TimeUnit}\n     */\n    static SECONDS = new TimeUnit(SPEC_SECONDS);\n\n    /**\n     * @return {TimeUnit}\n     */\n    static MINUTES = new TimeUnit(SPEC_MINUTES);\n\n    /**\n     * @return {TimeUnit}\n     */\n    static HOURS = new TimeUnit(SPEC_HOURS);\n\n    /**\n     * @return {TimeUnit}\n     */\n    static DAYS = new TimeUnit(SPEC_DAYS);\n    //endregion\n\n    /**\n     * @protected\n     * @param {Object} spec\n     */\n    constructor(spec) {\n        super();\n\n        /**\n         * @type {{unit: ChronoUnit, toString:function, equals:function, excessNanos:function, shortName:String, longName:String, toNumber:function}}\n         * @private\n         */\n        this.spec = spec;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return this.spec.shortName;\n    }\n\n    valueOf() {\n        return this.toString();\n    }\n\n    //region public methods\n    /**\n     *\n     * @returns {String}\n     */\n    get shortName() {\n        return this.spec.shortName;\n    }\n\n    /**\n     *\n     * @returns {String}\n     */\n    get longName() {\n        return this.spec.longName;\n    }\n\n    /**\n     * @return {ChronoUnit}\n     */\n    toChronoUnit() {\n        return this.spec.unit;\n    }\n\n    /**\n     *\n     * @param {Number} value - (the units of this number are assumed to be 'this.unit')\n     * @returns {Duration}\n     */\n    toDuration(value) {\n        value = Utility.toNumberOrFail(value, 'TimeUnit.toDuration(value) - value required');\n        return Duration.of(value, this.toChronoUnit());\n    }\n\n    //conversions\n\n    /**\n     * Converts from SOURCE value/units into DESTINATION (this) units.\n     *\n     * @param {Number} value The SOURCE value\n     * @param {TimeUnit} timeUnit  The SOURCE timeUnit\n     * @returns {Number} The destination value/units\n     */\n    convert(value, timeUnit) {\n        Preconditions.shouldBeNumber(value);\n        Preconditions.shouldBeInstance(timeUnit, TimeUnit);\n\n        let duration = Duration.of(value, timeUnit.toChronoUnit());\n\n        return this.spec.fromNanos(duration.toNanos());\n        // let numberOfNanos = sourceDuration.toNanos();\n        // let destinationDuration = this.toDuration(0);\n        //\n        // return destinationDuration.plusNanos(numberOfNanos);\n    }\n\n    /**\n     * @param {Number} value The value, in \"our\" units. If the unit is Millis, then your 'value' should be units.\n     *\n     * @return {Number}\n     */\n    toValue(value) {\n        return this.spec.fromNanos(\n            this.toDuration(value)\n                .toNanos());\n    }\n\n    /**\n     * @param {Number} value\n     * @returns {Number}\n     */\n    toNanos(value) {\n        return SPEC_NANOSECONDS.toNumber(this.toDuration(value));\n    }\n\n    /**\n     * @param {Number} value\n     * @returns {Number}\n     */\n    toMicros(value) {\n        // This library does not have support for micro\n        return SPEC_MICROSECONDS.toNumber(this.toDuration(value));\n    }\n\n    /**\n     * @param {Number} value\n     * @returns {Number}\n     */\n    toMillis(value) {\n        return SPEC_MILLISECONDS.toNumber(this.toDuration(value));\n    }\n\n    /**\n     * @param {Number} value\n     * @returns {Number}\n     */\n    toSeconds(value) {\n        return SPEC_SECONDS.toNumber(this.toDuration(value));\n    }\n\n    /**\n     * @param {Number} value\n     * @returns {Number}\n     */\n    toMinutes(value) {\n        return SPEC_MINUTES.toNumber(this.toDuration(value));\n    }\n\n    /**\n     * @returns {Number}\n     */\n    toHours(value) {\n        return SPEC_HOURS.toNumber(this.toDuration(value));\n    }\n\n    /**\n     * @param {Number} value\n     * @returns {Number}\n     */\n    toDays(value) {\n        return SPEC_DAYS.toNumber(this.toDuration(value));\n    }\n\n    /**\n     *\n     * @param {TimeUnit} timeUnit\n     * @returns {boolean}\n     */\n    equals(timeUnit) {\n        if (!timeUnit) {\n            return false;\n        }\n\n        return timeUnit.toString() === this.toString();\n    }\n    //endregion\n\n}\n//endregion\n\nexport {TimeUnit};\nexport default TimeUnit;"]}