{"version":3,"sources":["../../src/js/CoreObject.js"],"names":[],"mappings":"AAAA;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;IASqB;;;;;4BAEb,KAAK;AACL,mBAAO,gBAAM,GAAN,CAAU,IAAV,EAAgB,GAAhB,CAAP,CADK;;;;4BAIL,KAAK,OAAO;AACZ,mBAAO,gBAAM,GAAN,CAAU,IAAV,EAAgB,GAAhB,EAAqB,KAArB,CAAP,CADY;;;;AAIhB,aAViB,UAUjB,CAAY,OAAZ,EAAqB;8BAVJ,YAUI;;2EAVJ,wBAWJ,YADQ;;AAEjB,yBAAO,KAAP,QAAmB,OAAnB,EAFiB;;KAArB;;iBAViB;;mCAeN;AACP,mBAAO,KAAK,OAAL,GAAe,QAAf,EAAP,CADO;;;;kCAID;AACN,mBAAO,KAAK,WAAL,CADD;;;;kCAIO;AACb,mBAAO,IAAP,CADa;;;;mCAIC;AACd,mBAAO,YAAP,CADc;;;;;;;;;;;;gCAUH,OAAO;AAClB,gBAAI,eAAe,OAAO,KAAP,EAAc;AAC7B,uBAAO,KAAP,CAD6B;aAAjC;;AAIA,mBAAO,KAAP,EAAc;AACV,oBAAI,UAAU,IAAV,EAAgB;AAChB,2BAAO,IAAP,CADgB;iBAApB;;AAIA,wBAAQ,OAAO,cAAP,CAAsB,KAAtB,CAAR,CALU;aAAd;;AAQA,mBAAO,KAAP,CAbkB;;;;;;;;;;;;;yCAuBE,QAAQ;AAC5B,gBAAI,CAAC,KAAK,UAAL,CAAgB,MAAhB,CAAD,EAA0B;AAC1B,wCAAc,IAAd,CAAmB,IAAnB,EAAyB,MAAzB,EAAiC,oBAAjC,EAD0B;aAA9B;;AAIA,mBAAO,MAAP,CAL4B;;;;;;;;;;;mCAad,KAAK;AACnB,mBAAO,eAAe,IAAf,CADY;;;;WAzEN;EAAmB,gBAAM,MAAN;;kBAAnB","file":"CoreObject.js","sourcesContent":["'use strict';\n\nimport Ember from \"./Ember\";\nimport Lodash from \"lodash\";\nimport Preconditions from './Preconditions';\n\n/**\n * This is the base class for all classes in our architecture.\n *\n *\n * @abstract\n * @class\n */\nexport default class CoreObject extends Ember.Object {\n\n    get(key) {\n        return Ember.get(this, key);\n    }\n\n    set(key, value) {\n        return Ember.set(this, key, value);\n    }\n\n    constructor(options) {\n        super(...arguments);\n        Lodash.merge(this, options);\n    }\n\n    toString() {\n        return this.toClass().toString();\n    }\n\n    toClass() {\n        return this.constructor;\n    }\n\n    static toClass() {\n        return this;\n    }\n\n    static toString() {\n        return 'CoreObject';\n    }\n\n    /**\n     * Determines if a class definition is a subclass of CoreObject\n     *\n     * @param {*} clazz\n     * @returns {boolean}\n     */\n    static isClass(clazz) {\n        if ('function' !== typeof clazz) {\n            return false;\n        }\n\n        while (clazz) {\n            if (clazz === this) {\n                return true;\n            }\n\n            clazz = Object.getPrototypeOf(clazz);\n        }\n\n        return false;\n    }\n\n    /**\n     * Ensures that your object is an instance of this type.\n     *\n     * @param {*} object\n     * @returns {Object}\n     * @throws {PreconditionsError} if the type is incorrect\n     */\n    static shouldBeInstance(object) {\n        if (!this.isInstance(object)) {\n            Preconditions.fail(this, object, 'Should be instance');\n        }\n\n        return object;\n    }\n\n    /**\n     *\n     * @param {object} obj\n     * @returns {boolean}\n     */\n    static isInstance(obj) {\n        return obj instanceof this;\n    }\n}"]}