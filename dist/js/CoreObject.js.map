{"version":3,"sources":["../../src/js/CoreObject.js"],"names":[],"mappings":"AAAA;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA;;;;;;;;IAOqB,U;;;AAEjB,wBAAY,OAAZ,EAAqB;AAAA;;AAAA,mGACR,SADQ;;AAGjB,yBAAO,KAAP,QAAmB,OAAnB;AAHiB;AAIpB;;AAED;;;;;;;;;4BAKI,G,EAAK;AACL,mBAAO,gBAAM,GAAN,CAAU,IAAV,EAAgB,GAAhB,CAAP;AACH;;AAED;;;;;;;;;4BAMI,G,EAAK,K,EAAO;AACZ,4BAAM,GAAN,CAAU,IAAV,EAAgB,GAAhB,EAAqB,KAArB;;AAEA,mBAAO,IAAP;AACH;;AAED;;;;;;mCAGW;AACP,mBAAO,KAAK,OAAL,GAAe,QAAf,EAAP;AACH;;AAED;;;;;;;kCAIU;AACN,mBAAO,KAAK,WAAZ;AACH;;AAED;;;;;;;kCAIiB;AACb,mBAAO,IAAP;AACH;;AAED;;;;;;mCAGkB;AACd,mBAAO,KAAK,WAAL,CAAiB,IAAxB;AACH;;AAED;;;;;;;;;gCAMe,K,EAAO;AAClB,gBAAI,eAAe,OAAO,KAA1B,EAAiC;AAC7B,uBAAO,KAAP;AACH;;AAED,mBAAO,KAAP,EAAc;AACV,oBAAI,UAAU,IAAd,EAAoB;AAChB,2BAAO,IAAP;AACH;;AAED,wBAAQ,OAAO,cAAP,CAAsB,KAAtB,CAAR;AACH;;AAED,mBAAO,KAAP;AACH;;AAED;;;;;;;;;;yCAOwB,M,EAAQ;AAC5B,gBAAI,CAAC,KAAK,UAAL,CAAgB,MAAhB,CAAL,EAA8B;AAC1B,wCAAc,IAAd,CAAmB,IAAnB,EAAyB,MAAzB,EAAiC,oBAAjC;AACH;;AAED,mBAAO,MAAP;AACH;;AAED;;;;;;;;mCAKkB,G,EAAK;AACnB,mBAAO,eAAe,IAAtB;AACH;;AAED;;;;;;;;0CAKyB,G,EAAK;AAC1B,mBAAO,KAAK,UAAL,CAAgB,GAAhB,KAAwB,KAAK,OAAL,CAAa,GAAb,CAA/B;AACH;;;;EAhHmC,gBAAM,M;;kBAAzB,U","file":"CoreObject.js","sourcesContent":["'use strict';\n\nimport Ember from \"./Ember\";\nimport Lodash from \"lodash\";\nimport Preconditions from './Preconditions';\n\n/**\n * This is the base class for all classes in our architecture.\n *\n *\n * @abstract\n * @class\n */\nexport default class CoreObject extends Ember.Object {\n\n    constructor(options) {\n        super(...arguments);\n\n        Lodash.merge(this, options);\n    }\n\n    /**\n     *\n     * @param {string} key\n     * @returns {*|Object}\n     */\n    get(key) {\n        return Ember.get(this, key);\n    }\n\n    /**\n     *\n     * @param {string} key\n     * @param {*} value\n     * @returns {CoreObject|*}\n     */\n    set(key, value) {\n        Ember.set(this, key, value);\n\n        return this;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return this.toClass().toString();\n    }\n\n    /**\n     *\n     * @returns {Class<CoreObject>}\n     */\n    toClass() {\n        return this.constructor;\n    }\n\n    /**\n     *\n     * @returns {Class<CoreObject>}\n     */\n    static toClass() {\n        return this;\n    }\n\n    /**\n     * @returns {String}\n     */\n    static toString() {\n        return this.constructor.name;\n    }\n\n    /**\n     * Determines if a class definition is a subclass of CoreObject\n     *\n     * @param {*} clazz\n     * @returns {boolean}\n     */\n    static isClass(clazz) {\n        if ('function' !== typeof clazz) {\n            return false;\n        }\n\n        while (clazz) {\n            if (clazz === this) {\n                return true;\n            }\n\n            clazz = Object.getPrototypeOf(clazz);\n        }\n\n        return false;\n    }\n\n    /**\n     * Ensures that your object is an instance of this type.\n     *\n     * @param {*} object\n     * @returns {Object}\n     * @throws {PreconditionsError} if the type is incorrect\n     */\n    static shouldBeInstance(object) {\n        if (!this.isInstance(object)) {\n            Preconditions.fail(this, object, 'Should be instance');\n        }\n\n        return object;\n    }\n\n    /**\n     *\n     * @param {object} obj\n     * @returns {boolean}\n     */\n    static isInstance(obj) {\n        return obj instanceof this;\n    }\n\n    /**\n     *\n     * @param obj\n     * @return {boolean}\n     */\n    static isInstanceOrClass(obj) {\n        return this.isInstance(obj) || this.isClass(obj);\n    }\n\n}"]}