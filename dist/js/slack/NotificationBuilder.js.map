{"version":3,"sources":["../../../src/js/slack/NotificationBuilder.js"],"names":["NotificationBuilder","value","shouldBeString","set","text","icon","username","attachments","get","parent","JSON","stringify","toPayload","scope","url","payload","resolve","then","requestOptions","uri","method","body","json","debug","name","arguments","catch","err","warn","object","deps","toDependencyMap","Preconditions","shouldBeDefined","result","shouldNotBeArray","shouldBeObject"],"mappings":"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","file":"NotificationBuilder.js","sourcesContent":["'use strict';\n\nimport Promise from 'bluebird';\nimport Logger from 'winston';\nimport Preconditions from './../Preconditions';\nimport request from 'request-promise';\n\nimport CoreObject from '~/CoreObject';\nimport AbstractBuilder from './AbstractBuilder';\nimport AttachmentBuilder from './AttachmentBuilder';\nimport Ember from '~/Ember';\n\n/**\n * @class NotificationBuilder\n * @extends AbstractBuilder\n */\nclass NotificationBuilder extends AbstractBuilder {\n\n    /**\n     *\n     * @param {String} value\n     * @returns {NotificationBuilder}\n     */\n    channel(value) {\n        Preconditions.shouldBeString(value);\n\n        return this.set('payload.channel', value);\n    }\n\n    /**\n     *\n     *\n     * @param text\n     * @returns {NotificationBuilder}\n     */\n    text(text) {\n        Preconditions.shouldBeString(text);\n\n        return this.set('payload.text', text);\n    }\n\n    /**\n     *\n     * @param icon\n     * @returns {icon}\n     */\n    icon(icon) {\n        Preconditions.shouldBeString(icon);\n\n        return this.set('payload.icon_emoji', icon);\n    }\n\n    username(username) {\n        Preconditions.shouldBeString(username);\n\n        return this.set('payload.username', username);\n    }\n\n    /**\n     * @returns {Array}\n     */\n    attachments() {\n        let attachments = this.get('payload.attachments');\n\n        if (!attachments) {\n            attachments = [];\n            \n            this.set('payload.attachments', attachments);\n        }\n\n        return attachments;\n    }\n\n    /**\n     * @returns {AttachmentBuilder}\n     */\n    attachment() {\n        return new AttachmentBuilder({\n            parent: this\n        });\n    }\n\n    /**\n     * @returns {Object}\n     */\n    toPayload() {\n        return this.get('payload');\n    }\n\n    /**\n     * @returns {String}\n     */\n    toJson() {\n        return JSON.stringify(this.toPayload());\n    }\n\n    /**\n     *\n     * @return {Promise}\n     */\n    execute() {\n        let scope = this;\n\n        let url = this.url;\n        let payload = this.toPayload();\n\n        Preconditions.shouldBeString(scope.url, 'NotificationBuilder.execute(): url must be a string');\n\n        return Promise.resolve()\n            .then(() => {\n                //\n                // https://www.npmjs.com/package/request-promise\n                //\n                // var options = {\n                //    method: 'POST',\n                //    uri: 'http://posttestserver.com/post.php',\n                //    body: {\n                //        some: 'payload'\n                //    },\n                //    json: true // Automatically stringifies the body to JSON\n                // };\n\n                let requestOptions = {\n                    uri: url,\n                    method: 'POST',\n                    body: payload,\n                    json: true\n                };\n\n                Logger.debug(`[SLACK:${scope.name}] webhook `, JSON.stringify(payload));\n\n                return Promise.resolve(request(requestOptions))\n                    .then(function(value) {\n                        Logger.debug(`[SLACK:${scope.name}] webhook succeeded.`, arguments);\n\n                        return value;\n                    })\n                    .catch(function(err) {\n                        Logger.warn(`[SLACK:${scope.name}] webhook failed.`, arguments);\n\n                        throw err;\n                    });\n            });\n    }\n\n    /**\n     * Do not insert a Promise into this method.\n     *\n     * @param {Object|NotificationBuilder} object\n     * @param {Object|undefined} deps\n     * @param {Preconditions|undefined} deps.Preconditions\n     * @return {Promise<NotificationBuilder>}\n     */\n    static innerCast(object, deps) {\n        deps = CoreObject.toDependencyMap(deps);\n\n        let Preconditions = deps.Preconditions;\n\n        Preconditions.shouldBeDefined(object);\n\n        return Promise.resolve(object)\n            .then(function(result) {\n                Preconditions.shouldBeDefined(object, 'Casted object must be defined.');\n                Preconditions.shouldNotBeArray(object, 'Casted object must NOT be an array.');\n                Preconditions.shouldBeObject(object, 'Casted object must be an object.');\n\n                if (result instanceof NotificationBuilder) {\n                    return result;\n                }\n\n                return new NotificationBuilder(object);\n            });\n    }\n}\n\nexport default NotificationBuilder;"]}