{"version":3,"sources":["../../../src/js/slack/NotificationBuilder.js"],"names":[],"mappings":"AAAA;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEM;;;;;;;;;;;;;;;;;;gCAOM,OAAO;AACX,oCAAc,cAAd,CAA6B,KAA7B,EADW;;AAGX,mBAAO,KAAK,GAAL,CAAS,SAAT,EAAoB,KAApB,CAAP,CAHW;;;;;;;;;;;;6BAYV,OAAM;AACP,oCAAc,cAAd,CAA6B,KAA7B,EADO;;AAGP,mBAAO,KAAK,GAAL,CAAS,MAAT,EAAiB,KAAjB,CAAP,CAHO;;;;;;;;;;;6BAWN,OAAM;AACP,oCAAc,cAAd,CAA6B,KAA7B,EADO;;AAGP,mBAAO,KAAK,GAAL,CAAS,YAAT,EAAuB,KAAvB,CAAP,CAHO;;;;iCAMF,WAAU;AACf,oCAAc,cAAd,CAA6B,SAA7B,EADe;;AAGf,mBAAO,KAAK,GAAL,CAAS,UAAT,EAAqB,SAArB,CAAP,CAHe;;;;sCAML;AACV,mBAAO,gBAAM,cAAN,CAAqB,IAArB,EAA2B,aAA3B,EAA0C,EAA1C,CAAP,CADU;;;;qCAID;AACT,mBAAO,gCAAsB,IAAtB,CAAP,CADS;;;;oCAID;AACR,mBAAO,KAAK,GAAL,CAAS,SAAT,CAAP,CADQ;;;;iCAIH;AACL,mBAAO,KAAK,SAAL,CAAe,KAAK,SAAL,EAAf,CAAP,CADK;;;;;;;;;;kCAQC;AACN,gBAAI,QAAQ,IAAR,CADE;;AAGN,gBAAI,MAAM,KAAK,GAAL,CAHJ;AAIN,gBAAI,UAAU,KAAK,SAAL,EAAV,CAJE;;AAMN,oCAAc,cAAd,CAA6B,MAAM,GAAN,EAAW,qDAAxC,EANM;;AAQN,mBAAO,mBAAQ,OAAR,GACF,IADE,CACG,YAAM;;;;;;;;;;;;;AAcR,oBAAI,iBAAiB;AACjB,yBAAK,GAAL;AACA,4BAAQ,MAAR;AACA,0BAAM,OAAN;AACA,0BAAM,IAAN;iBAJA,CAdI;;AAqBR,kCAAO,KAAP,aAAuB,MAAM,IAAN,eAAvB,EAA+C,cAA/C,EArBQ;;AAuBR,uBAAO,mBAAQ,OAAR,CAAgB,8BAAQ,cAAR,CAAhB,EACF,IADE,CACG,UAAS,KAAT,EAAgB;AAClB,sCAAO,KAAP,aAAuB,MAAM,IAAN,yBAAvB,EAAyD,SAAzD,EADkB;;AAGlB,2BAAO,KAAP,CAHkB;iBAAhB,CADH,CAMF,KANE,CAMI,UAAS,GAAT,EAAc;AACjB,sCAAO,IAAP,aAAsB,MAAM,IAAN,sBAAtB,EAAqD,SAArD,EADiB;;AAGjB,0BAAM,GAAN,CAHiB;iBAAd,CANX,CAvBQ;aAAN,CADV,CARM;;;;;;;;;;;;;;kCAsDO,QAAQ,MAAM;AAC3B,mBAAO,qBAAW,eAAX,CAA2B,IAA3B,CAAP,CAD2B;;AAG3B,gBAAI,gBAAgB,KAAK,aAAL,CAHO;;AAK3B,0BAAc,eAAd,CAA8B,MAA9B,EAL2B;;AAO3B,mBAAO,mBAAQ,OAAR,CAAgB,MAAhB,EACF,IADE,CACG,UAAS,MAAT,EAAiB;AACnB,8BAAc,eAAd,CAA8B,MAA9B,EAAsC,gCAAtC,EADmB;AAEnB,8BAAc,gBAAd,CAA+B,MAA/B,EAAuC,qCAAvC,EAFmB;AAGnB,8BAAc,cAAd,CAA6B,MAA7B,EAAqC,kCAArC,EAHmB;;AAKnB,oBAAI,kBAAkB,mBAAlB,EAAuC;AACvC,2BAAO,MAAP,CADuC;iBAA3C;;AAIA,uBAAO,IAAI,mBAAJ,CAAwB,MAAxB,CAAP,CATmB;aAAjB,CADV,CAP2B;;;;WApH7B;;;kBA0IS","file":"NotificationBuilder.js","sourcesContent":["'use strict';\n\nimport Promise from 'bluebird';\nimport Logger from 'winston';\nimport Preconditions from 'preconditions';\nimport request from 'request-promise';\n\nimport CoreObject from '~/CoreObject';\nimport AbstractBuilder from '../slack/AbstractBuilder';\nimport AttachmentBuilder from '../slack/AttachmentBuilder';\nimport Ember from '~/ember';\n\nclass NotificationBuilder extends AbstractBuilder {\n\n    /**\n     *\n     * @param {String} value\n     * @returns {NotificationBuilder}\n     */\n    channel(value) {\n        Preconditions.shouldBeString(value);\n\n        return this.set('channel', value);\n    }\n\n    /**\n     *\n     *\n     * @param text\n     * @returns {NotificationBuilder}\n     */\n    text(text) {\n        Preconditions.shouldBeString(value);\n\n        return this.set('text', text);\n    }\n\n    /**\n     *\n     * @param icon\n     * @returns {icon}\n     */\n    icon(icon) {\n        Preconditions.shouldBeString(value);\n\n        return this.set('icon_emoji', icon);\n    }\n\n    username(username) {\n        Preconditions.shouldBeString(username);\n\n        return this.set('username', username);\n    }\n\n    attachments() {\n        return Ember.getWithDefault(this, 'attachments', []);\n    }\n\n    attachment() {\n        return new AttachmentBuilder(this);\n    }\n\n    toPayload() {\n        return this.get('payload');\n    }\n\n    toJson() {\n        return JSON.stringify(this.toPayload());\n    }\n\n    /**\n     *\n     * @return {Promise}\n     */\n    execute() {\n        let scope = this;\n\n        let url = this.url;\n        let payload = this.toPayload();\n\n        Preconditions.shouldBeString(scope.url, 'NotificationBuilder.execute(): url must be a string');\n\n        return Promise.resolve()\n            .then(() => {\n                //\n                // https://www.npmjs.com/package/request-promise\n                //\n                // var options = {\n                //    method: 'POST',\n                //    uri: 'http://posttestserver.com/post.php',\n                //    body: {\n                //        some: 'payload'\n                //    },\n                //    json: true // Automatically stringifies the body to JSON\n                // };\n\n\n                let requestOptions = {\n                    uri: url,\n                    method: 'POST',\n                    body: payload,\n                    json: true\n                };\n\n                Logger.debug(`[SLACK:${scope.name}] webhook `, requestOptions);\n\n                return Promise.resolve(request(requestOptions))\n                    .then(function(value) {\n                        Logger.debug(`[SLACK:${scope.name}] webhook succeeded.`, arguments);\n\n                        return value;\n                    })\n                    .catch(function(err) {\n                        Logger.warn(`[SLACK:${scope.name}] webhook failed.`, arguments);\n\n                        throw err;\n                    });\n            });\n    }\n\n    /**\n     * Do not insert a Promise into this method.\n     *\n     * @param {Object|NotificationBuilder} object\n     * @param {Object|undefined} deps\n     * @param {Preconditions|undefined} deps.Preconditions\n     * @return {Promise<NotificationBuilder>}\n     */\n    static innerCast(object, deps) {\n        deps = CoreObject.toDependencyMap(deps);\n\n        let Preconditions = deps.Preconditions;\n\n        Preconditions.shouldBeDefined(object);\n\n        return Promise.resolve(object)\n            .then(function(result) {\n                Preconditions.shouldBeDefined(object, 'Casted object must be defined.');\n                Preconditions.shouldNotBeArray(object, 'Casted object must NOT be an array.');\n                Preconditions.shouldBeObject(object, 'Casted object must be an object.');\n\n                if (result instanceof NotificationBuilder) {\n                    return result;\n                }\n\n                return new NotificationBuilder(object);\n            });\n    }\n}\n\nexport default NotificationBuilder;"]}