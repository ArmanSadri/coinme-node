{"version":3,"sources":["../../../src/js/slack/AttachmentBuilder.js"],"names":[],"mappings":"AAAA;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEM,iB;;;AAEF;;;;;AAIA,+BAAY,OAAZ,EAAqB;AAAA;;AACjB,gCAAc,cAAd,CAA6B,OAA7B,EAAsC,uDAAtC;;AAEA;;;AAGA,YAAI,SAAS,kBAAQ,IAAR,CAAa,OAAb,EAAsB,QAAtB,EAAgC;AACzC,+CADyC;AAEzC,sBAAU;AAF+B,SAAhC,CAAb;;AANiB,yGAWX,OAXW;;AAajB,cAAK,OAAL,GAAe,MAAf;;AAEA,YAAI,UAAU,kBAAQ,QAAR,CAAiB,MAAK,OAAtB,EAA+B;AACzC,uBAAW,CAAC,SAAD,EAAY,MAAZ,EAAoB,QAApB,CAD8B;AAEzC,mBAAO;AAFkC,SAA/B,CAAd;;AAKA,eACK,WADL,GAEK,IAFL,CAEU,OAFV;AApBiB;AAuBpB;;AAED;;;;;;;;;;AAQA;;;;;8BAKM,K,EAAO;AACT,oCAAc,cAAd,CAA6B,KAA7B;;AAEA,mBAAO,KAAK,gBAAL,CAAsB;AACzB,uBAAO;AADkB,aAAtB,CAAP;AAGH;;AAED;;;;;;;;8BAKM,M,EAAO;AACT,oCAAc,cAAd,CAA6B,MAA7B;;AAEA,mBAAO,KAAK,gBAAL,CAAsB;AACzB,uBAAO;AADkB,aAAtB,CAAP;AAGH;;AAED;;;;;;;;6BAKK,K,EAAO;AACR,oCAAc,cAAd,CAA6B,KAA7B;;AAEA,mBAAO,KAAK,gBAAL,CAAsB;AACzB,sBAAM;AADmB,aAAtB,CAAP;AAGH;;AAED;;;;;;gCAGQ;AACJ,mBAAO,2BAAiB;AACpB,wBAAQ;AADY,aAAjB,EAGF,KAHE,EAAP;AAIH;;AAED;;;;;;;iCAIS;AACL,gBAAI,SAAS,KAAK,GAAL,CAAS,gBAAT,CAAb;;AAEA,gBAAI,CAAC,MAAL,EAAa;AACT,yBAAS,EAAT;;AAEA,qBAAK,GAAL,CAAS,gBAAT,EAA2B,MAA3B;AACH;;AAED,mBAAO,MAAP;AACH;;;4BAnEY;AACT,mBAAO,KAAK,OAAZ;AACH;;;;;;kBAoEU,iB","file":"AttachmentBuilder.js","sourcesContent":["'use strict';\n\nimport Preconditions from \"../Preconditions\";\nimport AbstractBuilder from \"../slack/AbstractBuilder\";\nimport FieldBuilder from \"../slack/FieldBuilder\";\nimport Utility from \"../Utility\";\nimport NotificationBuilder from \"./NotificationBuilder\";\n\nclass AttachmentBuilder extends AbstractBuilder {\n\n    /**\n     *\n     * @param {{parent: NotificationBuilder}} options\n     */\n    constructor(options) {\n        Preconditions.shouldBeObject(options, 'AttachmentBuilder constructor requires configuration.');\n\n        /**\n         * @type {NotificationBuilder}\n         */\n        let parent = Utility.take(options, 'parent', {\n            type: NotificationBuilder,\n            required: true\n        });\n\n        super(options);\n\n        this._parent = parent;\n\n        let payload = Utility.defaults(this.payload, {\n            mrkdwn_in: ['pretext', 'text', 'fields'],\n            color: 'good'\n        });\n\n        parent\n            .attachments()\n            .push(payload);\n    }\n\n    /**\n     *\n     * @returns {AttachmentBuilder}\n     */\n    get parent() {\n        return this._parent;\n    }\n\n    /**\n     *\n     * @param {String} value\n     * @returns {AttachmentBuilder}\n     */\n    title(value) {\n        Preconditions.shouldBeString(value);\n\n        return this.mergeIntoPayload({\n            title: value\n        });\n    }\n\n    /**\n     *\n     * @param color\n     * @returns {AttachmentBuilder}\n     */\n    color(color) {\n        Preconditions.shouldBeString(color);\n\n        return this.mergeIntoPayload({\n            color: color\n        });\n    }\n\n    /**\n     *\n     * @param {String} value\n     * @returns {AttachmentBuilder}\n     */\n    text(value) {\n        Preconditions.shouldBeString(value);\n\n        return this.mergeIntoPayload({\n            text: value\n        });\n    }\n\n    /**\n     * @returns {FieldBuilder}\n     */\n    field() {\n        return new FieldBuilder({\n            parent: this\n        })\n            .small();\n    }\n\n    /**\n     *\n     * @returns {[]}\n     */\n    fields() {\n        let fields = this.get('payload.fields');\n\n        if (!fields) {\n            fields = [];\n\n            this.set('payload.fields', fields);\n        }\n\n        return fields;\n    }\n}\n\nexport default AttachmentBuilder;\n"]}