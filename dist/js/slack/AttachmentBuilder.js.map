{"version":3,"sources":["../../../src/js/slack/AttachmentBuilder.js"],"names":["AttachmentBuilder","options","shouldBeObject","parent","take","type","required","_parent","payload","defaults","mrkdwn_in","color","attachments","push","value","shouldBeString","mergeIntoPayload","title","text","small","fields","get","set"],"mappings":"AAAA;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,iB;;;AAEF;;;;AAIA,+BAAYC,OAAZ,EAAqB;AAAA;;AACjB,gCAAcC,cAAd,CAA6BD,OAA7B,EAAsC,uDAAtC;;AAEA;;;AAGA,YAAIE,SAAS,kBAAQC,IAAR,CAAaH,OAAb,EAAsB,QAAtB,EAAgC;AACzCI,+CADyC;AAEzCC,sBAAU;AAF+B,SAAhC,CAAb;;AANiB,0IAWXL,OAXW;;AAajB,cAAKM,OAAL,GAAeJ,MAAf;;AAEA,YAAIK,UAAU,kBAAQC,QAAR,CAAiB,MAAKD,OAAtB,EAA+B;AACzCE,uBAAW,CAAC,SAAD,EAAY,MAAZ,EAAoB,QAApB,CAD8B;AAEzCC,mBAAO;AAFkC,SAA/B,CAAd;;AAKAR,eACKS,WADL,GAEKC,IAFL,CAEUL,OAFV;AApBiB;AAuBpB;;AAED;;;;;;;;;;AAQA;;;;;8BAKMM,K,EAAO;AACT,oCAAcC,cAAd,CAA6BD,KAA7B;;AAEA,mBAAO,KAAKE,gBAAL,CAAsB;AACzBC,uBAAOH;AADkB,aAAtB,CAAP;AAGH;;AAED;;;;;;;;8BAKMH,M,EAAO;AACT,oCAAcI,cAAd,CAA6BJ,MAA7B;;AAEA,mBAAO,KAAKK,gBAAL,CAAsB;AACzBL,uBAAOA;AADkB,aAAtB,CAAP;AAGH;;AAED;;;;;;;;6BAKKG,K,EAAO;AACR,oCAAcC,cAAd,CAA6BD,KAA7B;;AAEA,mBAAO,KAAKE,gBAAL,CAAsB;AACzBE,sBAAMJ;AADmB,aAAtB,CAAP;AAGH;;AAED;;;;;;gCAGQ;AACJ,mBAAO,2BAAiB;AACpBX,wBAAQ;AADY,aAAjB,EAGFgB,KAHE,EAAP;AAIH;;AAED;;;;;;;iCAIS;AACL,gBAAIC,SAAS,KAAKC,GAAL,CAAS,gBAAT,CAAb;;AAEA,gBAAI,CAACD,MAAL,EAAa;AACTA,yBAAS,EAAT;;AAEA,qBAAKE,GAAL,CAAS,gBAAT,EAA2BF,MAA3B;AACH;;AAED,mBAAOA,MAAP;AACH;;;4BAnEY;AACT,mBAAO,KAAKb,OAAZ;AACH;;;;;;kBAoEUP,iB","file":"AttachmentBuilder.js","sourcesContent":["'use strict';\n\nimport Preconditions from \"../Preconditions\";\nimport AbstractBuilder from \"../slack/AbstractBuilder\";\nimport FieldBuilder from \"../slack/FieldBuilder\";\nimport Utility from \"../Utility\";\nimport NotificationBuilder from \"./NotificationBuilder\";\n\nclass AttachmentBuilder extends AbstractBuilder {\n\n    /**\n     *\n     * @param {{parent: NotificationBuilder}} options\n     */\n    constructor(options) {\n        Preconditions.shouldBeObject(options, 'AttachmentBuilder constructor requires configuration.');\n\n        /**\n         * @type {NotificationBuilder}\n         */\n        let parent = Utility.take(options, 'parent', {\n            type: NotificationBuilder,\n            required: true\n        });\n\n        super(options);\n\n        this._parent = parent;\n\n        let payload = Utility.defaults(this.payload, {\n            mrkdwn_in: ['pretext', 'text', 'fields'],\n            color: 'good'\n        });\n\n        parent\n            .attachments()\n            .push(payload);\n    }\n\n    /**\n     *\n     * @returns {AttachmentBuilder}\n     */\n    get parent() {\n        return this._parent;\n    }\n\n    /**\n     *\n     * @param {String} value\n     * @returns {AttachmentBuilder}\n     */\n    title(value) {\n        Preconditions.shouldBeString(value);\n\n        return this.mergeIntoPayload({\n            title: value\n        });\n    }\n\n    /**\n     *\n     * @param color\n     * @returns {AttachmentBuilder}\n     */\n    color(color) {\n        Preconditions.shouldBeString(color);\n\n        return this.mergeIntoPayload({\n            color: color\n        });\n    }\n\n    /**\n     *\n     * @param {String} value\n     * @returns {AttachmentBuilder}\n     */\n    text(value) {\n        Preconditions.shouldBeString(value);\n\n        return this.mergeIntoPayload({\n            text: value\n        });\n    }\n\n    /**\n     * @returns {FieldBuilder}\n     */\n    field() {\n        return new FieldBuilder({\n            parent: this\n        })\n            .small();\n    }\n\n    /**\n     *\n     * @returns {[]}\n     */\n    fields() {\n        let fields = this.get('payload.fields');\n\n        if (!fields) {\n            fields = [];\n\n            this.set('payload.fields', fields);\n        }\n\n        return fields;\n    }\n}\n\nexport default AttachmentBuilder;\n"]}