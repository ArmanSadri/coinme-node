{"version":3,"sources":["../../../src/js/slack/NotificationService.js"],"names":[],"mappings":"AAAA;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEM,mB;;;;;;;;AAMF,iCAAY,OAAZ,EAAqB;AAAA;;AAAA,2GACX,OADW;;AAGjB,YAAI,CAAC,MAAK,SAAV,EAAqB;AACjB,kBAAK,SAAL,GAAiB,EAAjB;AACH;;AAED,YAAI,CAAC,MAAK,QAAV,EAAoB;AAChB,kBAAK,QAAL,GAAgB,EAAhB;AACH;;AAED,cAAK,QAAL,CAAc,cAAd,EAA8B,mCAAyB;AACnD,kBAAM;AAD6C,SAAzB,CAA9B;;AAIA,cAAK,OAAL,GAAe,EAAf;AAfiB;AAgBpB;;;;yCAEgB,O,EAAS;AACtB,oCAAc,cAAd,CAA6B,OAA7B,EAAsC,wBAAtC;AACA,4BAAO,MAAP,CAAc,KAAK,OAAnB,EAA4B,OAA5B;AACH;;;;;;;;;;;iCAQQ,gB,EAAkB,oB,EAAsB;AAC7C,oCAAc,cAAd,CAA6B,gBAA7B,EAA+C,iCAA/C;AACA,oCAAc,cAAd,CAA6B,oBAA7B,EAAmD,wCAAnD;;AAEA,gBAAI,EAAE,8DAAF,CAAJ,EAA6D;AACzD,oBAAI,UAAU,oBAAd;;AAEA,uCAAuB,mCAAyB,OAAzB,CAAvB;AACH;;AAED,iBAAK,QAAL,CAAc,gBAAd,IAAkC,qBAAqB,IAAvD;AACA,iBAAK,SAAL,CAAe,qBAAqB,IAApC,IAA4C,oBAA5C;;AAEA,mBAAO,IAAP;AACH;;;kCAES;AACN,gBAAI,UAAU,kCAAwB;AAClC,qBAAK,KAAK;AADwB,aAAxB,CAAd;;AAIA,gBAAI,KAAK,OAAT,EAAkB;AACd,wBAAQ,gBAAR,CAAyB,KAAK,OAA9B;AACH;;AAED,mBAAO,OAAP;AACH;;;;;;;;;;6CAOoB,gB,EAAkB;AACnC,oCAAc,cAAd,CAA6B,wBAA7B;;AAEA,gBAAI,2BAA2B,KAAK,QAAL,CAAc,gBAAd,CAA/B;AACA,gBAAI,uBAAuB,KAAK,SAAL,CAAe,wBAAf,CAA3B;;AAEA,oCAAc,eAAd,CAA8B,oBAA9B,EAAoD,yCAAyC,gBAA7F;;AAEA,mBAAO,oBAAP;AACH;;;;;;;;;;;+BAQM,I,EAAM,I,EAAM;AACf,oCAAc,cAAd,CAA6B,IAA7B,EAAmC,8DAAnC;;AAEA,mBAAO,QAAQ,EAAf;;AAEA,gBAAI,MAAM,KAAK,GAAf;;AAEA,gBAAI,uBAAuB,KAAK,oBAAL,CAA0B,IAA1B,CAA3B;AACA,gBAAI,UAAU,qBAAqB,MAArB,CAA4B,KAAK,OAAL,EAA5B,EAA4C,IAA5C,CAAd;;AAEA,mBAAO,QACF,IADE,CACG,UAAC,OAAD,EAAa;AACf,wCAAc,eAAd,CAA8B,OAA9B,EAAuC,oBAAoB,IAA3D;;AAEA,oBAAI,CAAC,QAAQ,GAAb,EAAkB;AACd,4BAAQ,GAAR,GAAc,GAAd;AACH;;AAED,wCAAc,cAAd,CAA6B,QAAQ,GAArC,EAA0C,yDAA1C;;;;AAIA,uBAAO,mBAAQ,OAAR,CAAgB,QAAQ,OAAR,EAAhB,CAAP;AACH,aAbE,CAAP;AAcH;;;;;;QAGI,mB,GAAA,mB;kBAEM,IAAI,mBAAJ,CAAwB,EAAxB,C","file":"NotificationService.js","sourcesContent":["'use strict';\n\nimport Logger from 'winston';\nimport Lodash from 'lodash/index';\nimport Preconditions from '~/Preconditions';\nimport NotificationTemplate from './NotificationTemplate';\nimport NotificationBuilder from './NotificationBuilder';\nimport CoreObject from '~/CoreObject';\nimport Promise from 'bluebird';\n\nclass NotificationService extends CoreObject {\n\n    /**\n     *\n     * @param {Object} options\n     */\n    constructor(options) {\n        super(options);\n\n        if (!this.templates) {\n            this.templates = {};\n        }\n\n        if (!this.mappings) {\n            this.mappings = {};\n        }\n\n        this.register('DEFAULT_TYPE', new NotificationTemplate({\n            name: 'DEFAULT_TEMPLATE'\n        }));\n\n        this.payload = {};\n    }\n\n    mergeIntoPayload(payload) {\n        Preconditions.shouldBeObject(payload, 'Payload must be object');\n        Lodash.assign(this.payload, payload);\n    }\n\n    /**\n     *\n     * @param {String} notificationType\n     * @param {NotificationTemplate} notificationTemplate\n     * @return {NotificationService}\n     */\n    register(notificationType, notificationTemplate) {\n        Preconditions.shouldBeString(notificationType, 'notificationType must be string');\n        Preconditions.shouldBeObject(notificationTemplate, 'notificationTemplate must be an object');\n\n        if (!(notificationTemplate instanceof NotificationTemplate)) {\n            let options = notificationTemplate;\n\n            notificationTemplate = new NotificationTemplate(options);\n        }\n\n        this.mappings[notificationType] = notificationTemplate.name;\n        this.templates[notificationTemplate.name] = notificationTemplate;\n\n        return this;\n    }\n\n    builder() {\n        let builder = new NotificationBuilder({\n            url: this.url\n        });\n        \n        if (this.payload) {\n            builder.mergeIntoPayload(this.payload);\n        }\n\n        return builder;\n    }\n\n    /**\n     *\n     * @param {String} notificationType\n     * @returns {NotificationTemplate}\n     */\n    notificationTemplate(notificationType) {\n        Preconditions.shouldBeString('param:notificationType');\n\n        let notificationTemplateName = this.mappings[notificationType];\n        var notificationTemplate = this.templates[notificationTemplateName];\n\n        Preconditions.shouldBeDefined(notificationTemplate, 'Notification template not found for ' + notificationType);\n\n        return notificationTemplate;\n    }\n\n    /**\n     *\n     * @param {String} type\n     * @param {*|undefined} data\n     * @return {Promise}\n     */\n    notify(type, data) {\n        Preconditions.shouldBeString(type, 'NotificationService.notify(type, data): type must be string.');\n        //this.Preconditions.shouldBeDefined(data, 'NotificationService.notify(type, data): data must be defined.');\n        data = data || {};\n\n        let url = this.url;\n\n        let notificationTemplate = this.notificationTemplate(type);\n        let promise = notificationTemplate.render(this.builder(), data);\n\n        return promise\n            .then((builder) => {\n                Preconditions.shouldBeDefined(builder, 'No builder for ' + type);\n\n                if (!builder.url) {\n                    builder.url = url;\n                }\n\n                Preconditions.shouldBeString(builder.url, 'NotificationService.notify(): builder.url was undefined');\n                // Attachments without top level text are valid.\n                //Preconditions.shouldBeString(payload.text, 'builder did not complete \\'text\\' property. ' + JSON.stringify(payload));\n\n                return Promise.resolve(builder.execute());\n            });\n    }\n}\n\nexport { NotificationService };\n\nexport default new NotificationService({\n\n});\n"]}