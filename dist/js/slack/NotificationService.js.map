{"version":3,"sources":["../../../src/js/slack/NotificationService.js"],"names":[],"mappings":"AAAA;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEM;;;;;;;;AAMF,aANE,mBAMF,CAAY,OAAZ,EAAqB;8BANnB,qBAMmB;;2EANnB,gCAOQ,UADW;;AAGjB,YAAI,CAAC,MAAK,SAAL,EAAgB;AACjB,kBAAK,SAAL,GAAiB,EAAjB,CADiB;SAArB;;AAIA,YAAI,CAAC,MAAK,QAAL,EAAe;AAChB,kBAAK,QAAL,GAAgB,EAAhB,CADgB;SAApB;;AAIA,cAAK,QAAL,CAAc,cAAd,EAA8B,mCAAyB;AACnD,kBAAM,kBAAN;SAD0B,CAA9B,EAXiB;;AAejB,cAAK,OAAL,GAAe,EAAf,CAfiB;;KAArB;;iBANE;;yCAwBe,SAAS;AACtB,oCAAc,cAAd,CAA6B,OAA7B,EAAsC,wBAAtC,EADsB;AAEtB,4BAAO,MAAP,CAAc,KAAK,OAAL,EAAc,OAA5B,EAFsB;;;;;;;;;;;;iCAWjB,kBAAkB,sBAAsB;AAC7C,oCAAc,cAAd,CAA6B,gBAA7B,EAA+C,iCAA/C,EAD6C;AAE7C,oCAAc,cAAd,CAA6B,oBAA7B,EAAmD,wCAAnD,EAF6C;;AAI7C,gBAAI,EAAE,+DAAF,EAAyD;AACzD,oBAAI,UAAU,oBAAV,CADqD;;AAGzD,uCAAuB,mCAAyB,OAAzB,CAAvB,CAHyD;aAA7D;;AAMA,iBAAK,QAAL,CAAc,gBAAd,IAAkC,qBAAqB,IAArB,CAVW;AAW7C,iBAAK,SAAL,CAAe,qBAAqB,IAArB,CAAf,GAA4C,oBAA5C,CAX6C;;AAa7C,mBAAO,IAAP,CAb6C;;;;kCAgBvC;AACN,gBAAI,UAAU,kCAAwB;AAClC,qBAAK,KAAK,GAAL;aADK,CAAV,CADE;;AAKN,gBAAI,KAAK,OAAL,EAAc;AACd,wBAAQ,gBAAR,CAAyB,KAAK,OAAL,CAAzB,CADc;aAAlB;;AAIA,mBAAO,OAAP,CATM;;;;6CAYW,kBAAkB;AACnC,gBAAI,2BAA2B,KAAK,QAAL,CAAc,gBAAd,CAA3B,CAD+B;AAEnC,gBAAI,uBAAuB,KAAK,SAAL,CAAe,wBAAf,CAAvB,CAF+B;;AAInC,oCAAc,eAAd,CAA8B,oBAA9B,EAAoD,yCAAyC,gBAAzC,CAApD,CAJmC;;AAMnC,mBAAO,oBAAP,CANmC;;;;;;;;;;;;+BAehC,MAAM,MAAM;AACf,oCAAc,cAAd,CAA6B,IAA7B,EAAmC,8DAAnC;;AADe,gBAGf,GAAO,QAAQ,EAAR,CAHQ;;AAKf,gBAAI,MAAM,KAAK,GAAL,CALK;AAMf,gBAAI,QAAQ,IAAR,CANW;;AAQf,gBAAI,uBAAuB,KAAK,oBAAL,CAA0B,IAA1B,CAAvB,CARW;AASf,gBAAI,UAAU,KAAK,OAAL,EAAV,CATW;AAUf,gBAAI,UAAU,qBAAqB,MAArB,CAA4B,OAA5B,EAAqC,IAArC,CAAV,CAVW;;AAYf,mBAAO,QACF,IADE,CACG,UAAC,OAAD,EAAa;;;AAGf,wCAAc,eAAd,CAA8B,OAA9B,EAAuC,oBAAoB,IAApB,CAAvC,CAHe;;AAKf,oBAAI,CAAC,QAAQ,GAAR,EAAa;AACd,4BAAQ,GAAR,GAAc,GAAd,CADc;iBAAlB;;AAIA,oBAAI,UAAU,QAAQ,OAAR,CATC;;AAWf,wCAAc,cAAd,CAA6B,QAAQ,GAAR,EAAa,yDAA1C;;;;AAXe,uBAeR,QAAQ,OAAR,EAAP,CAfe;aAAb,CADV,CAZe;;;;WA9EjB;;;QA+GG;kBAEM,IAAI,mBAAJ,CAAwB,EAAxB","file":"NotificationService.js","sourcesContent":["'use strict';\n\nimport Logger from 'winston';\nimport Lodash from 'lodash/index';\nimport Preconditions from '~/Preconditions';\nimport NotificationTemplate from './NotificationTemplate';\nimport NotificationBuilder from './NotificationBuilder';\nimport CoreObject from '~/CoreObject';\n\nclass NotificationService extends CoreObject {\n\n    /**\n     *\n     * @param {Object} options\n     */\n    constructor(options) {\n        super(options);\n\n        if (!this.templates) {\n            this.templates = {};\n        }\n\n        if (!this.mappings) {\n            this.mappings = {};\n        }\n\n        this.register('DEFAULT_TYPE', new NotificationTemplate({\n            name: 'DEFAULT_TEMPLATE'\n        }));\n\n        this.payload = {};\n    }\n\n    mergeIntoPayload(payload) {\n        Preconditions.shouldBeObject(payload, 'Payload must be object');\n        Lodash.assign(this.payload, payload);\n    }\n\n    /**\n     *\n     * @param {String} notificationType\n     * @param {NotificationTemplate} notificationTemplate\n     * @return {NotificationService}\n     */\n    register(notificationType, notificationTemplate) {\n        Preconditions.shouldBeString(notificationType, 'notificationType must be string');\n        Preconditions.shouldBeObject(notificationTemplate, 'notificationTemplate must be an object');\n\n        if (!(notificationTemplate instanceof NotificationTemplate)) {\n            let options = notificationTemplate;\n\n            notificationTemplate = new NotificationTemplate(options);\n        }\n\n        this.mappings[notificationType] = notificationTemplate.name;\n        this.templates[notificationTemplate.name] = notificationTemplate;\n\n        return this;\n    }\n\n    builder() {\n        let builder = new NotificationBuilder({\n            url: this.url\n        });\n        \n        if (this.payload) {\n            builder.mergeIntoPayload(this.payload);\n        }\n\n        return builder;\n    }\n\n    notificationTemplate(notificationType) {\n        let notificationTemplateName = this.mappings[notificationType];\n        var notificationTemplate = this.templates[notificationTemplateName];\n\n        Preconditions.shouldBeDefined(notificationTemplate, 'Notification template not found for ' + notificationType);\n\n        return notificationTemplate;\n    }\n\n    /**\n     *\n     * @param {String} type\n     * @param {*|undefined} data\n     * @return {Promise}\n     */\n    notify(type, data) {\n        Preconditions.shouldBeString(type, 'NotificationService.notify(type, data): type must be string.');\n        //this.Preconditions.shouldBeDefined(data, 'NotificationService.notify(type, data): data must be defined.');\n        data = data || {};\n\n        let url = this.url;\n        let scope = this;\n\n        let notificationTemplate = this.notificationTemplate(type);\n        let builder = this.builder();\n        let promise = notificationTemplate.render(builder, data);\n\n        return promise\n            .then((builder) => {\n                // Let's sanity the builder before executing.\n\n                Preconditions.shouldBeDefined(builder, 'No builder for ' + type);\n\n                if (!builder.url) {\n                    builder.url = url;\n                }\n\n                let payload = builder.payload;\n\n                Preconditions.shouldBeString(builder.url, 'NotificationService.notify(): builder.url was undefined');\n                // Attachments without top level text are valid.\n                //Preconditions.shouldBeString(payload.text, 'builder did not complete \\'text\\' property. ' + JSON.stringify(payload));\n\n                return builder.execute();\n            });\n    }\n}\n\nexport { NotificationService };\n\nexport default new NotificationService({\n\n});\n"]}