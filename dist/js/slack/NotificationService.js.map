{"version":3,"sources":["../../../src/js/slack/NotificationService.js"],"names":["NotificationService","options","templates","mappings","register","name","payload","shouldBeObject","assign","notificationType","notificationTemplate","shouldBeString","builder","url","mergeIntoPayload","notificationTemplateName","shouldBeDefined","type","data","promise","render","then","resolve","execute"],"mappings":"AAAA;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,mB;;;AAEF;;;;AAIA,iCAAYC,OAAZ,EAAqB;AAAA;;AAAA,8IACXA,OADW;;AAGjB,YAAI,CAAC,MAAKC,SAAV,EAAqB;AACjB,kBAAKA,SAAL,GAAiB,EAAjB;AACH;;AAED,YAAI,CAAC,MAAKC,QAAV,EAAoB;AAChB,kBAAKA,QAAL,GAAgB,EAAhB;AACH;;AAED,cAAKC,QAAL,CAAc,cAAd,EAA8B,mCAAyB;AACnDC,kBAAM;AAD6C,SAAzB,CAA9B;;AAIA,cAAKC,OAAL,GAAe,EAAf;AAfiB;AAgBpB;;;;yCAEgBA,O,EAAS;AACtB,oCAAcC,cAAd,CAA6BD,OAA7B,EAAsC,wBAAtC;AACA,4BAAOE,MAAP,CAAc,KAAKF,OAAnB,EAA4BA,OAA5B;AACH;;AAED;;;;;;;;;iCAMSG,gB,EAAkBC,oB,EAAsB;AAC7C,oCAAcC,cAAd,CAA6BF,gBAA7B,EAA+C,iCAA/C;AACA,oCAAcF,cAAd,CAA6BG,oBAA7B,EAAmD,wCAAnD;;AAEA,gBAAI,EAAEA,8DAAF,CAAJ,EAA6D;AACzD,oBAAIT,UAAUS,oBAAd;;AAEAA,uCAAuB,mCAAyBT,OAAzB,CAAvB;AACH;;AAED,iBAAKE,QAAL,CAAcM,gBAAd,IAAkCC,qBAAqBL,IAAvD;AACA,iBAAKH,SAAL,CAAeQ,qBAAqBL,IAApC,IAA4CK,oBAA5C;;AAEA,mBAAO,IAAP;AACH;;;kCAES;AACN,gBAAIE,UAAU,kCAAwB;AAClCC,qBAAK,KAAKA;AADwB,aAAxB,CAAd;;AAIA,gBAAI,KAAKP,OAAT,EAAkB;AACdM,wBAAQE,gBAAR,CAAyB,KAAKR,OAA9B;AACH;;AAED,mBAAOM,OAAP;AACH;;AAED;;;;;;;;6CAKqBH,gB,EAAkB;AACnC,oCAAcE,cAAd,CAA6B,wBAA7B;;AAEA,gBAAII,2BAA2B,KAAKZ,QAAL,CAAcM,gBAAd,CAA/B;AACA,gBAAIC,uBAAuB,KAAKR,SAAL,CAAea,wBAAf,CAA3B;;AAEA,oCAAcC,eAAd,CAA8BN,oBAA9B,EAAoD,yCAAyCD,gBAA7F;;AAEA,mBAAOC,oBAAP;AACH;;AAED;;;;;;;;;+BAMOO,I,EAAMC,I,EAAM;AACf,oCAAcP,cAAd,CAA6BM,IAA7B,EAAmC,8DAAnC;AACA;AACAC,mBAAOA,QAAQ,EAAf;;AAEA,gBAAIL,MAAM,KAAKA,GAAf;;AAEA,gBAAIH,uBAAuB,KAAKA,oBAAL,CAA0BO,IAA1B,CAA3B;AACA,gBAAIE,UAAUT,qBAAqBU,MAArB,CAA4B,KAAKR,OAAL,EAA5B,EAA4CM,IAA5C,CAAd;;AAEA,mBAAOC,QACFE,IADE,CACG,WAAC,iCAAkCT,OAAnC,EAA+C;AACjD,wCAAcI,eAAd,CAA8BJ,OAA9B,EAAuC,oBAAoBK,IAA3D;;AAEA,oBAAI,CAACL,QAAQC,GAAb,EAAkB;AACdD,4BAAQC,GAAR,GAAcA,GAAd;AACH;;AAED,wCAAcF,cAAd,CAA6BC,QAAQC,GAArC,EAA0C,yDAA1C;AACA;AACA;;AAEA,uBAAO,mBAAQS,OAAR,CAAgBV,QAAQW,OAAR,EAAhB,CAAP;AACH,aAbE,CAAP;AAcH;;;;;;QAGIvB,mB,GAAAA,mB;kBACM,IAAIA,mBAAJ,CAAwB,EAAxB,C","file":"NotificationService.js","sourcesContent":["'use strict';\n\nimport Logger from 'winston';\nimport Lodash from 'lodash/index';\nimport Preconditions from '~/Preconditions';\nimport NotificationTemplate from './NotificationTemplate';\nimport NotificationBuilder from './NotificationBuilder';\nimport CoreObject from '~/CoreObject';\nimport Promise from 'bluebird';\n\nclass NotificationService extends CoreObject {\n\n    /**\n     *\n     * @param {Object} options\n     */\n    constructor(options) {\n        super(options);\n\n        if (!this.templates) {\n            this.templates = {};\n        }\n\n        if (!this.mappings) {\n            this.mappings = {};\n        }\n\n        this.register('DEFAULT_TYPE', new NotificationTemplate({\n            name: 'DEFAULT_TEMPLATE'\n        }));\n\n        this.payload = {};\n    }\n\n    mergeIntoPayload(payload) {\n        Preconditions.shouldBeObject(payload, 'Payload must be object');\n        Lodash.assign(this.payload, payload);\n    }\n\n    /**\n     *\n     * @param {String} notificationType\n     * @param {NotificationTemplate} notificationTemplate\n     * @return {NotificationService}\n     */\n    register(notificationType, notificationTemplate) {\n        Preconditions.shouldBeString(notificationType, 'notificationType must be string');\n        Preconditions.shouldBeObject(notificationTemplate, 'notificationTemplate must be an object');\n\n        if (!(notificationTemplate instanceof NotificationTemplate)) {\n            let options = notificationTemplate;\n\n            notificationTemplate = new NotificationTemplate(options);\n        }\n\n        this.mappings[notificationType] = notificationTemplate.name;\n        this.templates[notificationTemplate.name] = notificationTemplate;\n\n        return this;\n    }\n\n    builder() {\n        let builder = new NotificationBuilder({\n            url: this.url\n        });\n        \n        if (this.payload) {\n            builder.mergeIntoPayload(this.payload);\n        }\n\n        return builder;\n    }\n\n    /**\n     *\n     * @param {String} notificationType\n     * @returns {NotificationTemplate}\n     */\n    notificationTemplate(notificationType) {\n        Preconditions.shouldBeString('param:notificationType');\n\n        let notificationTemplateName = this.mappings[notificationType];\n        var notificationTemplate = this.templates[notificationTemplateName];\n\n        Preconditions.shouldBeDefined(notificationTemplate, 'Notification template not found for ' + notificationType);\n\n        return notificationTemplate;\n    }\n\n    /**\n     *\n     * @param {String} type\n     * @param {*|undefined} data\n     * @return {Promise}\n     */\n    notify(type, data) {\n        Preconditions.shouldBeString(type, 'NotificationService.notify(type, data): type must be string.');\n        //this.Preconditions.shouldBeDefined(data, 'NotificationService.notify(type, data): data must be defined.');\n        data = data || {};\n\n        let url = this.url;\n\n        let notificationTemplate = this.notificationTemplate(type);\n        let promise = notificationTemplate.render(this.builder(), data);\n\n        return promise\n            .then((/** @type {NotificationBuilder}*/ builder) => {\n                Preconditions.shouldBeDefined(builder, 'No builder for ' + type);\n\n                if (!builder.url) {\n                    builder.url = url;\n                }\n\n                Preconditions.shouldBeString(builder.url, 'NotificationService.notify(): builder.url was undefined');\n                // Attachments without top level text are valid.\n                //Preconditions.shouldBeString(payload.text, 'builder did not complete \\'text\\' property. ' + JSON.stringify(payload));\n\n                return Promise.resolve(builder.execute());\n            });\n    }\n}\n\nexport { NotificationService };\nexport default new NotificationService({\n\n});\n"]}