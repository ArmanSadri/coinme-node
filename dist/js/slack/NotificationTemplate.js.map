{"version":3,"sources":["../../../src/js/slack/NotificationTemplate.js"],"names":["NotificationTemplate","options","defaults","name","shouldBeString","builder","data","isObject","get","mergeIntoPayload","silly"],"mappings":"AAAA;;;;;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,oB;;;AAEF,kCAAYC,OAAZ,EAAqB;AAAA;;AAAA,gJACXA,OADW;;AAGjB,wBAAOC,QAAP,QAAsB;AAClBC,kBAAM;AADY,SAAtB;;AAIA,gCAAcC,cAAd,CAA6B,MAAKD,IAAlC,EAAwC,0CAAxC;AAPiB;AAQpB;;AAED;;;;;;;;;;sCAMcE,O,EAASC,I,EAAM;AACzB,gBAAI,gBAAOC,QAAP,CAAgB,KAAKC,GAAL,CAAS,SAAT,CAAhB,CAAJ,EAA0C;AACtCH,wBAAQI,gBAAR,CAAyB,KAAKD,GAAL,CAAS,SAAT,CAAzB;AACH;;AAED,8BAAOE,KAAP,CAAa,MAAb,EAAqBJ,IAArB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAOD,OAAP;AACH;;;;;;kBAGUL,oB","file":"NotificationTemplate.js","sourcesContent":["'use strict';\n\nimport Lodash from 'lodash/index';\nimport Logger from 'winston';\n\nimport Preconditions from '~/Preconditions';\nimport NotificationBuilder from '~/slack/NotificationBuilder';\nimport AbstractNotificationTemplate from '~/slack/AbstractNotificationTemplate';\n\nclass NotificationTemplate extends AbstractNotificationTemplate {\n\n    constructor(options) {\n        super(options);\n\n        Lodash.defaults(this, {\n            name: 'NotificationTemplate'\n        });\n\n        Preconditions.shouldBeString(this.name, 'You must define a name for this template');\n    }\n\n    /**\n     *\n     * @param {NotificationBuilder} builder\n     * @param {*|Object} data\n     * @return {NotificationBuilder}\n     */\n    applyTemplate(builder, data) {\n        if (Lodash.isObject(this.get('payload'))) {\n            builder.mergeIntoPayload(this.get('payload'));\n        }\n\n        Logger.silly('Data', data);\n\n        // This is actually not useful 'by default'\n        // It's useful if you want to do inline stuff, but if we do this in the common base-class,\n        // then we are actually prevented from ever using this.super() in subclasses that use strongly\n        // typed objects instead of slack formatted json. Since the architecture of this project is to\n        // abstract away the slack parts, applying the \"data\" to the slack payload was a limiting design mistake.\n        //\n        //if (this.Lodash.isObject(data)) {\n        //    notificationBuilder.mergeIntoPayload(data);\n        //}\n\n        // The default implementation\n        // This is where you would modify your builder.\n        return builder;\n    }\n}\n\nexport default NotificationTemplate;"]}