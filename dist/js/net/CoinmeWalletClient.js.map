{"version":3,"sources":["../../../src/js/net/CoinmeWalletClient.js"],"names":["VERSION_REGEXP","METHOD_REGEXP","customPromiseFactory","resolver","CoinmeWalletClientConfiguration","options","certificate","take","type","adapter","value","fromHome","isString","fromFolder","timeout","defaultValue","baseUrl","required","validator","uri","shouldBeInstanceOf","typeOf","shouldBeTrue","is","version","shouldBeString","shouldMatchRegexp","sessionId","identity","isInstance","shouldBeInstance","JSON","stringify","signTool","secret","toString","issuer","arguments","_identity","_sessionId","_baseUrl","_version","_signTool","_certificate","_startedLatch","resolve","reject","promise","then","startedLatch","optJson","toJson","optString","clone","overrides","assign","_timeout","CoinmeWalletClient","configuration","_configuration","withSessionId","receipt","_execute","method","data","username","shouldNotBeBlank","scope","_getUrl","transactionId","v1","timestamp","Date","getTime","signature","_sign","path","request_args","url","headers","json","httpSignature","keyId","key","name","promiseFactory","fullResponse","qs","err","res","body","result","call","relativeUri","parameters","write","audience","subject","stringOrUri","joinPaths","absoluteTo"],"mappings":"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","file":"CoinmeWalletClient.js","sourcesContent":["\"use strict\";\n\nimport CoreObject from \"../CoreObject\";\nimport Promise from \"bluebird\";\nimport request from \"request-promise\";\nimport Receipt from \"../data/Receipt\";\nimport Utility from \"../Utility\";\nimport Preconditions from \"../Preconditions\";\nimport URI from \"urijs\";\nimport request_debug from \"request-debug\";\nimport SignTool from \"../data/SignTool\";\nimport uuid from \"node-uuid\";\nimport Identity from \"../data/Identity\";\nimport Address from \"../Address\";\nimport Lodash from \"lodash\";\nimport UserExistenceToken from \"../data/UserExistenceToken\";\nimport CertificateBundle from \"../data/CertificateBundle\";\n\nrequest_debug(request);\n\nconst VERSION_REGEXP = /^\\/api\\/v(?:\\d+\\.?\\d*)+$/;\nconst METHOD_REGEXP = /(?:POST)|(?:GET)|(?:DELETE)|(?:PUT)/;\n\n//region function customPromiseFactory\n/**\n * @param  {Function} resolver The promise resolver function\n * @return {Object} The promise instance\n */\nfunction customPromiseFactory(resolver) {\n    return new Promise(resolver);\n}\n//endregion\n\n//region class CoinmeWalletClientConfiguration\n/**\n * Certificates are required!\n *\n * The default value for certificates are found in CertificateBundle.fromHome()\n */\nclass CoinmeWalletClientConfiguration extends CoreObject {\n\n    //region constructor\n    /**\n     *\n     * @param {CoinmeWalletClientConfiguration|Object} [options]\n     * @param {CertificateBundle} [options.certificate]\n     * @param {String|URI} [options.baseUrl] defaults to https://www.coinmewallet.com\n     * @param {String} [options.version] defaults to /api/v1\n     * @param {SignTool} [options.signTool] defaults to null\n     * @param {String|Address|Identity} [options.identity] defaults to null\n     */\n    constructor(options) {\n        //region let certificate\n        /** @type {CertificateBundle} */\n        let certificate = Utility.take(options, 'certificate', {\n            type: CertificateBundle,\n            adapter: function (value) {\n                if (!value) {\n                    return CertificateBundle.fromHome();\n                } else if (Utility.isString(value)) {\n                    return CertificateBundle.fromFolder(value);\n                }\n\n                return value;\n            }\n        });\n        //endregion\n\n        //region let timeout\n        let timeout = Utility.take(options, 'timeout', {\n            type: 'number',\n            defaultValue: 30000\n        });\n        //endregion\n\n        //region let baseUrl\n        /** @type {URI} */\n        let baseUrl = Utility.take(options, 'baseUrl', {\n            required: false,\n            defaultValue: URI('https://www.coinmewallet.com/'),\n            // adapter goes first.\n            adapter: function (value) {\n                if (Utility.isString(value)) {\n                    return URI(value);\n                }\n\n                return value;\n            },\n            validator: function (uri) {\n                Preconditions.shouldBeInstanceOf(uri, URI, `value must be string or URI. (value:${uri}) (type:${Utility.typeOf(uri)})`);\n                Preconditions.shouldBeTrue(uri.is('absolute'), 'uri must be absolute');\n\n                return true;\n            }\n        });\n        //endregion\n\n        //region let version\n        let version = Utility.take(options, 'version', {\n            type: 'string',\n            defaultValue: '/api/v1',\n            required: false,\n            validator: function (value) {\n                Preconditions.shouldBeString(value, 'version must be a string');\n                Preconditions.shouldMatchRegexp(value, VERSION_REGEXP, `version must match pattern: ${VERSION_REGEXP}. Was ${value}`);\n\n                return true;\n            }\n        });\n        //endregion\n\n        //region let sessionId\n        let sessionId = Utility.take(options, 'sessionId', 'string', false);\n        //endregion\n\n        //region let identity\n        let identity = Utility.take(options, 'identity', {\n            defaultValue: new Identity('library:/coinme-node'),\n            adapter(value) {\n                if (Utility.isString(value)) {\n                    return new Identity(value);\n                } else if (Address.isInstance(value)) {\n                    return new Identity(value);\n                } else {\n                    return value;\n                }\n            },\n            validator(value) {\n                Preconditions.shouldBeInstance(value, Identity, `identity ${JSON.stringify(value)}`);\n            }\n        });\n        //endregion\n\n        //region let signTool\n        let signTool = Utility.take(options, 'signTool', {\n            type: SignTool,\n            defaultValue: new SignTool({\n                secret: identity.toString(),\n                issuer: identity.toString()\n            })\n        });\n        //endregion\n\n        super(...arguments);\n\n        this._identity = identity;\n        this._sessionId = sessionId;\n        this._baseUrl = baseUrl;\n        this._version = version;\n        this._signTool = signTool;\n        this._certificate = certificate;\n\n        this._startedLatch = new Promise((resolve, reject) => {\n            let promise = Promise.resolve();\n\n            promise = promise.then(() => certificate.startedLatch);\n\n            resolve(promise);\n        });\n    }\n\n    //endregion\n\n    //region properties\n    /**\n     * @return {Promise}\n     */\n    get startedLatch() {\n        return this._startedLatch;\n    }\n\n    /**\n     * @readonly\n     * @property\n     * @type {CertificateBundle}\n     * @return {CertificateBundle}\n     */\n    get certificate() {\n        return this._certificate;\n    }\n\n    /**\n     *\n     * @readonly\n     * @property\n     * @type {Identity}\n     * @return {Identity}\n     */\n    get identity() {\n        return this._identity;\n    }\n\n\n    /**\n     * @readonly\n     * @property\n     * @type {String|undefined}\n     * @return {String|undefined}\n     */\n    get sessionId() {\n        return this._sessionId;\n    }\n\n    /**\n     * Example: /api/v1\n     *\n     * @property\n     * @readonly\n     * @type {String}\n     * @return {String}\n     */\n    get version() {\n        return this._version;\n    }\n\n    /**\n     * @property\n     * @readonly\n     * @type {Number}\n     * @return {Number}\n     */\n    get timeout() {\n        return this._timeout;\n    }\n\n    /**\n     * Example: https://www.coinmewallet.com/\n     *\n     * @readonly\n     * @property\n     * @type {URI}\n     * @return {URI}\n     */\n    get baseUrl() {\n        return this._baseUrl\n    }\n\n    /**\n     * @property\n     * @readonly\n     * @type {SignTool}\n     * @return {SignTool}\n     */\n    get signTool() {\n        return this._signTool;\n    }\n\n    //endregion\n\n    toJson() {\n        return super.toJson({\n            version: this.version,\n            identity: Utility.optJson(this.identity.toJson()),\n            signTool: Utility.optJson(this.signTool),\n            sessionId: this.sessionId,\n            baseUrl: Utility.optString(this.baseUrl)\n        });\n    }\n\n    /**\n     *\n     * @param {String} sessionId\n     * @return {CoinmeWalletClientConfiguration}\n     */\n    withSessionId(sessionId) {\n        Preconditions.shouldBeString(sessionId, 'sessionId');\n\n        return new CoinmeWalletClientConfiguration(this.clone({\n            sessionId: sessionId\n        }));\n    }\n\n    /**\n     *\n     * @param {Object} overrides\n     * @return {CoinmeWalletClientConfiguration}\n     */\n    clone(overrides) {\n        return new CoinmeWalletClientConfiguration(Lodash.assign({}, this, overrides));\n    }\n}\n//endregion\n\n//region class CoinmeWalletClient\n/**\n *\n */\nclass CoinmeWalletClient extends CoreObject {\n\n    //region constructor\n    /**\n     *\n     * @param {Object} options\n     * @param {CoinmeWalletClientConfiguration} options.configuration\n     */\n    constructor(options) {\n        /** @type {CoinmeWalletClientConfiguration} */\n        let configuration = Utility.take(options, 'configuration', CoinmeWalletClientConfiguration, true);\n\n        super(...arguments);\n\n        this._configuration = configuration;\n\n        this._startedLatch = new Promise((resolve, reject) => {\n            let promise = Promise.resolve();\n\n            promise = promise.then(() => configuration.startedLatch);\n\n            resolve(promise);\n        });\n    }\n\n    //endregion\n\n    //region properties\n    /**\n     * @property\n     * @readonly\n     * @type {Promise}\n     * @return {Promise}\n     */\n    get startedLatch() {\n        return this._startedLatch;\n    }\n\n    /**\n     * @property\n     * @readonly\n     * @return {CoinmeWalletClientConfiguration}\n     */\n    get configuration() {\n        return this._configuration;\n    }\n\n    //endregion\n\n    /**\n     * Creates a brand new copy/clone of this client with a sessionId attached.\n     *\n     * @param {String} sessionId\n     * @return {CoinmeWalletClient}\n     */\n    withSession(sessionId) {\n        return new CoinmeWalletClient({\n            configuration: this.configuration.withSessionId(sessionId)\n        });\n    }\n\n    /**\n     *\n     * @param {Receipt} receipt\n     * @return {Promise}\n     */\n    notifyReceipt(receipt) {\n        return this._execute({\n            uri: '/receipt',\n            method: 'POST',\n            data: receipt.toJson()\n        });\n    }\n\n    /**\n     *\n     * @param {String} username\n     * @return {Promise.<UserExistenceToken>|Promise}\n     */\n    peek(username) {\n        Preconditions.shouldNotBeBlank(username, 'username');\n\n        return this._execute({\n            uri: '/user/peek',\n            method: 'GET',\n            data: {\n                username: username\n            },\n\n            type: UserExistenceToken\n        });\n    }\n\n    /**\n     *\n     * @private\n     *\n     * @param {Object} options\n     * @param {String|URI} options.uri\n     * @param {String} options.method\n     * @param {Object} [options.data]\n     * @param {Function} [options.adapter]\n     * @param {Class} [options.type]\n     *\n     * @return {Promise}\n     */\n    _execute(options) {\n        var scope = this;\n\n        return Promise.resolve()\n            .then(() => this.startedLatch)\n            .then(function () {\n                let configuration = scope.configuration;\n\n                /**\n                 * @type {String}\n                 */\n                let method = Preconditions.shouldMatchRegexp(options.method, METHOD_REGEXP, 'Must be GET|POST|PUT|DELETE');\n\n                /**\n                 * @type {URI}\n                 */\n                let uri = scope._getUrl(options.uri);\n\n                /**\n                 * @type {Object}\n                 */\n                let data = options.data || {};\n\n                data.transactionId = uuid.v1();\n                data.timestamp = (new Date()).getTime();\n                data.signature = scope._sign(uri.path(), data);\n\n                let request_args = {\n                    url: uri.toString(),\n\n                    method: method,\n\n                    headers: {\n                        'X-Transaction-ID': data.transactionId,\n                        'X-Timestamp': data.timestamp,\n                        'X-Signature': data.signature\n                    },\n\n                    // ---\n\n                    json: true,\n\n                    httpSignature: {\n                        keyId: configuration.certificate.key.name,\n                        key: configuration.certificate.key.value\n                    },\n\n                    timeout: scope.configuration.timeout,\n                    promiseFactory: customPromiseFactory,\n                    fullResponse: true // (default) To resolve the promise with the full response or just the body\n                };\n\n                if ('GET' === method && data) {\n                    request_args.qs = data;\n                } else if ('POST' === method) {\n                    request_args.data = data;\n                }\n\n                return request(request_args, function (err, res, body) {\n                    // console.log('REQUEST RESULTS:', err, res.statusCode, body);\n                })\n                    .then((result) => {\n                        if (options.adapter) {\n                            return options.adapter.call(scope, result);\n                        } else if (options.type) {\n                            return new options.type(result)\n                        } else {\n                            return result;\n                        }\n                    });\n            });\n    }\n\n    /**\n     *\n     * @private\n     * @return {undefined|String}\n     */\n    _sign(relativeUri, parameters) {\n        return this.configuration.signTool.write(parameters || {}, {\n            issuer: this.configuration.identity.toString(),\n            audience: 'coinme-wallet',\n            subject: relativeUri.toString()\n        });\n    }\n\n    /**\n     * @param {String|URI} stringOrUri\n     * @return {URI}\n     * @private\n     */\n    _getUrl(stringOrUri) {\n        /** @type {URI} */\n        let uri = URI(stringOrUri);\n        /** @type {CoinmeWalletClientConfiguration} */\n        let configuration = this.configuration;\n        let baseUrl = configuration.baseUrl;\n        let version = configuration.version;\n\n        Preconditions.shouldBeTrue(uri.is('relative'), `Must be relative. Was ${stringOrUri}`);\n\n        return URI\n            .joinPaths(baseUrl, version, uri)\n            .absoluteTo(baseUrl);\n    }\n\n}\n//endregion\n\nexport {CoinmeWalletClientConfiguration};\nexport {CoinmeWalletClient};\nexport default CoinmeWalletClient;"]}