{"version":3,"sources":["../../src/js/Utility.js"],"names":[],"mappings":"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","file":"Utility.js","sourcesContent":["'use strict';\n\nimport Lodash from \"lodash\";\nimport Preconditions from \"~/Preconditions\";\nimport Ember from \"~/Ember\";\nimport CoreObject from \"~/CoreObject\";\nimport {Errors, AbstractError} from \"./errors\";\n\n/**\n * @class\n * @singleton\n */\nclass Utility {\n\n    /**\n     * @param {*} object\n     * @returns {boolean}\n     */\n    static isObject(object) {\n        let type = Utility.typeOf(object);\n\n        return 'object' === type || 'instance' === type;\n    }\n\n    /**\n     *\n     * @param {*} object\n     * @returns {Class}\n     */\n    static toClass(object) {\n        if (Utility.isClass(object)) {\n            return object;\n        } else if (Utility.isObject(object)) {\n            return object.toClass();\n        }\n\n        Preconditions.fail('object|class', Utility.typeOf(object), 'Must be correct type');\n    }\n\n    static isNumber(object) {\n        return 'number' === Utility.typeOf(object);\n    }\n\n    static isClass(object) {\n        return 'class' === Utility.typeOf(object);\n    }\n\n    static isInstance(object) {\n        return 'instance' === Utility.typeOf(object);\n    }\n\n    static isError(object) {\n        return 'error' === Utility.typeOf(object);\n    }\n\n    /**\n     *\n     * @param {*} object\n     * @param {String} path\n     * @param {*} [defaultValue]\n     * @returns {*}\n     */\n    static result(object, path, defaultValue) {\n        return Lodash.get.apply(Lodash, arguments);\n    }\n\n    static emptyFn() {\n\n    }\n\n    static yes() {\n        return true;\n    }\n\n    static no() {\n        return false;\n    }\n\n    static ok() {\n        return this;\n    }\n\n    static identityFn() {\n        return this;\n    }\n\n    static passthroughFn(arg) {\n        return arg;\n    }\n\n    /**\n     * Uses Lodash.get, but then removes the key from the parent object.\n     *\n     * It takes properties off of an object and optionally does validation.\n     *\n     * var value = Utility.take(object, key, type);\n     *\n     * var value = Utility.take(object, {\n     *                           key: String,\n     *                       });\n     *\n     * var {value1, value2} = Utility.take(object, [keyAsString1, keyAsString2]);\n     *\n     * var {value1} = Utility.take(object, [keyAsString1]);\n     *\n     * A ruleset is defined as:\n     *\n     *  {\n     *      // return true to pass. false to fail.\n     *      validator: function(value) { return boolean; } throws Error,\n     *      type: String,\n     *      adapter: function(key, value) { return new_value; },\n     *      required: true|false|undefined\n     *   }\n     *\n     * @param {Object} object\n     * @param {String|Object|Array} keyAsStringObjectArray\n     * @param {Function|Class|Object} [optionalTypeDeclarationOrDefaults] - If you pass a function in, it must return true\n     *\n     * @throws PreconditionsError\n     *\n     * @returns {*}\n     */\n    static take(object, keyAsStringObjectArray, optionalTypeDeclarationOrDefaults) {\n        if (!object) {\n            return undefined;\n        }\n\n        Preconditions.shouldBeDefined(keyAsStringObjectArray, 'key must be defined');\n\n        //region utilities\n        /**\n         *\n         * @param {{[scope]: Object, [adapter]: function, [validator]: function, [adapter]: function}}  ruleset\n         * @param {String} key\n         * @param {*} value\n         * @returns {*}\n         */\n        function executeValidator(ruleset, key, value) {\n            let fn = Lodash.get(ruleset, 'validator');\n            let scope = Lodash.get(ruleset, 'scope') || this;\n\n            if (fn) {\n                Preconditions.shouldBeFunction(fn);\n                Preconditions.shouldNotBeFalsey(fn.call(scope, value), 'Failed validation: {key:\\'' + key + '\\' value:\\'' + value + '\\'');\n            }\n\n            return value;\n        }\n\n        /**\n         * If the ruleset requires, will throw.\n         *\n         * @throws PreconditionsError\n         * @param {{[scope]: Object, [adapter]: function, [validator]: function, [adapter]: function}}  ruleset\n         * @param {String} key\n         * @param {*} value\n         * @returns {*}\n         */\n        function executeAdapter(ruleset, key, value) {\n            let fn = Lodash.get(ruleset, 'adapter');\n            let scope = Lodash.get(ruleset, 'scope') || this;\n\n            if (fn) {\n                Preconditions.shouldBeFunction(fn, 'Validator must be a function');\n                \n                value = fn.call(scope, value);\n            }\n\n            return value;\n        }\n\n        /**\n         * If the ruleset requires, will throw.\n         *\n         * @throws PreconditionsError\n         * @param {{[scope]: Object, [adapter]: function, [validator]: function, [adapter]: function}}  ruleset\n         * @param {String} key\n         * @param {*} value\n         * @returns {*}\n         */\n        function executeRequired(ruleset, key, value) {\n            let required = Lodash.get(ruleset, 'required');\n\n            if (true === required) {\n                if (Utility.isNullOrUndefined(value)) {\n                    Preconditions.shouldBeExisting(value, `${key} is required`);\n                }\n            }\n\n            return value;\n        }\n\n        /**\n         * If the ruleset requires, will throw.\n         *\n         * @throws PreconditionsError\n         * @param {{[scope]: Object, [adapter]: function, [validator]: function, [adapter]: function}}  ruleset\n         * @param {String} key\n         * @param {*} value\n         * @returns {*}\n         */\n        function executeType(ruleset, key, value) {\n            let type = Lodash.get(ruleset, 'type');\n\n            if (type) {\n                Preconditions.shouldBeType(type, value, `${key} was wrong type.`);\n            }\n\n            return value;\n        }\n\n        /**\n         * Main entry point for checks.\n         *\n         * @param {{[adapter]: function, [validator]: function, [adapter]: function}}  ruleset\n         * @param {String} key\n         * @param {*} value\n         * @returns {*}\n         */\n        function executeChecks(ruleset, key, value) {\n            value = executeRequired(ruleset, key, value);\n            value = executeType(ruleset, key, value);\n            value = executeAdapter(ruleset, key, value);\n            value = executeValidator(ruleset, key, value);\n\n            return value;\n        }\n        //endregion\n\n        let mode = Utility.typeOf(keyAsStringObjectArray);\n\n        let global_defaults = {};\n\n        if (Utility.isObject(optionalTypeDeclarationOrDefaults)) {\n            global_defaults = Lodash.assign(global_defaults, optionalTypeDeclarationOrDefaults);\n            optionalTypeDeclarationOrDefaults = null;\n        }\n\n        //region String Mode\n        if ('string' === mode) {\n            /** @type {String} */\n            let key = keyAsStringObjectArray;\n            let value = Utility.result(object, key);\n            let validatorFn = Utility.yes;\n\n            if (Utility.isClass(optionalTypeDeclarationOrDefaults)) {\n                validatorFn = Utility.typeMatcher(optionalTypeDeclarationOrDefaults)\n            } else if (Utility.isFunction(optionalTypeDeclarationOrDefaults)) {\n                validatorFn = optionalTypeDeclarationOrDefaults;\n            } else if (Utility.isNullOrUndefined(keyAsStringObjectArray)) {\n                validatorFn = Utility.yes;\n            } else {\n                // TODO: apply global defaults.\n            }\n\n            if (-1 != key.indexOf('.')) {\n                // It's an object path.\n                let parentPath = key.substring(0, key.lastIndexOf('.'));\n                let itemKey = key.substring(key.lastIndexOf('.') + 1);\n                let parent = Utility.result(object, parentPath);\n\n                delete parent[itemKey];\n            } else {\n                delete object[keyAsStringObjectArray];\n            }\n\n            return executeValidator(validatorFn, key, value);\n        }\n        //endregion\n\n        //region Array/Object mode\n        if ('array' === mode || 'object' === mode) {\n            let result = {};\n\n            let defaults = Lodash.defaults(Utility.result(keyAsStringObjectArray, 'defaults', {}), global_defaults, {\n                required: false,\n                validator: null\n            });\n\n            Lodash.forEach(keyAsStringObjectArray,\n\n                /**\n                 *\n                 * @param {String|Object|Function} rulesetOrObject\n                 * @param {String} [rulesetOrObject.key]\n                 * @param {Number|String} keyOrIndex\n                 */\n                function (rulesetOrObject, keyOrIndex) {\n                    /**\n                     * @type {String}\n                     */\n                    let key;\n\n                    /**\n                     * @type {Object}\n                     */\n                    let ruleset;\n\n                    if ('array' === mode) {\n                        if (Utility.isString(rulesetOrObject)) {\n                            key = rulesetOrObject;\n                            ruleset = Lodash.defaults({}, defaults);\n\n                            if (Utility.isObject(optionalTypeDeclarationOrDefaults)) {\n                                ruleset = Lodash.defaults(ruleset, optionalTypeDeclarationOrDefaults);\n                            }\n                        } else if (Utility.isObject(rulesetOrObject)) {\n                            /**\n                             * @type {String}\n                             */\n                            key = Preconditions.shouldBeString(Utility.result(rulesetOrObject, 'key'), 'key not defined');\n                            ruleset = rulesetOrObject;\n                        }\n                    } else if ('object' === mode) {\n                        key = keyOrIndex;\n\n                        if (Utility.isString(rulesetOrObject)) {\n                            ruleset = {\n                                type: rulesetOrObject\n                            };\n                        } else if (Utility.isObject(rulesetOrObject)) {\n                            ruleset = rulesetOrObject;\n                        }\n                    } else {\n                        Preconditions.fail('array|object', mode, 'Unknown mode');\n                    }\n\n                    Preconditions.shouldNotBeBlank(key, 'Key must be defined by here in all situations.');\n                    Preconditions.shouldBeObject(ruleset, 'Must have a valid ruleset: ' + ruleset);\n\n                    // if (Utility.isObject(ruleset)) {\n                    //     // this is a ruleset that overrides our ruleset.\n                    //     ruleset = Lodash.defaults({key: key}, ruleset, defaults);\n                    // } else if (Utility.isFunction(ruleset)) {\n                    //     let fn = ruleset;\n                    //\n                    //     ruleset = {\n                    //         key: key,\n                    //         validator: fn\n                    //     };\n                    // } else {\n                    //     throw new Error('Cannot determine what to do with: ' + typeOfRuleset + ': ' + ruleset);\n                    // }\n\n                    ruleset = Lodash.defaults(ruleset, defaults);\n\n                    let requiredType = ruleset.type;\n\n                    // If we don't have a validator yet, check to see if we can get one.\n                    if (!ruleset.validator && Utility.isNotBlank(requiredType)) {\n                        if ('string' === requiredType) {\n                            ruleset.validator = Utility.isString;\n                        } else if ('number' === requiredType) {\n                            ruleset.validator = Utility.isNumber;\n                        } else if ('required' === requiredType) {\n                            ruleset.validator = Utility.isExisting;\n                        } else {\n                            throw new Error('I should add more types: ' + requiredType);\n                        }\n                    }\n\n                    if ('defaults' === key) {\n                        return;\n                    }\n\n                    result[key] = executeChecks(ruleset, key, Utility.take(object, key));\n                });\n\n            return result;\n        } else {\n            throw new Error('Not sure how to handle this case: ' + Utility.typeOf(keyAsStringObjectArray));\n        }\n        //endregion\n\n    }\n\n    /**\n     * Creates a test method. Uses Utility.typeOf()\n     *\n     * @param {String|Class} type\n     * @return {function}\n     */\n    static typeMatcher(type) {\n        // Ember.typeOf();                       // 'undefined'\n        // Ember.typeOf(null);                   // 'null'\n        // Ember.typeOf(undefined);              // 'undefined'\n        // Ember.typeOf('michael');              // 'string'\n        // Ember.typeOf(new String('michael'));  // 'string'\n        // Ember.typeOf(101);                    // 'number'\n        // Ember.typeOf(new Number(101));        // 'number'\n        // Ember.typeOf(true);                   // 'boolean'\n        // Ember.typeOf(new Boolean(true));      // 'boolean'\n        // Ember.typeOf(Ember.makeArray);        // 'function'\n        // Ember.typeOf([1, 2, 90]);             // 'array'\n        // Ember.typeOf(/abc/);                  // 'regexp'\n        // Ember.typeOf(new Date());             // 'date'\n        // Ember.typeOf(Ember.Object.extend());  // 'class'\n        // Ember.typeOf(Ember.Object.create());  // 'instance'\n        // Ember.typeOf(new Error('teamocil'));  // 'error'\n        // // 'normal' JavaScript object\n        // Ember.typeOf({ a: 'b' });             // 'object'\n\n        let knownTypes = {\n            'undefined': true,\n            'null': true,\n            'string': true,\n            'number': true,\n            'boolean': true,\n            'function': true,\n            'array': true,\n            'instance': true,\n            'error': true,\n            'object': true,\n            'class': true,\n            'regexp': true,\n            'date': true\n        };\n\n        /**\n         * Should be string.\n         */\n        {\n            let typeOfType = Utility.typeOf(type);\n\n            if (!('string' === typeOfType || 'class' === typeOfType)) {\n                Preconditions.fail('string', type, `The type passed in was not a string|class. It was ${typeOfType}`);\n            }\n        }\n\n        /**\n         * Should be known type.\n         */\n        {\n            // This will cause an infinite loop.\n            // Preconditions.shouldNotBeBlank(type, 'type missing');\n            // type = Utility.toLowerCase(type);\n            if (Utility.isString(type)) {\n                type = type.toLowerCase();\n\n                Preconditions.shouldBeTrue(knownTypes[type], 'unknown type: ' + type);\n\n                return (function (/** @type {*} */ object) {\n                    let objectType = Utility.typeOf(object);\n\n                    if ('object' === type || 'instance' === type) {\n                        return ('object' === objectType) || ('instance' === objectType);\n                    }\n\n                    return type === objectType;\n                });\n            } else if (Utility.isClass(type)) {\n                /**\n                 * @type {Class<CoreObject>}\n                 */\n                return function (/** @type {*} */object) {\n                    return (type.isInstance(object));\n                };\n            }\n        }\n\n\n    }\n\n    /**\n     * Returns a consistent type for the passed item.\n     *\n     * Use this instead of the built-in `typeof` to get the type of an item.\n     * It will return the same result across all browsers and includes a bit\n     * more detail. Here is what will be returned:\n     *\n     * | Return Value  | Meaning                                              |\n     * |---------------|------------------------------------------------------|\n     * | 'string'      | String primitive or String object.                   |\n     * | 'number'      | Number primitive or Number object.                   |\n     * | 'boolean'     | Boolean primitive or Boolean object.                 |\n     * | 'null'        | Null value                                           |\n     * | 'undefined'   | Undefined value                                      |\n     * | 'function'    | A function                                           |\n     * | 'array'       | An instance of Array                                 |\n     * | 'regexp'      | An instance of RegExp                                |\n     * | 'date'        | An instance of Date                                  |\n     * | 'class'       | An Ember class (created using Ember.Object.extend()) |\n     * | 'instance'    | An Ember object instance                             |\n     * | 'error'       | An instance of the Error object                      |\n     * | 'object'      | A JavaScript object not inheriting from Ember.Object |\n     *\n     * Examples:\n     *\n     ```javascript\n     Ember.typeOf();                       // 'undefined'\n     Ember.typeOf(null);                   // 'null'\n     Ember.typeOf(undefined);              // 'undefined'\n     Ember.typeOf('michael');              // 'string'\n     Ember.typeOf(new String('michael'));  // 'string'\n     Ember.typeOf(101);                    // 'number'\n     Ember.typeOf(new Number(101));        // 'number'\n     Ember.typeOf(true);                   // 'boolean'\n     Ember.typeOf(new Boolean(true));      // 'boolean'\n     Ember.typeOf(Ember.makeArray);        // 'function'\n     Ember.typeOf([1, 2, 90]);             // 'array'\n     Ember.typeOf(/abc/);                  // 'regexp'\n     Ember.typeOf(new Date());             // 'date'\n     Ember.typeOf(Ember.Object.extend());  // 'class'\n     Ember.typeOf(Ember.Object.create());  // 'instance'\n     Ember.typeOf(new Error('teamocil'));  // 'error'\n\n     // 'normal' JavaScript object\n     Ember.typeOf({ a: 'b' });             // 'object'\n     ```\n     *\n     * @method typeOf\n     * @for Ember\n     * @param {Object} object the item to check\n     * @return {String} the type\n     * @public\n     */\n    static typeOf(object) {\n        let type = Ember.typeOf(object);\n\n        if ('function' === type) {\n            // Let's isClass a bit further.\n\n            if (CoreObject.isClass(object) || Errors.isErrorClass(object)) {\n                return 'class';\n            } else if (Errors.isErrorInstance(object)) {\n                return 'error';\n            }\n\n        } else if ('object' === type) {\n            if (CoreObject.isInstance(object)) {\n                return 'instance';\n            }\n        }\n\n        return type;\n    }\n\n    /**\n     *\n     * @param {*} object\n     * @returns {boolean}\n     */\n    static isArray(object) {\n        return 'array' === Utility.typeOf(object);\n    }\n\n    /**\n     *\n     * @param {*} object\n     * @returns {boolean}\n     */\n    static isBoolean(object) {\n        return 'boolean' === Utility.typeOf(object);\n    }\n\n    /**\n     *\n     * @param {*} object\n     * @return {boolean}\n     */\n    static isUndefined(object) {\n        return 'undefined' === Utility.typeOf(object);\n    }\n\n    /**\n     * Shorthand: Utility.typeOf() === string\n     *\n     * This is for functional programming.\n     *\n     * @param {*} object\n     * @returns {boolean}\n     */\n    static isString(object) {\n        return 'string' === Utility.typeOf(object);\n    }\n\n    /**\n     * Determines if the argument is a Number, String, null, undefined\n     *\n     * @param {*} object\n     * @returns {boolean}\n     */\n    static isPrimitive(object) {\n        if (Utility.isNullOrUndefined(object)) {\n            return true;\n        }\n\n        let type = Utility.typeOf(object);\n        let primitives = ['number', 'string'];\n\n        return -1 !== primitives.indexOf(type);\n    }\n\n    /**\n     * Determine if something is a promise\n     *\n     * @param {*} object\n     * @return boolean\n     */\n    static isPromise(object) {\n        return Promise.is(object);\n    }\n\n    /**\n     *\n     * @param valueOrFn\n     */\n    static isTruthy(valueOrFn) {\n        let value;\n\n        if (Utility.isFunction(valueOrFn)) {\n            value = valueOrFn();\n        } else {\n            value = valueOrFn;\n        }\n\n        return !!value;\n    }\n\n    /**\n     *\n     * @param fn\n     * @returns {boolean}\n     */\n    static isFunction(fn) {\n        return 'function' === Utility.typeOf(fn);\n    }\n\n    /**\n     * @param {*} object\n     * @returns {boolean}\n     */\n    static isNotFunction(object) {\n        return 'function' !== Utility.typeOf(object);\n    }\n\n    /**\n     * @param {*} object\n     * @returns {boolean}\n     */\n    static isNaN(object) {\n        return Lodash.isNaN(object);\n    }\n\n    /**\n     *\n     * @param {*} anything\n     * @returns {boolean}\n     */\n    static isNull(anything) {\n        return 'null' === Utility.typeOf(anything);\n    }\n\n    /**\n     * Null-safe way to lowercase\n     * @param {String} string\n     * @returns {String}\n     */\n    static toLowerCase(string) {\n        if (Utility.isBlank(string)) {\n            return string;\n        }\n\n        Preconditions.shouldBeString(string);\n\n        return string.toLowerCase();\n    }\n\n    /**\n     * Null-safe way to uppercase.\n     *\n     * @param {String} string\n     * @returns {String}\n     */\n    static toUpperCase(string) {\n        if (Utility.isBlank(string)) {\n            return string;\n        }\n\n        Preconditions.shouldBeString(string);\n\n        return string.toUpperCase();\n    }\n\n    /**\n     *\n     * @param object\n     */\n    static optString(object) {\n        if (!object) {\n            return undefined;\n        } else {\n            return object.toString();\n        }\n    }\n\n    /**\n     * Determines if the input is NotNull, NotNaN, and NotUndefined.\n     *\n     * @param {*} anything\n     * @return {boolean}\n     */\n    static isExisting(anything) {\n        let u = Utility.isUndefined(anything);\n        let n = Utility.isNaN(anything);\n        let nu = Utility.isNull(anything);\n\n        return !(u || n || nu);\n    }\n\n    /**\n     * The opposite of existing.\n     *\n     * @param {*} anything\n     * @returns {boolean}\n     */\n    static isNotExisting(anything) {\n        return !Utility.isExisting(anything);\n    }\n\n    /**\n     *\n     * @param {*} object\n     * @returns {boolean}\n     */\n    static isFalsey(object) {\n        return !object;\n    }\n\n    /**\n     *\n     * @param object\n     */\n    static isNotFalsey(object) {\n        return !Utility.isFalsey(object);\n    }\n\n    /**\n     * Shorthand for value\n     *\n     * @param value\n     * @returns {boolean}\n     */\n    static isNullOrUndefined(value) {\n        return Utility.isNull(value) || Utility.isUndefined(value);\n    }\n\n    /**\n     *\n     * @param {String} string\n     * @return {boolean}\n     */\n    static isBlank(string) {\n        if (Utility.isNullOrUndefined(string)) {\n            return true;\n        }\n\n        Preconditions.shouldBeString(string);\n\n        return Ember.isBlank(string);\n    }\n\n    /**\n     *\n     * @param {String} string\n     * @return {boolean}\n     */\n    static isNotBlank(string) {\n        return !Utility.isBlank(string);\n    }\n\n    /**\n     *\n     * @param {Object} object\n     * @param {Object} defaults\n     * @returns {Object} The original object.\n     */\n    static defaults(object, defaults) {\n        Preconditions.shouldBeObject(object);\n        Preconditions.shouldBeObject(defaults);\n\n        let updates = Object.keys(defaults);\n\n        for (let i = 0, l = updates.length; i < l; i++) {\n            let prop = updates[i];\n            let value = Ember.get(defaults, prop);\n\n            Ember.set(object, prop, value);\n        }\n\n        return object;\n    }\n}\n\nexport default Utility;"]}