{"version":3,"sources":["../../src/js/Utility.js"],"names":[],"mappings":"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","file":"Utility.js","sourcesContent":["'use strict';\n\nimport Lodash from \"lodash\";\nimport Preconditions from \"~/Preconditions\";\nimport Ember from \"~/Ember\";\nimport CoreObject from \"~/CoreObject\";\nimport {Errors} from \"./errors\";\nimport Big from \"big.js/big\";\nimport {\n    Instant,\n    LocalDate,\n    ZonedDateTime,\n    LocalDateTime,\n    DateTimeFormatter,\n    ZoneOffset,\n    nativeJs,\n    convert,\n    TemporalQueries,\n    LocalTime\n} from \"js-joda\";\n\nlet TEMPORALS = {\n    'Instant': Instant,\n    'LocalTime': LocalTime,\n    'LocalDate': LocalDate,\n    'LocalDateTime': LocalDateTime,\n    'ZonedDateTime': ZonedDateTime\n};\n\nlet EMAIL_PATTERN = /(?:\\w)+(?:\\w|-|\\.|\\+)*@(?:\\w)+(?:\\w|\\.|-)*\\.(?:\\w|\\.|-)+$/;\n\n/**\n * @class\n * @singleton\n */\nclass Utility {\n\n    static isTemporal(value) {\n        // Direct Subclass:\n        //     ChronoLocalDate, ChronoLocalDateTime, ChronoZonedDateTime, DateTimeBuilder, DayOfWeek, Instant, LocalTime, Month, MonthDay, src/format/DateTimeParseContext.js~Parsed, Year, YearMonth\n        // Indirect Subclass:\n        //     LocalDate, LocalDateTime, ZonedDateTime\n\n        // console.log(value);\n        // console.log(value.toString());\n        // console.log(value.prototype);\n        // console.log(value.__proto__);\n        // console.log(value.constructor);\n        return !!TEMPORALS[value.constructor.name];\n    }\n\n    /**\n     *\n     * @param {*} one\n     * @param {*} two\n     * @return {boolean}\n     */\n    static isSameType(one, two) {\n        let type1 = Utility.typeOf(one);\n        let type2 = Utility.typeOf(two);\n\n        return type1 === type2;\n    }\n\n    /**\n     *\n     * @param {String|null|undefined} string\n     * @return {String|undefined}\n     */\n    static optLowerCase(string) {\n        if (Utility.isNullOrUndefined(string)) {\n            return undefined;\n        }\n\n        return (Utility.optString(string) || '').toLowerCase();\n    }\n\n    /**\n     *\n     * @param {String} string1\n     * @param {String} string2\n     * @return {Boolean}\n     */\n    static isStringEqualIgnoreCase(string1, string2) {\n        if (Utility.isNotExisting(string1) || Utility.isNotExisting(string2)) {\n            return Utility.isSameType(string1, string2);\n        }\n\n        return Utility.isStringEqual(\n            Utility.optLowerCase(string1),\n            Utility.optLowerCase(string2));\n    }\n\n    /**\n     * (null, null) -> true\n     *\n     * @param {String|*} string1\n     * @param {String|*} string2\n     * @return {boolean}\n     */\n    static isStringEqual(string1, string2) {\n        if (Utility.isNotExisting(string1) || Utility.isNotExisting(string2)) {\n            return Utility.isSameType(string1, string2);\n        }\n\n        string1 = Utility.optString(string1);\n        string2 = Utility.optString(string2);\n\n        if (!Utility.isSameType(string1, string2)) {\n            return false;\n        } else if (!Utility.isExisting(string1)) {\n            return false;\n        }\n\n        return string1 === string2;\n    }\n\n    /**\n     * @param {*} object\n     * @returns {boolean}\n     */\n    static isObject(object) {\n        let type = Utility.typeOf(object);\n\n        return 'object' === type || 'instance' === type;\n    }\n\n    /**\n     *\n     * @param {*} object\n     * @returns {Class}\n     */\n    static toClass(object) {\n        if (Utility.isClass(object)) {\n            return object;\n        } else if (Utility.isObject(object)) {\n            return object.toClass();\n        }\n\n        Preconditions.fail('object|class', Utility.typeOf(object), 'Must be correct type');\n    }\n\n    static isNumber(object) {\n        return 'number' === Utility.typeOf(object);\n    }\n\n    static isClass(object) {\n        return 'class' === Utility.typeOf(object);\n    }\n\n    static isInstance(object) {\n        return 'instance' === Utility.typeOf(object);\n    }\n\n    static isError(object) {\n        return 'error' === Utility.typeOf(object);\n    }\n\n    /**\n     *\n     * @param {*} object\n     * @param {String} path\n     * @param {*} [defaultValue]\n     * @returns {*}\n     */\n    static result(object, path, defaultValue) {\n        return Lodash.get.apply(Lodash, arguments);\n    }\n\n    /**\n     * @param {CoreObject|Class<CoreObject>} instance - Must be an instance of CoreObject (or subclass)\n     */\n    static toClassOrFail(instance) {\n        if (Utility.isInstance(instance)) {\n\n        } else if (Utility.isClass(instance)) {\n\n        } else {\n            Preconditions.fail(CoreObject, instance, 'Was not an instance or class. Cannot continue');\n        }\n\n        return instance.toClass();\n    }\n\n    /**\n     *\n     * @param boolean\n     * @returns {*}\n     */\n    static ifBoolean(boolean) {\n        if (Utility.isBoolean(boolean)) {\n            return boolean;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Uses Lodash.get, but then removes the key from the parent object.\n     *\n     * It takes properties off of an object and optionally does validation.\n     *\n     * var value = Utility.take(object, key, type);\n     *\n     * var value = Utility.take(object, {\n     *                           key: String,\n     *                       });\n     *\n     * var {value1, value2} = Utility.take(object, [keyAsString1, keyAsString2]);\n     *\n     * var {value1} = Utility.take(object, [keyAsString1]);\n     *\n     * A ruleset is defined as:\n     *\n     *  {\n     *      // return true to pass. false to fail.\n     *      validator: function(value) { return boolean; } throws Error,\n     *      type: String,\n     *      adapter: function(value) { return new_value; },\n     *      required: true|false|undefined\n     *   }\n     *\n     * @param {Object} object\n     * @param {String|Object|Array} keyAsStringObjectArray\n     * @param {Function|Class|Object|{required:Boolean,type:String|Class,validator:Function,adapter:Function, [defaultValue]:*}} [optionalTypeDeclarationOrDefaults] - If you pass a function in, it must return true\n     * @param {Boolean} [requiredByDefault] Default value for required.\n     * @throws PreconditionsError\n     *\n     * @returns {*}\n     */\n    static take(object, keyAsStringObjectArray, optionalTypeDeclarationOrDefaults, requiredByDefault) {\n        if (!object) {\n            object = {};\n        }\n\n        Preconditions.shouldBeDefined(keyAsStringObjectArray, 'key must be defined');\n\n        //region utilities\n        /**\n         *\n         * @param {{[scope]: Object, [adapter]: function, [validator]: function, [adapter]: function}}  ruleset\n         * @param {String} key\n         * @param {*} value\n         * @returns {*}\n         */\n        function executeValidator(ruleset, key, value) {\n            let fn = Lodash.get(ruleset, 'validator');\n            let scope = Lodash.get(ruleset, 'scope') || this;\n\n            if (fn) {\n                Preconditions.shouldBeFunction(fn, 'validator must be type of function');\n                Preconditions.shouldNotBeFalsey(fn.call(scope, value), 'Failed validation: {key:\\'' + key + '\\' value:\\'' + value + '\\'');\n            }\n\n            return value;\n        }\n\n        /**\n         * If the ruleset requires, will throw.\n         *\n         * @throws PreconditionsError\n         * @param {{[scope]: Object, [adapter]: function, [validator]: function, [adapter]: function}}  ruleset\n         * @param {String} key\n         * @param {*} value\n         * @returns {*}\n         */\n        function executeAdapter(ruleset, key, value) {\n            let fn = Lodash.get(ruleset, 'adapter');\n            let scope = Lodash.get(ruleset, 'scope') || this;\n\n            if (fn) {\n                Preconditions.shouldBeFunction(fn, 'Validator must be a function');\n\n                value = fn.call(scope, value);\n            }\n\n            return value;\n        }\n\n        /**\n         * If the ruleset requires, will throw.\n         *\n         * @throws PreconditionsError\n         * @param {{[scope]: Object, [adapter]: function, [validator]: function, [adapter]: function, [defaultValue]:*}}  ruleset\n         * @param {String} key\n         * @param {*} value\n         * @returns {*}\n         */\n        function executeRequired(ruleset, key, value) {\n            let required = Lodash.get(ruleset, 'required');\n\n            if (Utility.isDefined(ruleset.defaultValue)) {\n                if (!value) {\n                    value = ruleset.defaultValue;\n                }\n            }\n\n            if (true === required) {\n                if (Utility.isNullOrUndefined(value)) {\n                    Preconditions.shouldBeExisting(value, `Utility.take(). 'key=${key}' is required`);\n                }\n            }\n\n\n            return value;\n        }\n\n        /**\n         * If the ruleset requires, will throw.\n         *\n         * @throws PreconditionsError\n         * @param {{[scope]: Object, [adapter]: function, [validator]: function, [adapter]: function}}  ruleset\n         * @param {String} key\n         * @param {*} value\n         * @returns {*}\n         */\n        function executeType(ruleset, key, value) {\n            if (!ruleset.required && Utility.isUndefined(value)) {\n                return;\n            }\n\n            let type = Lodash.get(ruleset, 'type');\n\n            if (type) {\n                Preconditions.shouldBeType(type, value, `${key} was wrong type.`);\n            }\n\n            return value;\n        }\n\n        /**\n         * Main entry point for checks.\n         *\n         * @param {{[adapter]: function, [validator]: function, [adapter]: function}}  ruleset\n         * @param {String} key\n         * @param {*} value\n         * @returns {*}\n         */\n        function executeChecks(ruleset, key, value) {\n            // console.log(`executeChecks with ruleset: ${JSON.stringify(ruleset)} and (key:${key}) (value:${value})`);\n\n            value = executeAdapter(ruleset, key, value);\n            value = executeRequired(ruleset, key, value);\n            value = executeType(ruleset, key, value);\n            value = executeValidator(ruleset, key, value);\n\n            return value;\n        }\n\n        //endregion\n\n        //region ruleset - defaults\n        let global_defaults = {};\n\n        Preconditions.shouldNotBeInstance(optionalTypeDeclarationOrDefaults, 'the 3rd parameter cannot be an instance of a CoreObject field.');\n\n        if (Utility.isObject(optionalTypeDeclarationOrDefaults)) {\n            if (Utility.isClass(optionalTypeDeclarationOrDefaults)) {\n                global_defaults = {\n                    type: optionalTypeDeclarationOrDefaults\n                };\n            } else {\n                global_defaults = Lodash.assign(global_defaults, optionalTypeDeclarationOrDefaults);\n            }\n\n            optionalTypeDeclarationOrDefaults = null;\n        } else if (Utility.isFunction(optionalTypeDeclarationOrDefaults)) {\n            global_defaults = {\n                validator: optionalTypeDeclarationOrDefaults\n            };\n\n            optionalTypeDeclarationOrDefaults = null;\n        } else if (Utility.isBoolean(optionalTypeDeclarationOrDefaults)) {\n            global_defaults = {\n                required: optionalTypeDeclarationOrDefaults\n            };\n\n            optionalTypeDeclarationOrDefaults = null;\n\n            Preconditions.shouldBeUndefined(requiredByDefault, 'You provided two booleans. That\\'s strange.');\n        }\n\n        if (Utility.isBoolean(requiredByDefault)) {\n            // global_defaults.required =\n            global_defaults = Utility.defaults(global_defaults, {\n                required: requiredByDefault\n            });\n        }\n\n        // if (Utility.isDefined(global_defaults.defaultValue)) {\n        //     throw new Error('has default value global');\n        // }\n\n        /**\n         *\n         * @param {Object} [defaults]\n         * @returns {{required:Boolean, validator:Function, type:String|Object, adapter:Function}}\n         */\n        function toRuleset(defaults) {\n            let ruleset = {};\n\n            ruleset = Lodash.defaults(ruleset, defaults || {}, global_defaults, {\n                required: false,\n                validator: null\n            });\n\n            return ruleset;\n        }\n\n        //endregion\n\n        let mode = Utility.typeOf(keyAsStringObjectArray);\n\n        //region String Mode\n        if ('string' === mode) {\n            /** @type {String} */\n            let key = keyAsStringObjectArray;\n            keyAsStringObjectArray = null;\n\n            /** @type {*} */\n            let value = Utility.result(object, key);\n\n            /**\n             * @type {{validator?:function, required?:boolean, type?: string|object}}\n             */\n            let ruleset = toRuleset();\n\n            // if (Utility.isClass(optionalTypeDeclarationOrDefaults)) {\n            //     ruleset = {\n            //         validator: Utility.typeMatcher(optionalTypeDeclarationOrDefaults),\n            //         required: false\n            //     };\n            // } else if (Utility.isFunction(optionalTypeDeclarationOrDefaults)) {\n            //     ruleset = {\n            //         validator: optionalTypeDeclarationOrDefaults,\n            //         required: false\n            //     };\n            // } else if (Utility.isNullOrUndefined(optionalTypeDeclarationOrDefaults)) {\n            //     ruleset = {\n            //         validator: Utility.yes,\n            //         required: false\n            //     };\n            // } else if (Utility.isObject(optionalTypeDeclarationOrDefaults) && !Utility.isInstance(optionalTypeDeclarationOrDefaults)) {\n            //     // TODO: apply global defaults.\n            //     ruleset = optionalTypeDeclarationOrDefaults;\n            // } else {\n            //     throw new TypeError('Not sure how to interpret the rules.')\n            // }\n\n            if (-1 != key.indexOf('.')) {\n                // It's an object path.\n                let parentPath = key.substring(0, key.lastIndexOf('.'));\n                let itemKey = key.substring(key.lastIndexOf('.') + 1);\n                let parent = Utility.result(object, parentPath);\n\n                delete parent[itemKey];\n            } else {\n                delete object[key];\n            }\n\n            return executeChecks(ruleset, key, value);\n        }\n        //endregion\n\n        //region Array/Object mode\n        if ('array' === mode || 'object' === mode) {\n            let result = {};\n\n            let defaults = toRuleset(Utility.result(keyAsStringObjectArray, 'defaults', {}));\n\n            Lodash.forEach(keyAsStringObjectArray,\n\n                /**\n                 *\n                 * @param {String|Object|Function} rulesetOrObject\n                 * @param {String} [rulesetOrObject.key]\n                 * @param {Number|String} keyOrIndex\n                 */\n                function (rulesetOrObject, keyOrIndex) {\n                    /**\n                     * @type {String}\n                     */\n                    let key;\n\n                    /**\n                     * @type {Object}\n                     */\n                    let ruleset;\n\n                    if ('array' === mode) {\n                        if (Utility.isString(rulesetOrObject)) {\n                            key = rulesetOrObject;\n                            ruleset = Lodash.defaults({}, defaults);\n\n                            // if (Utility.isObject(optionalTypeDeclarationOrDefaults)) {\n                            //     ruleset = Lodash.defaults(ruleset, optionalTypeDeclarationOrDefaults);\n                            // }\n                        } else if (Utility.isObject(rulesetOrObject)) {\n                            /**\n                             * @type {String}\n                             */\n                            key = Preconditions.shouldBeString(Utility.result(rulesetOrObject, 'key'), 'key not defined');\n                            ruleset = rulesetOrObject;\n                        } else if (Utility.isFunction(rulesetOrObject)) {\n                            ruleset = {\n                                validator: rulesetOrObject\n                            };\n                        } else {\n                            throw new Error('Dont know what to do: ' + rulesetOrObject);\n                        }\n                    } else if ('object' === mode) {\n                        key = keyOrIndex;\n\n                        if (Utility.isString(rulesetOrObject)) {\n                            ruleset = {\n                                type: rulesetOrObject\n                            };\n                        } else if (Utility.isObject(rulesetOrObject)) {\n                            ruleset = rulesetOrObject;\n                        } else if (Utility.isFunction(rulesetOrObject)) {\n                            ruleset = {\n                                validator: rulesetOrObject\n                            };\n                        } else {\n                            throw new Error('Dont know what to do: ' + rulesetOrObject);\n                        }\n\n                    } else {\n                        Preconditions.fail('array|object', mode, 'Unknown mode');\n                    }\n\n                    Preconditions.shouldNotBeBlank(key, 'Key must be defined by here in all situations.');\n                    Preconditions.shouldBeObject(ruleset, 'Must have a valid ruleset: ' + ruleset);\n\n                    // if (Utility.isObject(ruleset)) {\n                    //     // this is a ruleset that overrides our ruleset.\n                    //     ruleset = Lodash.defaults({key: key}, ruleset, defaults);\n                    // } else if (Utility.isFunction(ruleset)) {\n                    //     let fn = ruleset;\n                    //\n                    //     ruleset = {\n                    //         key: key,\n                    //         validator: fn\n                    //     };\n                    // } else {\n                    //     throw new Error('Cannot determine what to do with: ' + typeOfRuleset + ': ' + ruleset);\n                    // }\n\n                    ruleset = Lodash.defaults(ruleset, defaults);\n\n                    let requiredType = ruleset.type;\n\n                    // If we don't have a validator yet, check to see if we can get one.\n                    if (!ruleset.validator && Utility.isNotBlank(requiredType)) {\n                        if ('string' === requiredType) {\n                            ruleset.validator = Utility.isString;\n                        } else if ('number' === requiredType) {\n                            ruleset.validator = Utility.isNumber;\n                        } else if ('required' === requiredType) {\n                            ruleset.validator = Utility.isExisting;\n                        } else {\n                            throw new Error('I should add more types: ' + requiredType);\n                        }\n                    }\n\n                    if ('defaults' === key) {\n                        return;\n                    }\n\n                    result[key] = executeChecks(ruleset, key, Utility.take(object, key));\n                });\n\n            return result;\n        } else {\n            throw new Error('Not sure how to handle this case: ' + Utility.typeOf(keyAsStringObjectArray));\n        }\n        //endregion\n\n    }\n\n    /**\n     * Creates a test method. Uses Utility.typeOf()\n     *\n     * @param {String|Class} type\n     * @return {function}\n     */\n    static typeMatcher(type) {\n        // Ember.typeOf();                       // 'undefined'\n        // Ember.typeOf(null);                   // 'null'\n        // Ember.typeOf(undefined);              // 'undefined'\n        // Ember.typeOf('michael');              // 'string'\n        // Ember.typeOf(new String('michael'));  // 'string'\n        // Ember.typeOf(101);                    // 'number'\n        // Ember.typeOf(new Number(101));        // 'number'\n        // Ember.typeOf(true);                   // 'boolean'\n        // Ember.typeOf(new Boolean(true));      // 'boolean'\n        // Ember.typeOf(Ember.makeArray);        // 'function'\n        // Ember.typeOf([1, 2, 90]);             // 'array'\n        // Ember.typeOf(/abc/);                  // 'regexp'\n        // Ember.typeOf(new Date());             // 'date'\n        // Ember.typeOf(Ember.Object.extend());  // 'class'\n        // Ember.typeOf(Ember.Object.create());  // 'instance'\n        // Ember.typeOf(new Error('teamocil'));  // 'error'\n        // // 'normal' JavaScript object\n        // Ember.typeOf({ a: 'b' });             // 'object'\n\n        let knownTypes = {\n            'undefined': true,\n            'null': true,\n            'string': true,\n            'number': true,\n            'boolean': true,\n            'function': true,\n            'array': true,\n            'instance': true,\n            'error': true,\n            'object': true,\n            'class': true,\n            'regexp': true,\n            'date': true\n        };\n\n        /**\n         * Should be string.\n         */\n        {\n            let typeOfType = Utility.typeOf(type);\n\n            if (!('string' === typeOfType || 'class' === typeOfType)) {\n                Preconditions.fail('string', type, `The type passed in was not a string|class. It was ${typeOfType}`);\n            }\n        }\n\n        /**\n         * Should be known type.\n         */\n        {\n            // This will cause an infinite loop.\n            // Preconditions.shouldNotBeBlank(type, 'type missing');\n            // type = Utility.toLowerCase(type);\n            if (Utility.isString(type)) {\n                type = type.toLowerCase();\n\n                Preconditions.shouldBeTrue(knownTypes[type], 'unknown type: ' + type);\n\n                return (function (/** @type {*} */ object) {\n                    let objectType = Utility.typeOf(object);\n\n                    if ('object' === type || 'instance' === type) {\n                        return ('object' === objectType) || ('instance' === objectType);\n                    }\n\n                    return type === objectType;\n                });\n            } else if (Utility.isClass(type)) {\n                /**\n                 * @type {Class<CoreObject>}\n                 */\n                return function (/** @type {*} */object) {\n                    return (type.isInstance(object));\n                };\n            }\n        }\n\n\n    }\n\n    /**\n     * Returns a consistent type for the passed item.\n     *\n     * Use this instead of the built-in `typeof` to get the type of an item.\n     * It will return the same result across all browsers and includes a bit\n     * more detail. Here is what will be returned:\n     *\n     * | Return Value  | Meaning                                              |\n     * |---------------|------------------------------------------------------|\n     * | 'string'      | String primitive or String object.                   |\n     * | 'number'      | Number primitive or Number object.                   |\n     * | 'boolean'     | Boolean primitive or Boolean object.                 |\n     * | 'null'        | Null value                                           |\n     * | 'undefined'   | Undefined value                                      |\n     * | 'function'    | A function                                           |\n     * | 'array'       | An instance of Array                                 |\n     * | 'regexp'      | An instance of RegExp                                |\n     * | 'date'        | An instance of Date                                  |\n     * | 'class'       | An Ember class (created using Ember.Object.extend()) |\n     * | 'instance'    | An Ember object instance                             |\n     * | 'error'       | An instance of the Error object                      |\n     * | 'object'      | A JavaScript object not inheriting from Ember.Object |\n     *\n     * Examples:\n     *\n     ```javascript\n     Ember.typeOf();                       // 'undefined'\n     Ember.typeOf(null);                   // 'null'\n     Ember.typeOf(undefined);              // 'undefined'\n     Ember.typeOf('michael');              // 'string'\n     Ember.typeOf(new String('michael'));  // 'string'\n     Ember.typeOf(101);                    // 'number'\n     Ember.typeOf(new Number(101));        // 'number'\n     Ember.typeOf(true);                   // 'boolean'\n     Ember.typeOf(new Boolean(true));      // 'boolean'\n     Ember.typeOf(Ember.makeArray);        // 'function'\n     Ember.typeOf([1, 2, 90]);             // 'array'\n     Ember.typeOf(/abc/);                  // 'regexp'\n     Ember.typeOf(new Date());             // 'date'\n     Ember.typeOf(Ember.Object.extend());  // 'class'\n     Ember.typeOf(Ember.Object.create());  // 'instance'\n     Ember.typeOf(new Error('teamocil'));  // 'error'\n\n     // 'normal' JavaScript object\n     Ember.typeOf({ a: 'b' });             // 'object'\n     ```\n     *\n     * @method typeOf\n     * @for Ember\n     * @param {Object} object the item to check\n     * @return {String} the type\n     * @public\n     */\n    static typeOf(object) {\n        let type = Ember.typeOf(object);\n\n        if ('function' === type) {\n            // Let's isClass a bit further.\n\n            if (CoreObject.isClass(object) || Errors.isErrorClass(object)) {\n                return 'class';\n            } else if (Errors.isErrorInstance(object)) {\n                return 'error';\n            }\n        } else if ('object' === type) {\n            if (CoreObject.isInstance(object)) {\n                return 'instance';\n            } else if (Utility.isTemporal(object)) {\n                return 'temporal';\n            }\n        }\n\n        return type;\n    }\n\n    /**\n     * @param {Date|*} value\n     * @return {Boolean}\n     */\n    static isDate(value) {\n        return 'date' === Utility.typeOf(value);\n    }\n\n    /**\n     *\n     * @param {String} string\n     * @returns {boolean}\n     */\n    static isEmail(string) {\n        Preconditions.shouldBeString(string, 'Should be string');\n\n        var type = Utility.typeOf(string);\n\n        if (type !== 'string' || !string) {\n            return false;\n        }\n\n        return EMAIL_PATTERN.test(string);\n    }\n\n    /**\n     *\n     * @param {*} object\n     * @returns {boolean}\n     */\n    static isArray(object) {\n        return 'array' === Utility.typeOf(object);\n    }\n\n    /**\n     *\n     * @param {*} object\n     * @returns {boolean}\n     */\n    static isBoolean(object) {\n        return 'boolean' === Utility.typeOf(object);\n    }\n\n    /**\n     *\n     * @param {*} object\n     * @return {boolean}\n     */\n    static isUndefined(object) {\n        return 'undefined' === Utility.typeOf(object);\n    }\n\n    /**\n     *\n     * @param {*} object\n     * @returns {boolean}\n     */\n    static isDefined(object) {\n        return !this.isUndefined(object);\n    }\n\n    /**\n     * Shorthand: Utility.typeOf() === string\n     *\n     * This is for functional programming.\n     *\n     * @param {*} object\n     * @returns {boolean}\n     */\n    static isString(object) {\n        return 'string' === Utility.typeOf(object);\n    }\n\n    /**\n     * Determines if the argument is a Number, String, null, undefined\n     *\n     * @param {*} object\n     * @returns {boolean}\n     */\n    static isPrimitive(object) {\n        if (Utility.isNullOrUndefined(object)) {\n            return true;\n        }\n\n        let type = Utility.typeOf(object);\n        let primitives = ['number', 'string'];\n\n        return -1 !== primitives.indexOf(type);\n    }\n\n    /**\n     * Determine if something is a promise\n     *\n     * @param {*} object\n     * @return boolean\n     */\n    static isPromise(object) {\n        return Promise.is(object);\n    }\n\n    /**\n     *\n     * @param valueOrFn\n     */\n    static isTruthy(valueOrFn) {\n        let value;\n\n        if (Utility.isFunction(valueOrFn)) {\n            value = valueOrFn();\n        } else {\n            value = valueOrFn;\n        }\n\n        return !!value;\n    }\n\n    /**\n     *\n     * @param fn\n     * @returns {boolean}\n     */\n    static isFunction(fn) {\n        return 'function' === Utility.typeOf(fn);\n    }\n\n    /**\n     * @param {*} object\n     * @returns {boolean}\n     */\n    static isNotFunction(object) {\n        return 'function' !== Utility.typeOf(object);\n    }\n\n    /**\n     * @param {*} object\n     * @returns {boolean}\n     */\n    static isNaN(object) {\n        return Lodash.isNaN(object);\n    }\n\n    /**\n     *\n     * @param {*} anything\n     * @returns {boolean}\n     */\n    static isNull(anything) {\n        return 'null' === Utility.typeOf(anything);\n    }\n\n    /**\n     *\n     * @param {CoreObject|Class} object\n     * @returns {Class|*|Class.<CoreObject>}\n     */\n    static getClass(object) {\n        if (Utility.isClass(object)) {\n            return object;\n        }\n\n        Preconditions.shouldBeInstance(object);\n\n        return object.toClass();\n    }\n\n    /**\n     * @param {String|Number|Big|null|NaN|undefined} numberOrStringOrBig\n     * @returns {Big}\n     */\n    static toBigNumber(numberOrStringOrBig) {\n        if (Utility.isNullOrUndefined(numberOrStringOrBig)) {\n            numberOrStringOrBig = 0;\n        }\n\n        if (numberOrStringOrBig instanceof Big) {\n            return numberOrStringOrBig;\n        } else if (Utility.isString(numberOrStringOrBig) || Utility.isNumber(numberOrStringOrBig)) {\n            return new Big(numberOrStringOrBig);\n        }\n\n        Preconditions.fail('Number|String|Big', numberOrStringOrBig, 'Unsupported type');\n    }\n\n    /**\n     *\n     * @param {Class|CoreObject|null|undefined} object\n     * @returns {Class|undefined}\n     */\n    static optClass(object) {\n        if (Utility.isInstance(object)) {\n            return Utility.getClass(object);\n        } else if (Utility.isClass(object)) {\n            return object;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Null-safe way to lowercase\n     * @param {String} string\n     * @returns {String}\n     */\n    static toLowerCase(string) {\n        if (Utility.isBlank(string)) {\n            return string;\n        }\n\n        Preconditions.shouldBeString(string);\n\n        return string.toLowerCase();\n    }\n\n    /**\n     * Null-safe way to uppercase.\n     *\n     * @param {String} string\n     * @returns {String}\n     */\n    static toUpperCase(string) {\n        if (Utility.isBlank(string)) {\n            return string;\n        }\n\n        Preconditions.shouldBeString(string);\n\n        return string.toUpperCase();\n    }\n\n    /**\n     *\n     * @param object\n     */\n    static optString(object) {\n        if (!Utility.isExisting(object)) {\n            return undefined;\n        } else {\n            if (Utility.isFunction(object.toString)) {\n                return object.toString();\n            } else {\n                return '' + object;\n            }\n        }\n    }\n\n    /**\n     * optJson(undefined) -> undefined\n     * optJson(null) -> undefined\n     * optJson(NaN) -> undefined\n     * optJson(primitive) -> primitive\n     * optJson(object) -> object.toJSON\n     * optJson(object) -> object.toJson\n     * optJson(object) -> object\n     *\n     * @param object\n     * @return {*}\n     */\n    static optJson(object) {\n        if (!Utility.isExisting(object)) {\n            return undefined;\n        } else if (Utility.isPrimitive(object)) {\n            return object;\n        } else if (Utility.isFunction(object.toJson)) {\n            return object.toJson();\n        } else if (Utility.isFunction(object.toJSON)) {\n            return object.toJSON();\n        } else {\n            return object;\n        }\n    }\n\n    /**\n     * Determines if the input is NotNull, NotNaN, and NotUndefined.\n     *\n     * @param {*} anything\n     * @return {boolean}\n     */\n    static isExisting(anything) {\n        let u = Utility.isUndefined(anything);\n        let n = Utility.isNaN(anything);\n        let nu = Utility.isNull(anything);\n\n        return !(u || n || nu);\n    }\n\n    /**\n     * The opposite of existing.\n     *\n     * @param {*} anything\n     * @returns {boolean}\n     */\n    static isNotExisting(anything) {\n        return !Utility.isExisting(anything);\n    }\n\n    /**\n     *\n     * @param {*} object\n     * @returns {boolean}\n     */\n    static isFalsey(object) {\n        return !object;\n    }\n\n    /**\n     *\n     * @param object\n     */\n    static isNotFalsey(object) {\n        return !Utility.isFalsey(object);\n    }\n\n    /**\n     * Shorthand for value\n     *\n     * @param value\n     * @returns {boolean}\n     */\n    static isNullOrUndefined(value) {\n        return Utility.isNull(value) || Utility.isUndefined(value);\n    }\n\n    /**\n     * A value is blank if it is empty or a whitespace string.\n     *\n     * ```javascript\n     * Ember.isBlank();                // true\n     * Ember.isBlank(null);            // true\n     * Ember.isBlank(undefined);       // true\n     * Ember.isBlank('');              // true\n     * Ember.isBlank([]);              // true\n     * Ember.isBlank('\\n\\t');          // true\n     * Ember.isBlank('  ');            // true\n     * Ember.isBlank({});              // false\n     * Ember.isBlank('\\n\\t Hello');    // false\n     * Ember.isBlank('Hello world');   // false\n     * Ember.isBlank([1,2,3]);         // false\n     * ```\n     * @param {String|Array|Number} stringOrArrayOrNumber\n     * @param {String|Array|Number} [stringOrArrayOrNumber.length]\n     * @return {boolean}\n     */\n    static isBlank(stringOrArrayOrNumber) {\n        if (Utility.isNotExisting(stringOrArrayOrNumber)) {\n            return true;\n        }\n\n        let type = Utility.typeOf(stringOrArrayOrNumber);\n        if ('number' === type) {\n            return (0 == stringOrArrayOrNumber);\n        }\n\n        if (!('array' === type || 'string' === type || 'number' === type)) {\n            Preconditions.fail('type|array', type);\n        }\n\n        return Ember.isBlank(stringOrArrayOrNumber);\n    }\n\n    /**\n     *\n     * @param {String} string\n     * @return {boolean}\n     */\n    static isNotBlank(string) {\n        return !Utility.isBlank(string);\n    }\n\n    /**\n     * @returns {Number}\n     */\n    static defaultNumber() {\n        let result = 0;\n\n        Lodash.each(arguments, function (object) {\n            if (Utility.isNumber(object)) {\n                result = object;\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     *\n     * @param {String|Number} value\n     * @return {boolean}\n     */\n    static isNumeric(value) {\n        if (typeof value === 'number') return true;\n        var str = (value || '').toString();\n        if (!str) return false;\n        return !isNaN(str);\n    }\n\n    /**\n     *\n     * @param {*} value\n     * @returns {Number}\n     */\n    static toNumberOrFail(value) {\n        if (Utility.isNullOrUndefined(value)) {\n            return 0;\n        } else if (Utility.isNumber(value)) {\n            return value;\n        } else if (Utility.isString(value)) {\n            return Number.parseFloat(value);\n        } else if (value instanceof Big) {\n            // is this a risk?\n            return Number.parseFloat(value.toFixed());\n        }\n\n        throw new TypeError(\"unknown type: \" + Utility.typeOf(value));\n    }\n\n    /**\n     * @param {Number|String|Big|BigJsLibrary.BigJS|Instant|null|undefined|ZonedDateTime} numberOrStringOrBig\n     * @param {String|DateTimeFormatter} [optionalParserOrFormat]\n     *\n     * @return {Instant|undefined}\n     */\n    static optInstant(numberOrStringOrBig, optionalParserOrFormat) {\n        /**\n         * @type {ZonedDateTime}\n         */\n        let date = Utility.optDateTime(numberOrStringOrBig, optionalParserOrFormat);\n\n        if (!date) {\n            return undefined;\n        }\n\n        return date.toInstant();\n    }\n\n    /**\n     * @param {Number|String|Big|BigJsLibrary.BigJS|Instant|null|undefined} numberOrStringOrBig\n     * @param {String|DateTimeFormatter} [optionalParserOrFormat]\n     *\n     * @return {Date|undefined}\n     */\n    static optDate(numberOrStringOrBig, optionalParserOrFormat) {\n        let date = Utility.optDateTime(numberOrStringOrBig, optionalParserOrFormat);\n\n        if (!date) {\n            return undefined;\n        }\n\n        return convert(date);\n    }\n\n    /**\n     *\n     * @param {String|ZoneOffset|undefined} value\n     * @return {ZoneOffset}\n     */\n    static toTimeZoneOffset(value) {\n        if (Utility.isNotExisting(value)) {\n            return ZoneOffset.UTC;\n        } else if (Utility.isString(value)) {\n            return ZoneOffset.of(value);\n        } else if (value instanceof ZoneOffset) {\n            return value;\n        }\n\n        Errors.throwNotSure(value);\n    }\n\n    /**\n     * @param {Number|String|Big|BigJsLibrary.BigJS|Instant|null|undefined} numberOrStringOrBig\n     * @param {String|DateTimeFormatter|ZoneOffset} [optionalDateFormatStringOrDateFormatter]\n     *\n     * @return {ZonedDateTime|undefined}\n     */\n    static optDateTime(numberOrStringOrBig, optionalDateFormatStringOrDateFormatter) {\n        if (!numberOrStringOrBig) {\n            return Utility\n                .now()\n                .withZoneSameInstant(Utility.toTimeZoneOffset(optionalDateFormatStringOrDateFormatter));\n        }\n\n        if (Utility.isDate(numberOrStringOrBig)) {\n            return LocalDateTime\n                .from(nativeJs(numberOrStringOrBig))\n                .atZone(Utility.toTimeZoneOffset(optionalDateFormatStringOrDateFormatter));\n        }\n\n        if (Utility.isString(numberOrStringOrBig)) {\n            return ZonedDateTime\n                .parse(numberOrStringOrBig, Utility.toDateTimeFormatter(optionalDateFormatStringOrDateFormatter));\n        }\n\n        if (Utility.isTemporal(numberOrStringOrBig)) {\n            /** @type {ZoneOffset} */\n            let zone = numberOrStringOrBig.query(TemporalQueries.zone());\n\n            if (!zone) {\n                zone = Utility.toTimeZoneOffset(optionalDateFormatStringOrDateFormatter);\n            }\n\n            if (numberOrStringOrBig instanceof ZonedDateTime) {\n                return numberOrStringOrBig;\n            } else if (numberOrStringOrBig instanceof Instant) {\n                return ZonedDateTime.ofInstant(numberOrStringOrBig, zone);\n            }\n\n            /** @type {LocalTime} */\n            let localTime = numberOrStringOrBig.query(TemporalQueries.localTime());\n            /** @type {LocalDate} */\n            let localDate = numberOrStringOrBig.query(TemporalQueries.localDate());\n\n            if (!localTime) {\n                localTime = LocalTime.now(zone).toLocalTime();\n            }\n\n            if (!localDate) {\n                localDate = LocalDate.now(zone);\n            }\n\n            return localTime\n                .atDate(localDate)\n                .atZone(zone);\n        }\n    }\n\n\n    /**\n     *\n     * This is copied from https://js-joda.github.io/js-joda/esdoc/class/src/format/DateTimeFormatter.js~DateTimeFormatter.html\n     *\n     *  |Symbol  |Meaning                     |Presentation      |Examples\n     *  |--------|----------------------------|------------------|----------------------------------------------------\n     *  | G      | era                        | number/text      | 1; 01; AD; Anno Domini\n     *  | y      | year                       | year             | 2004; 04\n     *  | D      | day-of-year                | number           | 189\n     *  | M      | month-of-year              | number/text      | 7; 07; Jul; July; J\n     *  | d      | day-of-month               | number           | 10\n     *  |        |                            |                  |\n     *  | Q      | quarter-of-year            | number/text      | 3; 03; Q3\n     *  | Y      | week-based-year            | year             | 1996; 96\n     *  | w      | week-of-year               | number           | 27\n     *  | W      | week-of-month              | number           | 27\n     *  | e      | localized day-of-week      | number           | 2; Tue; Tuesday; T\n     *  | E      | day-of-week                | number/text      | 2; Tue; Tuesday; T\n     *  | F      | week-of-month              | number           | 3\n     *  |        |                            |                  |\n     *  | a      | am-pm-of-day               | text             | PM\n     *  | h      | clock-hour-of-am-pm (1-12) | number           | 12\n     *  | K      | hour-of-am-pm (0-11)       | number           | 0\n     *  | k      | clock-hour-of-am-pm (1-24) | number           | 0\n     *  |        |                            |                  |\n     *  | H      | hour-of-day (0-23)         | number           | 0\n     *  | m      | minute-of-hour             | number           | 30\n     *  | s      | second-of-minute           | number           | 55\n     *  | S      | fraction-of-second         | fraction         | 978\n     *  | A      | milli-of-day               | number           | 1234\n     *  | n      | nano-of-second             | number           | 987654321\n     *  | N      | nano-of-day                | number           | 1234000000\n     *  |        |                            |                  |\n     *  | V      | time-zone ID               | zone-id          | America/Los_Angeles; Z; -08:30\n     *  | z      | time-zone name             | zone-name        | Pacific Standard Time; PST\n     *  | X      | zone-offset 'Z' for zero   | offset-X         | Z; -08; -0830; -08:30; -083015; -08:30:15;\n     *  | x      | zone-offset                | offset-x         | +0000; -08; -0830; -08:30; -083015; -08:30:15;\n     *  | Z      | zone-offset                | offset-Z         | +0000; -0800; -08:00;\n     *  |        |                            |                  |\n     *  | p      | pad next                   | pad modifier     | 1\n     *  |        |                            |                  |\n     *  | '      | escape for text            | delimiter        |\n     *  | ''     | single quote               | literal          | '\n     *  | [      | optional section start     |                  |\n     *  | ]      | optional section end       |                  |\n     *  | {}     | reserved for future use    |                  |\n     *\n     * @param {String|DateTimeFormatter|null} [stringOrFormatter]\n     * @throws {TypeError} if not sure what to do.\n     * @return {DateTimeFormatter}\n     */\n    static toDateTimeFormatter(stringOrFormatter) {\n        if (Utility.isNotExisting(stringOrFormatter)) {\n            return DateTimeFormatter.ISO_ZONED_DATE_TIME;\n        } else if (Utility.isString(stringOrFormatter)) {\n            Preconditions.shouldNotBeBlank(stringOrFormatter);\n\n            return DateTimeFormatter.ofPattern(stringOrFormatter);\n        }\n\n        Errors.throwNotSure(stringOrFormatter);\n    }\n\n    /**\n     * Proxies to Utility.now() if you pass no arguments.\n     *\n     * This is copied from https://js-joda.github.io/js-joda/esdoc/class/src/format/DateTimeFormatter.js~DateTimeFormatter.html\n     *\n     *  |Symbol  |Meaning                     |Presentation      |Examples\n     *  |--------|----------------------------|------------------|----------------------------------------------------\n     *  | G      | era                        | number/text      | 1; 01; AD; Anno Domini\n     *  | y      | year                       | year             | 2004; 04\n     *  | D      | day-of-year                | number           | 189\n     *  | M      | month-of-year              | number/text      | 7; 07; Jul; July; J\n     *  | d      | day-of-month               | number           | 10\n     *  |        |                            |                  |\n     *  | Q      | quarter-of-year            | number/text      | 3; 03; Q3\n     *  | Y      | week-based-year            | year             | 1996; 96\n     *  | w      | week-of-year               | number           | 27\n     *  | W      | week-of-month              | number           | 27\n     *  | e      | localized day-of-week      | number           | 2; Tue; Tuesday; T\n     *  | E      | day-of-week                | number/text      | 2; Tue; Tuesday; T\n     *  | F      | week-of-month              | number           | 3\n     *  |        |                            |                  |\n     *  | a      | am-pm-of-day               | text             | PM\n     *  | h      | clock-hour-of-am-pm (1-12) | number           | 12\n     *  | K      | hour-of-am-pm (0-11)       | number           | 0\n     *  | k      | clock-hour-of-am-pm (1-24) | number           | 0\n     *  |        |                            |                  |\n     *  | H      | hour-of-day (0-23)         | number           | 0\n     *  | m      | minute-of-hour             | number           | 30\n     *  | s      | second-of-minute           | number           | 55\n     *  | S      | fraction-of-second         | fraction         | 978\n     *  | A      | milli-of-day               | number           | 1234\n     *  | n      | nano-of-second             | number           | 987654321\n     *  | N      | nano-of-day                | number           | 1234000000\n     *  |        |                            |                  |\n     *  | V      | time-zone ID               | zone-id          | America/Los_Angeles; Z; -08:30\n     *  | z      | time-zone name             | zone-name        | Pacific Standard Time; PST\n     *  | X      | zone-offset 'Z' for zero   | offset-X         | Z; -08; -0830; -08:30; -083015; -08:30:15;\n     *  | x      | zone-offset                | offset-x         | +0000; -08; -0830; -08:30; -083015; -08:30:15;\n     *  | Z      | zone-offset                | offset-Z         | +0000; -0800; -08:00;\n     *  |        |                            |                  |\n     *  | p      | pad next                   | pad modifier     | 1\n     *  |        |                            |                  |\n     *  | '      | escape for text            | delimiter        |\n     *  | ''     | single quote               | literal          | '\n     *  | [      | optional section start     |                  |\n     *  | ]      | optional section end       |                  |\n     *  | {}     | reserved for future use    |                  |\n     *\n     * @param {Temporal|LocalDateTime|ZonedDateTime|Number|String|Big|BigJsLibrary.BigJS|Instant|null|undefined} [value]\n     * @param {String|DateTimeFormatter} [optionalDateFormatStringOrDateFormatter]\n     * @return {ZonedDateTime}\n     */\n    static toDateTime(value, optionalDateFormatStringOrDateFormatter) {\n        if (Utility.isBlank(arguments.length)) {\n            return Utility.now();\n        }\n\n        let dateTime = Utility.optDateTime(value, optionalDateFormatStringOrDateFormatter);\n\n        if (dateTime) {\n            return dateTime;\n        }\n\n        Errors.throwNotSure(value);\n    }\n\n    /**\n     *\n     * @return {ZonedDateTime}\n     */\n    static now() {\n        return ZonedDateTime.now();\n    }\n\n    /**\n     * @returns {*|Object}\n     */\n    static defaultObject() {\n        let result = null;\n\n        Lodash.each(arguments, function (object) {\n            if (Utility.isObject(object)) {\n                result = object;\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     *\n     * @param {Object} target\n     * @param {String|{}} propertyNameOrObject\n     * @param {*} [propertyValueOrUndefined]\n     * @returns {Object}\n     */\n    set(target, propertyNameOrObject, propertyValueOrUndefined) {\n        Preconditions.shouldBeObject(target);\n\n        if (Utility.isString(propertyNameOrObject)) {\n            let propertyName = propertyNameOrObject;\n            let propertyValue = propertyValueOrUndefined;\n\n            Preconditions.shouldBeString(propertyName);\n            Preconditions.shouldNotBeBlank(propertyName);\n            Preconditions.shouldBeDefined(propertyValue);\n\n            return Ember.set(target, propertyName, propertyValue);\n        } else if (Utility.isObject(propertyNameOrObject)) {\n            Preconditions.shouldBeUndefined(propertyValueOrUndefined);\n\n            Lodash.each(propertyNameOrObject, function (value, key) {\n                Utility.set(target, key, value);\n            });\n        }\n    }\n\n    /**\n     * Applies all of the defaults onto the first object.\n     *\n     * @param {Object} object\n     * @param {Object} defaults\n     * @returns {Object} The original object.\n     */\n    static defaults(object, defaults) {\n        Preconditions.shouldBeObject(object, 'target object must be object.');\n        Preconditions.shouldBeObject(defaults, 'defaults object must be object.');\n\n        let updates = Object.keys(defaults);\n\n        for (let i = 0, l = updates.length; i < l; i++) {\n            let prop = updates[i];\n            let value = Ember.get(defaults, prop);\n\n            Ember.set(object, prop, value);\n        }\n\n        return object;\n    }\n\n    /**\n     *\n     * @param {Class} clazz\n     * @return {String|undefined}\n     */\n    static optClassName(clazz) {\n        if (!clazz) {\n            return undefined;\n        }\n\n        if (Utility.isClass(clazz)) {\n            return clazz.toString() || clazz.constructor.name;\n        } else if (Utility.isInstance(clazz)) {\n            return Utility.optClassName(clazz.toClass());\n        }\n\n        Errors.throwNotSure(clazz);\n    }\n}\n\nexport default Utility;"]}